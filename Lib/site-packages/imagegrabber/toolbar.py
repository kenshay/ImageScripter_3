from PyQt5 import QtGui,uic,QtCore
import sys
from PyQt5.QtWidgets import QApplication, QWidget
import subprocess
import numpy as np
import cv2
import paramiko
from scp import SCPClient
import sys
#import Image
from PIL import Image
nbytes = 4096
import os
import sys
from PyQt5 import QtGui,uic,QtCore
import sys
from PyQt5.QtWidgets import QApplication, QWidget
import image_grabber_class
import sys
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog
from PyQt5.QtGui import QIcon
import os
from shutil import copyfile


#Main_Image_File  = r"C:\Settings\raw.png"
Main_Image_File  = r"C:\Settings\Last_Templet_Image.png"




class Tool_Bar_Class(QWidget):
    def __init__(self):
        QWidget.__init__(self)
        self.destination_File = r"screenshot.png"
        self.initWatcher()
        self.ui = uic.loadUi('toolbar.ui')
        self.ui.pushButton.clicked.connect(self.capture_clicked)
        self.ui.pushButton_3.clicked.connect(self.load_clicked)
        self.ui.pushButton_5.clicked.connect(self.get_image_from_itp8)
        self.ui.pushButton_2.clicked.connect(self.save)
        self.ui.pushButton_4.clicked.connect(self.hide_toolbar)
        self.ui.scrollArea.hide()
        self.ui.show()

    def hide_toolbar(self):
        self.ui.scrollArea.hide()




    def save(self):
        try:
            os.chdir(self.lastdir)
        except:
            os.chdir(r"C:\ImageScripter_2\Lib\site-packages\elan\Applications_And_Devices\Itp8")
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getSaveFileName(self, "QFileDialog.getOpenFileName()", "",
                                                  "All Files (*);;Python Files (*.py)", options=options)
        if fileName:
            print(fileName)
            if fileName.endswith('.png'):
                pass
            else:
                fileName += '.png'

            copyfile(Main_Image_File, fileName)

            self.lastdir = os.path.dirname(fileName)





    def initWatcher(self):
        paths = [Main_Image_File]
        self.fs_watcher = QtCore.QFileSystemWatcher(paths)
        self.fs_watcher.fileChanged.connect(self.File_Changed)

    def File_Changed(self):
        print('Changed')
        self.load_clicked()

    def get_image_from_itp8(self):
        try:
            print('show_image_from_itp8')
            hostname = '192.168.0.37'
            port = 2199
            username = 'root'
            password = 'N0rt3k$C'
            command = 'scrot /tmp/test.png'
            def createSSHClient():
                client = paramiko.SSHClient()
                #client.load_system_host_keys()
                client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                client.connect(hostname, port, username, password)
                return client
            client = paramiko.Transport((hostname, port))
            client.connect(username=username, password=password)
            stdout_data = []
            stderr_data = []
            session = client.open_channel(kind='session')
            session.exec_command(command)
            while True:
                if session.recv_ready():
                    stdout_data.append(session.recv(nbytes))
                if session.recv_stderr_ready():
                    stderr_data.append(session.recv_stderr(nbytes))
                if session.exit_status_ready():
                    break
            session.close()
            client.close()
            ssh = createSSHClient()
            scp = SCPClient(ssh.get_transport())
            scp.get('/tmp/test.png', self.destination_File)
            picture = Image.open(self.destination_File)
            picture = picture.rotate(90, expand=True)
            picture.save(Main_Image_File)
            print('done')
        except Exception as e:
            print(e)




    def load_clicked(self):
        try:
            print('Load Clicked')
            Pixmap = QtGui.QPixmap(Main_Image_File)
            self.ui.label.setPixmap(Pixmap)
            self.ui.label.resize(Pixmap.width(), Pixmap.height())
            self.ui.scrollArea.show()
        except Exception as e:
            print(e)



    def mouseReleaseEvent(self, event):
        try:
            print("Release")
        except Exception as e:
            print(e)


    def capture_clicked(self):
        try:
            Python = r"C:\ImageScripter_2\python.exe"
            Script = r"C:\ImageScripter_2\Lib\site-packages\imagegrabber\image_grabber_class.py"
            subprocess.Popen([Python, Script])
        except Exception as e:
            print(e)



if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = Tool_Bar_Class()
    sys.exit(app.exec_())