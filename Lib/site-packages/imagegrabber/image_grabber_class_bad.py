import sys
from PyQt5 import QtWidgets, QtCore, QtGui
import tkinter as tk
from PIL import ImageGrab
import numpy as np
import cv2
import paramiko
from scp import SCPClient
import sys
#import Image
from PIL import Image
nbytes = 4096
import os
import sys
from PyQt5 import QtGui,uic,QtCore
import sys
from PyQt5.QtWidgets import QApplication, QWidget
import image_grabber_class




if sys.version_info[0] == 2:  # the tkinter library changed it's name from Python 2 to 3.
    import Tkinter
    tkinter = Tkinter #I decided to use a library reference to avoid potential naming conflicts with people's programs.
else:
    import tkinter
from PIL import Image, ImageTk



class Image_Grabber_Class(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        try:
            self.ui = uic.loadUi('toolbar.ui')
            self.destination_File = r"screenshot.png"
            self.show_image_from_itp8()
            root = tk.Tk()
            screen_width = root.winfo_screenwidth()
            screen_height = root.winfo_screenheight()
            self.setGeometry(0, 0, screen_width, screen_height)
            self.setWindowTitle(' ')
            self.begin = QtCore.QPoint()
            self.end = QtCore.QPoint()
            self.setWindowOpacity(0.3)
            QtWidgets.QApplication.setOverrideCursor(
                QtGui.QCursor(QtCore.Qt.CrossCursor)
            )
            self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
            print('Capture the screen...')
            self.show()
            #self.ui.show()
        except Exception as e:
            print(e)

    def paintEvent(self, event):
        qp = QtGui.QPainter(self)
        qp.setPen(QtGui.QPen(QtGui.QColor('black'), 3))
        qp.setBrush(QtGui.QColor(128, 128, 255, 128))
        qp.drawRect(QtCore.QRect(self.begin, self.end))

    def mousePressEvent(self, event):
        self.begin = event.pos()
        self.end = self.begin
        self.update()

    def mouseMoveEvent(self, event):
        self.end = event.pos()
        self.update()

    def mouseReleaseEvent(self, event):
        #self.close()
        x1 = min(self.begin.x(), self.end.x())
        y1 = min(self.begin.y(), self.end.y())
        x2 = max(self.begin.x(), self.end.x())
        y2 = max(self.begin.y(), self.end.y())
        img = ImageGrab.grab(bbox=(x1, y1, x2, y2))
        img.save(self.path)
        #img = cv2.cvtColor(np.array(img), cv2.COLOR_BGR2RGB)
        #cv2.imshow('Captured Image', img)
        #cv2.waitKey(0)
        #cv2.destroyAllWindows()

    def show_image_from_itp8(self):
        print('show_image_from_itp8')
        hostname = '192.168.0.51'
        port = 22
        username = 'root'
        password = 'nortek'
        command = 'scrot /tmp/test.png'
        def createSSHClient():
            client = paramiko.SSHClient()
            #client.load_system_host_keys()
            client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            client.connect(hostname, port, username, password)
            return client
        client = paramiko.Transport((hostname, port))
        client.connect(username=username, password=password)
        stdout_data = []
        stderr_data = []
        session = client.open_channel(kind='session')
        session.exec_command(command)
        while True:
            if session.recv_ready():
                stdout_data.append(session.recv(nbytes))
            if session.recv_stderr_ready():
                stderr_data.append(session.recv_stderr(nbytes))
            if session.exit_status_ready():
                break
        session.close()
        client.close()
        ssh = createSSHClient()
        scp = SCPClient(ssh.get_transport())
        scp.get('/tmp/test.png', self.destination_File)
        picture = Image.open(self.destination_File)
        self.picture = picture.rotate(90, expand=True)



        #showPIL(picture)
        #picture.rotate(90, expand=True).save(self.destination_File)
        #
        #picture.close()
        #return picture










if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    Image_Graber = Image_Grabber_Class()
    #Image_Graber.show()
    #app.aboutToQuit.connect(app.deleteLater)
    sys.exit(app.exec_())