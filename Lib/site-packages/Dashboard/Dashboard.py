#!/usr/bin/env python3

import socket
from PyQt5 import QtGui,uic,QtCore
from win32api import GetSystemMetrics
import sys
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog,QTextEdit,QMainWindow
import cv2
import win32api
from datetime import datetime as datetime1
import pickle
import cv2
from imagescripter.core.ssh_manager_for_image_show import SSH_Manager
from win32api import GetSystemMetrics
from imagescripter import *
from imagescripter.core.functions import Ping
import traceback
import win32api
import ctypes
from imagescripter.core.imagescripter_script import ImageScripter_Script_Class
from time import sleep
from datetime import datetime
import PyQt5
import time
from PyQt5.QtGui import QStandardItemModel,QStandardItem
from imagescripter.core.variable_file_getter import Variable_File_Getter
import os
from paths import *
import re
from PyQt5.QtCore    import *
from PyQt5.QtWidgets import *

import sys




Path_for_Input = r"C:\Eluminate\System\ImageScripter\Lib\site-packages\Dashboard\Input.txt"

class Dashboard_Class(QWidget):
    def __init__(self):
            QWidget.__init__(self)
            self.ui = uic.loadUi(r"C:\Eluminate\System\ImageScripter\Lib\site-packages\Dashboard\dashboard.ui")
            import socket
            IP = socket.gethostbyname(socket.gethostname())
            self.ui.showMaximized()

            connected_client_changed_paths = [r"C:\Eluminate\System\ImageScripter\Lib\site-packages\Dashboard\Connected_Controllers\update.txt"]
            self.connected_client_changed_watcher = QtCore.QFileSystemWatcher(connected_client_changed_paths)
            self.connected_client_changed_watcher.fileChanged.connect(self.Connected_Client_Update_File_Changed)





            input_changed_paths = [Path_for_Input]
            self.input_changed_watcher = QtCore.QFileSystemWatcher(input_changed_paths)
            self.input_changed_watcher.fileChanged.connect(self.Create_and_Add_Post)
            self.process = QtCore.QProcess(self)
            self.process.readyReadStandardOutput.connect(self.stdoutReady)
            self.process.readyReadStandardError.connect(self.stderrReady)
            self.process.started.connect(lambda: self.started_process('Started!'))
            self.process.finished.connect(lambda: self.finished_process('Finished!'))
            self.process.start(Python_Exe_Location, [r"C:\Eluminate\System\ImageScripter\Lib\site-packages\Dashboard\Dashboard_Server.py"])
            self.Connected_Client_Update_File_Changed()
    def stdoutReady(self):
        text = str(self.process.readAllStandardOutput(), encoding="utf-8")
        self.append(text)

    def Connected_Client_Update_File_Changed(self):
        try:
            self.model = QStandardItemModel(self.ui.listView)

            for i in os.listdir(r'C:\Eluminate\System\ImageScripter\Lib\site-packages\Dashboard\Connected_Controllers'):
                item =  QStandardItem(i)
                item.setCheckable(False)
                item.setDragEnabled(True)
                item.setDropEnabled(False)
                self.model.appendRow(item)
            self.ui.listView.setModel(self.model)

        except Exception as e:
            print(e)



    def stderrReady(self):
        text = str(self.process.readAllStandardError(), encoding="utf-8")
        self.append(text)

    def append(self,text):
        try:
            cursor = self.ui.textEdit.textCursor()
            cursor.movePosition(cursor.End)
            cursor.insertText(text)
            self.ui.textEdit.setTextCursor(cursor)
            #cursor.insertText('\n')
            #self.ui.textEdit.verticalScrollBar().setValue(self.ui.textEdit.verticalScrollBar().maximum())
            self.ui.textEdit.ensureCursorVisible()
        except Exception as e:
            print(e)

    def started_process(self,text):
        pass

    def finished_process(self,text):
        pass


    def Create_and_Add_Post(self):
        try:
            with open(Path_for_Input,'r') as f:
                text = f.read()
            cursor = self.ui.textBrowser.textCursor()
            cursor.movePosition(cursor.End)
            self.ui.textBrowser.append('<h1>' + text + '</h1><hr>')
            #cursor.insertText('1\n\n')
            self.ui.textBrowser.setTextCursor(cursor)
            self.ui.textBrowser.ensureCursorVisible()
            #self.ui.textBrowser.verticalScrollBar().setValue(self.ui.textBrowser.verticalScrollBar().maximum())
        except Exception as e:
            print(e)

app = QApplication(sys.argv)
ex = Dashboard_Class()
sys._excepthook = sys.excepthook
sys.exit(app.exec_())