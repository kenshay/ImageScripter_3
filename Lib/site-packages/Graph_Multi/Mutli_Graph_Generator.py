from yattag import Doc
from yattag import indent
import random
import os
from paramiko import SSHClient
import paramiko
import time
import traceback
from scp import SCPClient
from Database_Manager.Dictionary_Database_Manager import Dictionary_Database_Manager_Class
from paths import MAX_CUTOFF,Dictionary_Database_Location,Ignore_Graph_Script_List, All_Scripts_Folder_Location, Active_Build, Graph_Folder_Location, \
    Active_Build_without_EXE


ssh_host = '172.105.150.15'
ssh_user = 'root'
ssh_password = 'M8wh11YhL'
ssh_port = '22'
Playground = r'C:\xampp\htdocs\Graphs'





Graph_Server_Location = r"/var/www/html/graphs/"

External_Logs_Folder = r"/var/www/html/Logs/"
Local_Logs_Folder = r'C:\xampp\htdocs\Logs\\'


log_php_location = r"C:\xampp\htdocs\script_log.php"
Script_Log_Location = r"/var/www/html/script_log.php"
Local_Index_Page_Location = r"C:\xampp\htdocs\index.php"
Target_Index_Page_Location = r"/var/www/html/index.php"
#Branches = ['8.5.18','8.5.13']

with open(r"\\172.16.43.21\nas\Reports\Branches.txt",'r') as f:
    Branches = eval(f.read())
#Branches = ['8.5','8.4']


def clear_folder(folder):
    try:
        import os, shutil
        for filename in os.listdir(folder):
            file_path = os.path.join(folder, filename)
            try:
                if os.path.isfile(file_path) or os.path.islink(file_path):
                    os.unlink(file_path)
                elif os.path.isdir(file_path):
                    shutil.rmtree(file_path)
            except Exception as e:
                print('Failed to delete %s. Reason: %s' % (file_path, e))
    except FileNotFoundError:
        os.mkdir(folder)










def Upload_To_Server(target,destination):
    print('Uploading To Server')
    try:

        ########################################################
        ssh = SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(ssh_host, username=ssh_user, password=ssh_password, look_for_keys=False)
        with SCPClient(ssh.get_transport()) as scp:
            #print('Uploading ', log_php_location, 'To ', Script_Log_Location)
            #scp.put(log_php_location, Script_Log_Location)
            #print('Finished Uploading ', log_php_location)
            #if path == None:
            #    print('Uploading ', graph, 'To ', Short_Graph_Location)
            #    scp.put(graph, Short_Graph_Location)
            #    print('Finished Uploading ', graph)
           # else:
            print('Uploading ', target, 'To ', destination)
            scp.put(target, destination)
            print('Finished Uploading ', target)
        ssh.close()
        scp.close()
    except:
        traceback.print_exc()
        try:
            ssh.close()
        except:
            pass
        try:
            scp.close()
        except:
            pass



def Make_LOG_For_Station(Dictionary_Database_Manager,BRANCH,BUILD,Station):
    last_path = os.getcwd()
    os.chdir(Local_Logs_Folder)
    print("Make Log Graph")
    #Dictionary_Database_Manager = Dictionary_Database_Manager_Class(Dictionary_Database_Location,BUILD_VAR = BUILD)
    List_of_entries = Dictionary_Database_Manager.get_list_of_logs_by_station(Station)
    doc, tag, text = Doc().tagtext()
    doc.asis('<!DOCTYPE HTML>')
    with tag('html', lang=" en"):
        with tag('head'):
            doc.asis('<!-- basic.html -->')
            doc.asis('<meta http-equiv="refresh" content="999">')
            with tag('title'):
                text('basic.html')
            doc.asis('<meta charset = "UTF-8" />')
            doc.asis('<link rel="stylesheet" href="style.css">')
        with tag('body'):
            with tag('table'):
                with tag('tr'):
                    for title in ['Index','Date','Start','End','Station','Build','Script']:
                        with tag('td'):
                            text(title)
                for entries in List_of_entries:
                    with tag('tr'):
                        for td_num in entries:
                            with tag('td'):
                                text(str(td_num))
    result = indent(doc.getvalue())
    if not os.path.exists(Local_Logs_Folder):
        os.makedirs(Local_Logs_Folder)
    File_Name_With_Path = Local_Logs_Folder + '__' + Station + '__' + BUILD + '.php'
    File_Name_Only = '__' + Station + '__' + BUILD + '.php'
    with open(File_Name_With_Path, 'w+') as f:
        print('## ##',File_Name_With_Path,'## ##')
        f.write(result)
        print('Log Finished ',File_Name_With_Path)
    os.chdir(last_path)
    return File_Name_Only

#External_Logs_Folder = r"/var/www/html/logs/"
#Local_Logs_Folder = r'C:\xampp\htdocs\Logs\\'

def Upload_All_Logs_To_Server():
    print('Upload_All_Logs_To_Server')
    cur_dir = os.getcwd()
    os.chdir(Local_Logs_Folder)
    for path in os.listdir(Local_Logs_Folder):
        file_name_only = os.path.basename(path)
        log_location = External_Logs_Folder + file_name_only
        Upload_To_Server(path, log_location)




def Upload_All_Graphs_To_Server():
    print('Upload_All_Graphs_To_Server')
    cur_dir = os.getcwd()
    os.chdir(Playground)
    for path in os.listdir(Playground):
        file_name_only = os.path.basename(path)
        graph_location = Graph_Server_Location + file_name_only
        Upload_To_Server(path, graph_location)

def Upload_Index_Page():
    print("Upload_Index_Page()")
    Upload_To_Server(Local_Index_Page_Location, Target_Index_Page_Location)










def Create_Index_Page():
    print('Create_Index_Page')
    clear_folder(Playground)
    Dictionary_Database_Manager = Dictionary_Database_Manager_Class(Dictionary_Database_Location)
    Stations_List = Dictionary_Database_Manager.get_all_station_names()
    doc, tag, text = Doc().tagtext()
    doc.asis('<!DOCTYPE HTML>')
    with tag('html', lang=" en"):
        with tag('head'):
            doc.asis('<!-- basic.html -->')
            doc.asis('<meta http-equiv="refresh" content="999">')
            with tag('title'):
                text('basic.html')
            doc.asis('<meta charset = "UTF-8" />')
            with tag('style'):
                doc.asis('div {'
                         'display:inline-block;'
                         'float:left;'
                         'text-align: center;'
                         'list-style-type:none;'
                         'padding-left: 10%;'
                         'padding-right: 10%;'
                         '}'
    
                         'ul {'
                         'list-style-type:none;'
                         'text-align: center;'
                         '}'
                         )

            #doc.asis('<link rel="stylesheet" href="style.css">')
        with tag('body'):
            for BRANCH in Branches:
                Last_Five_Build = Dictionary_Database_Manager.get_last_Amount_of_builds(BRANCH)
                for station_name in Stations_List:
                    with tag('div'):
                        with tag('h4'):
                            text(station_name + ' (' + BRANCH + ')')
                        with tag('ul'):
                            for build in Last_Five_Build:
                                with tag('li'):
                                    underscore_build = build.replace('.','_')
                                    graph_name = station_name + '__' + underscore_build
                                    #IP = "172.105.150.15"
                                    IP = '172.105.150.15'
                                    link = "http://{}/graphs/{}.php".format(IP,graph_name)
                                    doc.asis('<a href="{}">{}</a>'.format(link,build))

    result = indent(doc.getvalue())

    with open(Local_Index_Page_Location, 'w+') as f:
        f.write(result)



def Generate_Graphs():
    clear_folder(Playground)
    clear_folder(Local_Logs_Folder)
    print("Generate_Graphs")
    #Dictionary_Database_Manager = Dictionary_Database_Manager_Class(Dictionary_Database_Location,BUILD_VAR='8_5_17_0')
    Dictionary_Database_Manager = Dictionary_Database_Manager_Class(Dictionary_Database_Location)
    Stations_List = Dictionary_Database_Manager.get_all_station_names()
    for BRANCH in Branches:
        Last_Five_Builds = Dictionary_Database_Manager.get_last_Amount_of_builds(BRANCH)
        for Station_Name in Stations_List:
            for BUILD in Last_Five_Builds:
                Underscore_Build = BUILD.replace('.', '_')
                Dictionary_Database_Manager = Dictionary_Database_Manager_Class(Dictionary_Database_Location,BUILD_VAR=Underscore_Build)
                Log_Location = Make_LOG_For_Station(Dictionary_Database_Manager,BRANCH,BUILD, Station_Name)
                All_get_missing_scripts_from_current_build = Dictionary_Database_Manager.get_missing_scripts_from_current_build()
                print(All_get_missing_scripts_from_current_build)
                doc, tag, text = Doc().tagtext()
                doc.asis('<!DOCTYPE HTML>')
                with tag('html', lang=" en"):
                    with tag('head'):
                        doc.asis('<!-- basic.html -->')
                        doc.asis('<meta http-equiv="refresh" content="999">')
                        with tag('title'):
                            text('basic.html')
                        doc.asis('<meta charset = "UTF-8" />')
                        doc.asis('<link rel="stylesheet" href="../style.css">')
                    with tag('body'):
                        with tag('div', id="nav_bar"):
                            with tag('h2'):
                                with tag('a', href="http://172.105.150.15/"):
                                    text("Home")
                        with tag('div', id="top_div"):
                            with tag('h2', id="last_update_date"):
                                from datetime import datetime
                                now = datetime.now()
                                datest = now.strftime('%I:%M:%S   %Y/%m/%d')
                                text("Updated " + datest)
                        #if Cut_Off == None:
                        #    with tag('h2'):
                        #        with tag('a', id="build",href="http://172.105.150.15"):
                        #            text("Short Version")
                        #else:
                        #with tag('h2'):
                        #    with tag('a', id="build",href="http://172.105.150.15/long_graph.php"):
                        #        text("Long Version")

                            #with tag('h2', id="last_update_date"):
                            #     text(Station_Name)

                            with tag('h2', id="last_update_date"):
                                 astring = 'Build = $'
                                 astring = astring.replace('$',BUILD)
                                 text(astring)
                            with tag('h2', id="last_update_date"):
                                with tag('a', id="build", href="http://172.105.150.15/Logs/{}".format(Log_Location)):
                                    text(Station_Name + " Log")
                                #with tag('a', id="build", href="http://172.105.150.15/script_log.php"):
                                #    text("Log")

                    with tag('div'):
                        List_of_scripts_dicts = []
                        Max_Length_List = []
                        scripts_list = Dictionary_Database_Manager.get_all_scripts_from_station_by_folder(Station_Name)
                        LAST_RUN_SCRIPT_INDEX = Dictionary_Database_Manager.get_last_run_script_by_station(Station_Name)
                        for script_name_and_real_script_name in reversed(scripts_list):
                            List_of_both = script_name_and_real_script_name.split('|||')
                            script_name = List_of_both[0]
                            print('#', script_name)
                            real_script_name = List_of_both[1]
                            print('##', real_script_name)
                            Cut_Off = MAX_CUTOFF
                            if real_script_name not in Ignore_Graph_Script_List:
                                if Cut_Off == None:
                                    Pass_Fail_List_of_entries_for_script = Dictionary_Database_Manager.get_order_of_happened_scripts_passes_and_fails(
                                        Station_Name, real_script_name)

                                else:
                                    Pass_Fail_List_of_entries_for_script = Dictionary_Database_Manager.get_order_of_happened_scripts_passes_and_fails(
                                        Station_Name, real_script_name)[Cut_Off:]
                                Max_Length_List.append(len(Pass_Fail_List_of_entries_for_script))
                                script_dict = {}
                                script_dict['name'] = script_name
                                List = []
                                for entry in reversed(Pass_Fail_List_of_entries_for_script):
                                    Result_Dict = {}
                                    Result_Dict['pass'] = entry['pass'].split(':')[1]
                                    fail_Video_Name = entry['fail_video'].split(':')[1]
                                    fail_Video_Name = os.path.basename(fail_Video_Name)
                                    fail_Video_Name_without_avi = fail_Video_Name.rstrip('.avi')
                                    pass_Video_Name = entry['pass_video'].split(':')[1]
                                    pass_Video_Name = os.path.basename(pass_Video_Name)
                                    pass_Video_Name_without_avi = pass_Video_Name.rstrip('.avi')
                                    Result_Dict['fail_Video_Name_without_avi'] = fail_Video_Name_without_avi
                                    Result_Dict['pass_Video_Name_without_avi'] = pass_Video_Name_without_avi
                                    Result_Dict['index_time'] = entry['index_time']
                                    #############################################
                                    Result_Dict['entry'] = entry
                                    #################################
                                    List.append(Result_Dict)
                            script_dict['results'] = List
                            List_of_scripts_dicts.append(script_dict)
                        ###
                        ####
                        if Cut_Off == None:
                            Amount_Of_Runs_Total = max(Max_Length_List)
                        else:
                            Amount_Of_Runs_Total = int(str(MAX_CUTOFF).replace('-', ''))
                        with tag('table', id="title_table"):
                            with tag('tr'):
                                with tag('td', id="title_table_td"):
                                    text(Station_Name)
                        with tag('table', cellspacing="0", cellpadding="0"):
                            ###################################################################################
                            with tag('tr'):

                                for interger in reversed(range(Amount_Of_Runs_Total)):
                                    interger += 1
                                    with tag('td', id="td_script_number"):
                                        pass
                                for script_dict in List_of_scripts_dicts:
                                    name = script_dict['name']
                                    Result_Dict_List = script_dict['results']
                                    with tag('tr'):
                                        for desc in name.split('/'):
                                            if '^0^' not in desc:
                                                with tag('td', id="td_script_name"):
                                                    text(desc)
                                            else:
                                                with tag('td', id="td_script_name"):
                                                    doc.asis('&nbsp;')
                                            with tag('td', id="td_script_name"):
                                                for i in range(3):
                                                    doc.asis('&nbsp;')
                                        if len(Result_Dict_List) > Amount_Of_Runs_Total:
                                            for blank in range(Amount_Of_Runs_Total - len(Result_Dict_List)):
                                                with tag('td', id='tdnotrun'):
                                                    pass
                                            for Result_Dict in Result_Dict_List:
                                                entry = Result_Dict['entry']
                                                pass_or_fail = Result_Dict['pass']
                                                index_time = Result_Dict['index_time']
                                                try:
                                                    looked_at = Result_Dict['entry']['looked_at'].split(':')[1]
                                                    if looked_at == 'True':
                                                        looked_at = True
                                                    else:
                                                        looked_at = False
                                                except:
                                                    looked_at = False
                                                if pass_or_fail == 'True':
                                                    pass_or_fail = 'tdpass'
                                                else:
                                                    pass_or_fail = 'tdfail'
                                                if looked_at == True:
                                                    pass_or_fail = 'tdlookedat'
                                                if str(LAST_RUN_SCRIPT_INDEX) == str(index_time):
                                                    if pass_or_fail == 'tdpass':
                                                        pass_or_fail = 'tdlastrunpass'
                                                    else:
                                                        pass_or_fail = 'tdlastrunfail'

                                                fail_Video_Name_without_avi = Result_Dict['fail_Video_Name_without_avi']
                                                if fail_Video_Name_without_avi != 'None':
                                                    # linkwhole = "location.href='http://172.105.150.15/fails/" + fail_Video_Name_without_avi + "/fail.php'"
                                                    simple_link = 'http://172.105.150.15/Entries/' + str(
                                                        index_time) + '/result.php'
                                                    linkwhole = "location.href='http://172.105.150.15/Entries/" + str(
                                                        index_time) + "/result.php'"
                                                    # print(linkwhole)
                                                    with tag('td', id=pass_or_fail, onclick=linkwhole):
                                                        the_text = entry['date'].replace('date:', '')
                                                        text(the_text)
                                                        doc.asis('<br>')
                                                        the_text = entry['script_start_time'].replace('script_start_time:',
                                                                                                      '')
                                                        text(the_text)
                                                        doc.asis('<br>')
                                                        the_text = '<a href="$$">Info</a>'
                                                        the_text = the_text.replace('$$', simple_link)
                                                        doc.asis(the_text)
                                                else:
                                                    index_time = Result_Dict['index_time']
                                                    pass_Video_Name_without_avi = Result_Dict['pass_Video_Name_without_avi']
                                                    simple_link = 'http://172.105.150.15/Entries/' + str(
                                                        index_time) + '/result.php'
                                                    linkwhole = "location.href='http://172.105.150.15/Entries/" + str(
                                                        index_time) + "/result.php'"

                                                    with tag('td', id=pass_or_fail, onclick=linkwhole):
                                                        the_text = entry['date'].replace('date:', '')
                                                        text(the_text)
                                                        doc.asis('<br>')
                                                        the_text = entry['script_start_time'].replace('script_start_time:',
                                                                                                      '')
                                                        text(the_text)
                                                        doc.asis('<br>')
                                                        the_text = '<a href="$$">Info</a>'
                                                        the_text = the_text.replace('$$', simple_link)
                                                        doc.asis(the_text)
                                        else:
                                            for Result_Dict in Result_Dict_List:
                                                entry = Result_Dict['entry']
                                                pass_or_fail = Result_Dict['pass']
                                                index_time = Result_Dict['index_time']
                                                try:
                                                    looked_at = Result_Dict['entry']['looked_at'].split(':')[1]
                                                    if looked_at == 'True':
                                                        looked_at = True
                                                    else:
                                                        looked_at = False
                                                except:
                                                    looked_at = False
                                                if pass_or_fail == 'True':
                                                    pass_or_fail = 'tdpass'
                                                else:
                                                    pass_or_fail = 'tdfail'
                                                if looked_at == True:
                                                    pass_or_fail = 'tdlookedat'
                                                if str(LAST_RUN_SCRIPT_INDEX) == str(index_time):
                                                    if pass_or_fail == 'tdpass':
                                                        pass_or_fail = 'tdlastrunpass'
                                                    else:
                                                        pass_or_fail = 'tdlastrunfail'
                                                fail_Video_Name_without_avi = Result_Dict['fail_Video_Name_without_avi']
                                                if fail_Video_Name_without_avi != 'None':
                                                    # linkwhole = "location.href='http://172.105.150.15/fails/" + fail_Video_Name_without_avi + "/fail.php'"
                                                    simple_link = 'http://172.105.150.15/Entries/' + str(
                                                        index_time) + '/result.php'
                                                    linkwhole = "location.href='http://172.105.150.15/Entries/" + str(
                                                        index_time) + "/result.php'"
                                                    # print(linkwhole)
                                                    with tag('td', id=pass_or_fail, onclick=linkwhole):
                                                        the_text = entry['date'].replace('date:', '')
                                                        text(the_text)
                                                        doc.asis('<br>')
                                                        the_text = entry['script_start_time'].replace('script_start_time:',
                                                                                                      '')
                                                        text(the_text)
                                                        doc.asis('<br>')
                                                        the_text = '<a href="$$">Info</a>'
                                                        the_text = the_text.replace('$$', simple_link)
                                                        doc.asis(the_text)
                                                else:
                                                    index_time = Result_Dict['index_time']
                                                    pass_Video_Name_without_avi = Result_Dict['pass_Video_Name_without_avi']
                                                    simple_link = 'http://172.105.150.15/Entries/' + str(
                                                        index_time) + '/result.php'
                                                    linkwhole = "location.href='http://172.105.150.15/Entries/" + str(
                                                        index_time) + "/result.php'"
                                                    with tag('td', id=pass_or_fail, onclick=linkwhole):
                                                        the_text = entry['date'].replace('date:', '')
                                                        text(the_text)
                                                        doc.asis('<br>')
                                                        the_text = entry['script_start_time'].replace('script_start_time:',
                                                                                                      '')
                                                        text(the_text)
                                                        doc.asis('<br>')
                                                        the_text = '<a href="$$">Info</a>'
                                                        the_text = the_text.replace('$$', simple_link)
                                                        doc.asis(the_text)
                                            for blank in range(Amount_Of_Runs_Total - len(Result_Dict_List)):
                                                with tag('td', id='tdnotrun'):
                                                    pass
                                with tag('tr'):
                                    for i in range(8):
                                        with tag('td', id="td_script_name"):
                                            pass
                                    for interger in reversed(range(Amount_Of_Runs_Total)):
                                        interger += 1
                                        with tag('td', id="td_script_number"):
                                            # text(str(interger))
                                            pass
                    with tag('div'):
                        with tag('h1', id="missing"):
                            doc.asis('<br>')
                            text('MISSING SCRIPTS')
                            doc.asis('<br>')

                        for missing in All_get_missing_scripts_from_current_build:
                            with tag('p'):
                                doc.asis('<br>')
                                text(missing)
                                doc.asis('<br>')
                result = indent(doc.getvalue())
                graph_name = Station_Name + '__' + Underscore_Build
                path = Playground + "\{}.php".format(graph_name)
                with open(path,'w+') as f:
                    f.write(result)


if __name__ == "__main__":
    Create_Index_Page()
    Generate_Graphs()
    Upload_All_Graphs_To_Server()
    Upload_Index_Page()
    Upload_All_Logs_To_Server()