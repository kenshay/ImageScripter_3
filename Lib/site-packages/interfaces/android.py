from paths import *
from interfaces.device import Device_Class
import os
import subprocess


##adb_location = "C:\Elan_Tools\ImageScripter\ProgramData\Android\ADB\platform-tools\\"
##screenshotfile = r'C:\ImageScripter_2\TEMP\Android_Screenshot.png'


def syscmd(cmd, encoding=''):
    """
    Runs a command on the system, waits for the command to finish, and then
    returns the text output of the command. If the command produces no text
    output, the command's return code will be returned instead.
    """
    p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=STDOUT,
        close_fds=True)
    p.wait()
    output = p.stdout.read()
    if len(output) > 1:
        if encoding: return output.decode(encoding)
        else: return output
    return p.returncode




class Android_Class(Device_Class):
    def _connect_(self):
        print('Connect!')
        if self._ipadress_ == None:
            print('Ip = None')
            pass
        else:
            curdir = os.getcwd()
            os.chdir(adb_location)
            string = 'adb connect device_ip_address'
            string = string.replace('device_ip_address',str(self._ipadress_))
            subprocess.call(string, shell=False)
            #os.system(string)
            os.chdir(curdir)



    def Connect(self):
        if self._ipadress_ == None:
            print('Ip = None')
            pass
        else:
            curdir = os.getcwd()
            os.chdir(adb_location)
            string = 'adb kill-server'
            subprocess.call(string, shell=False)
            string = 'adb start-server'
            subprocess.call(string, shell=False)
            #os.system(string)
            os.chdir(curdir)








    def _click_(self,x,y):
        self._connect_()
        curdir = os.getcwd()
        os.chdir(adb_location)
        x = str(x)
        y = str(y)
        string = 'adb shell input tap #X #Y'
        string = string.replace('#X',x)
        string = string.replace('#Y',y)
        subprocess.call(string, shell=False)
        #os.system(string)
        os.chdir(curdir)
    def _get_image_of_screen_(self,attempts = 100):
        self._connect_()
        curdir = os.getcwd()
        os.chdir(adb_location)
        command1 = r'adb shell screencap /sdcard/screen.png'
        command2 = r'adb pull /sdcard/screen.png #$%'
        command2 = command2.replace('#$%',screenshotfile)
        subprocess.call(command1, shell=False)
        subprocess.call(command2, shell=False)



        #os.system(command1)
        #os.system(command2)
        os.chdir(curdir)
        return screenshotfile
'''
 adb shell
shell@ $ screencap /sdcard/screen.png
shell@ $ exit
$ adb pull /sdcard/screen.png
'''


if __name__ == "__main__":
    while True:
        Interface = Android_Class()
        actual_img_path = Interface._get_image_of_screen_()

        ##aonepng = r"C:\ImageScripter_3\TEMP\Android_Pics\1.png"

        target_img_path = aonepng
        x,y = Interface._get_location_of_image_in_image(target_img_path,actual_img_path,threshold=.96)
        #x = 164
        #y = 499
        print(x,y)
        Interface._click_(x,y)

        actual_img_path = Interface._get_image_of_screen_()

        ##atwopng = r"C:\ImageScripter_3\TEMP\Android_Pics\2.png"


        target_img_path = atwopng
        x, y = Interface._get_location_of_image_in_image(target_img_path, actual_img_path, threshold=.96)
        # x = 164
        # y = 499
        print(x, y)
        Interface._click_(x, y)
