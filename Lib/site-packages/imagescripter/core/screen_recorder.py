import os
import subprocess
from datetime import datetime
import subprocess
import time
import base64
from imagescripter.core.variable_file_getter import Variable_File_Getter
import os.path

Videos_For_Database_Location_Folder = Variable_File_Getter.getVariableFromFile('Videos_For_Database_Location')





class Screen_Recorder_Class():
    recording_directory = Variable_File_Getter.getVariableFromFile('Recordings_Location')
    def getTime(self):
        now = datetime.now()
        return now.strftime("%c")
        #return now.strftime('%I:%M:%S')
    def create_recording_director_if_not_exitst(self):
        if not os.path.exists(self.recording_directory):
            os.makedirs(self.recording_directory)

    def delete_past_video(self,name):
        try:
            os.remove(name)
        except Exception as e:
            print(e)


    def stitch_videos_together_as_one(self,left_video,right_video,output_location):
        #Working Command
        #fmpeg -i one.avi -i two.avi -filter_complex hstack output.avi
        curdir = os.getcwd()
        os.chdir(r"C:\ImageScripter_2\Lib\site-packages\imagescripter\exe")
        self.video_proc = subprocess.Popen(['ffmpeg','-i',left_video,'-i',right_video,'-filter_complex','hstack',output_location])
        os.chdir(curdir)
        self.video_proc.wait()
        print('Finished Stitching Video -> ', output_location)



    def record(self,script_name = 'default'):
        print("Recording")
        self.create_recording_director_if_not_exitst()
        curdir = os.getcwd()
        os.chdir(r"C:\ImageScripter_2\Lib\site-packages\imagescripter\exe")
        unique_time_string = '_' + str(time.time())
        self.File_name_without_avi = self.recording_directory + '\\' + script_name + unique_time_string
        self.File_name_with_avi = self.File_name_without_avi + ".avi"
        #self.delete_past_video(self.File_name)
        self.video_proc = subprocess.Popen(['ffmpeg', '-f','gdigrab', '-framerate','5', '-i','desktop', self.File_name_with_avi,'-b', '1'])
        os.chdir(curdir)


    def convert_video(self,original_video_path,output_video_path):
        #Working Command
        #ffmpeg -i left.avi example.avi -hide_banner
        print('Started To Converting Video -> ', original_video_path)
        curdir = os.getcwd()
        os.chdir(r"C:\ImageScripter_2\Lib\site-packages\imagescripter\exe")
        self.video_proc = subprocess.Popen(['ffmpeg','-i',original_video_path,output_video_path,'-hide_banner'])
        os.chdir(curdir)
        self.video_proc.wait()
        print('Finished Converting Video -> ', output_video_path)



    def stop(self,Station_Name,Script_Name,Build,PassOrFail,Error):
        print("Stop Recording")
        self.video_proc.terminate()
        print('Videos_For_Database_Location_Folder-> ',Videos_For_Database_Location_Folder)
        print('Station_Name-> ',Station_Name)
        print('Script_Name-> ',Script_Name)
        print('Build-> ',Build)
        Build = Build.replace('R','')
        print('PassOrFail-> ',PassOrFail)
        print('Error-> ',Error)
        print('Videos_For_Database_Location_Folder-> ',Videos_For_Database_Location_Folder)
        try:
            new_file_name_without_avi = Videos_For_Database_Location_Folder + '\\' + Station_Name + '__' + Script_Name + '__' + Build + '__' + PassOrFail + '__' + Error
        except:
            Error = 'Error'
            new_file_name_without_avi = Videos_For_Database_Location_Folder + '\\' + Station_Name + '__' + Script_Name + '__' + Build + '__' + PassOrFail + '__' + Error


        new_file_name_without_avi = new_file_name_without_avi.replace(' ','')
        #####################Fix Length#############################
        while len(new_file_name_without_avi) > 210:
            print('Name Too Long, Removing Character')
            new_file_name_without_avi = new_file_name_without_avi[:-1]
            print(new_file_name_without_avi)
        print('Name is a good length')
        new_file_name = new_file_name_without_avi + ".avi"
        ##################Check IF Already Exists######################
        if not os.path.exists(new_file_name):
            print('Saving Video -> ' + new_file_name)
            for i in range(10):
                try:
                    self.convert_video(self.File_name_with_avi, new_file_name)
                    os.remove(self.File_name_with_avi)
                    #os.rename(self.File_name_with_avi,new_file_name)
                    break
                except PermissionError:
                    time.sleep(1)
                    if i >= 9:
                        raise
        else:
            print('Video Already Exists Skipping Save -> ',new_file_name)
            return new_file_name




if __name__ == "__main__":
    String = """Traceback (most recent call last):
      File "C:/Users/Automation3/.PyCharmCE2018.1/config/scratches/scratch_58.py", line 5, in <module>
        Configurator.media.Click()
      File "C:\ImageScripter_2\lib\site-packages\imagescripter\core\image.py", line 130, in Click
        result = self._application_object_._get_location_of_image_in_image(self._path_of_image_,self._application_object_._get_image_of_screen_(),threshold)
      File "C:\ImageScripter_2\lib\site-packages\imagescripter\core\device.py", line 45, in _get_location_of_image_in_image
        copyfile(actual_img_path, file_name)
      File "C:\ImageScripter_2\lib\shutil.py", line 115, in copyfile
        raise SpecialFileError("`%s` is a named pipe" % fn)
    shutil.SpecialFileError: `False` is a named pipe
    """

    Encoded_Traceback = String.replace(" ", "")
    Encoded_Traceback = ''.join(e for e in Encoded_Traceback if e.isalnum())
    Encoded_Traceback_List = Encoded_Traceback.split('File')
    Encoded_Traceback = Encoded_Traceback_List[1]
    hd_camera = Screen_Recorder_Class()
    hd_camera.record()
    time.sleep(5)
    video_path  = hd_camera.stop(Station_Name = 'KensDesk',Script_Name = 'test_script',Build = '8.3.6.0',Error = Encoded_Traceback,PassOrFail = 'Pass')
    #print('Video Path ####')
    #print(video_path)


    #hd_camera = Screen_Recorder_Class()
    #left = r"C:\Users\Automation3\Desktop\Recordings\left.avi"
    #right = r"C:\Users\Automation3\Desktop\Recordings\right.avi"
    #output = r"C:\Users\Automation3\Desktop\Recordings\output.avi"
    #hd_camera.stitch_videos_together_as_one(left,right,output)
