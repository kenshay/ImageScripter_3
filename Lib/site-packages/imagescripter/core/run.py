from imagescripter import *

from imagescripter import *
from paths import *
import pyautogui
from pywinauto import *
from selenium import webdriver
from paths import *
import os
import traceback
from imagescripter import *
import random 
from Email import Send_Email
import traceback
from urllib.request import urlopen
from pythonping import ping
def Get_And_Delete_NVR_Logs():
	for i in range(10):
		try:
			app = Application().start(Chroneexe)
			Sleep(3)
			Browser.Max()
			Sleep(20)
			if Browser.fuckingannoying.Exists():
				Browser.xthatshit.Click()
			if Browser.fuckingannoying2.Exists():
				Browser.xthatshit2.Click()				
			
			try:
				Browser.refresh123.Click(xoffset=900,yoffset=4)
				# Browser.refresh123.Click(xoffset=303,yoffset=4)
			except:
				Browser.refresh1234233.Click(xoffset=900,yoffset=4)
			
			Selected_IP = '192.168.0.100'
			Type(r'http://' + Selected_IP)
			Press('enter')
			Sleep(30)
			Type('ELAN')
			Press('tab')
			Type('3526')
			Sleep(10)
			Browser.signin.Wait()
			Browser.signin.Click()
			break
		except Exception as e:
			traceback.print_exc()
			Browser.Close()
			Sleep(10)
			if i >= 9:
				raise ValueError('Cant get chome to work right')
	Sleep(10)
	Browser.system33.Wait()
	Browser.system33.Click()
	Sleep(10)
	Browser.maintenance.Wait()
	Browser.maintenance.Click()
	Sleep(10)
	Browser.toools.Wait()
	Browser.toools.Click()
	Sleep(10)
	Browser.hardrive.Wait()
	Browser.hardrive.Click()
	Sleep(10)
	Browser.plus.Wait()
	Browser.plus.RightClick(xoffset=463,yoffset=468)
	Sleep(10)
	Browser.saveas.Wait()
	Browser.saveas.Click()
	log = r"C:\Ellumination\System\Data\NVR_LOG.txt"
	if os.path.exists(log):
	  os.remove(log)
	else:
	  print("The file does not exist")
	Browser.save23.Wait()
	Sleep(15)
	SaveAs.Edit.SetText(0,log)
	#Type(log)
	Sleep(10)
	Browser.save23.Wait()
	Browser.save23.Click()
	Sleep(60)
	with open(log,'r') as f:
		text = f.read()
	##################################Check for fail##	
	with open(log,'r') as f:
		text = f.read()
	print(text)
	###################################################
	Sleep(60)
	Browser.backarrow22.Wait()
	Browser.backarrow22.Click()
	Sleep(60)
	Browser.system33.Wait()
	Browser.system33.Click()
	Sleep(60)
	Browser.maintenance.Wait()
	Browser.maintenance.Click()
	Sleep(60)
	try:
		Browser.toools.Wait()
		Browser.toools.Click()
	except:
		Browser.maintenance.Wait()
		Browser.maintenance.Click()
		Sleep(60)
		Browser.toools.Wait()
		Browser.toools.Click()
	Sleep(60)
	Browser.deletelogs.Wait()
	Browser.deletelogs.Click()
	Sleep(60)
	Browser.ok123123.Wait()
	Browser.ok123123.Click()
	Browser.Close()
	text = '############## NVR LOG #############\n\n' + text + '\n##################\n'
	return text
try:
	File_Path = r"C:\Ellumination\Projects\_elan_\elan\Scripts\Frank\000_NVR_Timeline_Check.py"
	with open(File_Path,'r') as f:
		Text = '#\n' + f.read()
	with open(File_Path,'w') as f:
		f.write(Text)	
	####################################################
	#################################################################
	AMOUNT_PER_TEST = 4
	Amount_of_Layers = 9
	NVRIP = '192.168.0.100'
	WebAppAddress = 'http://' + NVRIP + '/'
	############################################
	def Ping_Check_NVR_():
		for times in range(10):
			try:
				x = str(ping(NVRIP, verbose=True))
				if 'Request timed out' in x:
					raise ValueError('NVR might be down,its not pinging back')
				else:
					print("Ping_Check_NVR_DONE")
					return True
			except Exception as e:
				print(e)
				print('Trying to ping again -> ',times)
				Sleep(10)
		raise ValueError('NVR might be down,its not pinging back')
		
	def ForceCloseViewer():
		try:
			print('ForceCloseViewer')
			for i in range(3):
				import os
				os.system("taskkill /f /im  CRYSTALPAD.exe")
				Sleep(1)
			Sleep(3)
			ElanConnectPro.Close()
		except:
			pass
	def ForceCloseNotepad():
		try:
			print('ForceCloseViewer')
			for i in range(3):
				import os
				os.system("taskkill /f /im  Notepad.exe")
				Sleep(1)
			Sleep(3)
			ElanConnectPro.Close()			
		except Exception as e:
			print(e)
			pass
		
	def CheckWebAppFailIfProblem():
		try:
			url = "http://192.168.0.100/newlang1/login.html?uuid=%28ucc%3Bman%3A11nsbp%3Blan%3A0nsbp%3Bcon%3A0nsbp%3Bcom%3A0nsbp%3Balt%3AsCBv2grNiSzU4Or5mdaMmdaMmdaSn9AOnsbp%3Bname%3AEL-NVRnsbp%3B%29"
			import requests
			username = 'ELAN'
			password = '3526'
			text = str(requests.get(url,timeout=1, auth=(username, password)).content)
			if 'onLoad="onLoadUserControl()' in text:
				print('Working')
			else:
				raise ValueError("NVR Web UI might be down")
		except Exception as e:
			print(e)
			raise ValueError("NVR Web UI might be down")
			
	
	
	def Check_if_NVR_IS_Down():
		print("Check_if_NVR_IS_Down")
		CheckWebAppFailIfProblem()
		print("Ping_Check_NVR_()")
		Ping_Check_NVR_()
	def RebootNVR():
		print('Setup')
		Viewer.Start(name = 'frank2',password = 'stein')
		GetBackTOHomeScreenPC()
		try:
			Viewer.home10items.Click(threshold=.80)
		except:
			try:
				Sleep(30)
				Viewer.settingswheel123.Click(xoffset=-870,yoffset=-502)
			except:
				ForceCloseViewer()
				Viewer.Start(name = 'frank2',password = 'stein')
				GetBackTOHomeScreenPC()
				Viewer.home10items87658768.Click(threshold=.80)
		Viewer.automationtests345.Click()
		Sleep(3)
		Viewer.restartnvr123.Click()
		Viewer.CloseAndClean()
	def Setup():
		print('Setup')
		try:
			Viewer.Start()
		except:
			try:
				GetBackTOHomeScreenPC()
				Viewer.CloseAndClean()
			except Exception as e:
				print(e)
			Viewer.Start()
		try:
			GetBackTOHomeScreenPC()
		except:
			Sleep(10)
			Viewer.Start()
			Sleep(3)
			GetBackTOHomeScreenPC()
		Viewer.home10items4567567.Click(threshold=.80)
		Viewer.automationtests345.Click()
		Viewer.jumptocameraforautomation.Click()
		Viewer.nvricon.Click()
	def Reset_Timeline():
		try:
			print('Reset_Timeline')
			Viewer.obv21.Click(xoffset=18,yoffset=471)
			Sleep(4)
			Viewer.obv21.Click(xoffset=18, yoffset=471)
			try:
				Viewer.centerpeice.LeftClickDown(threshold = .84)
			except:
				raise ValueError('Could not get back to center')
			Viewer.obv21.Click()
		except Exception as e:
			print(e)
			try:
				Viewer.cameraleft.Click()
				Viewer.camerafullscreen.Wait()
				Viewer.cameranvrwait123.Click()
				Viewer.slideleft.Click()
				Sleep(8)
			except Exception as e:
				print(e)
				print('Viewer might be frozen')
	def Drag_Left_No_Release(Amount,NoReleaseAtEnd = False):
		print('Drag_Left_No_Release')
		Display_Text('Drag LEFT With NO-RELEASE')
		Viewer.obv21.Click()
		for i in range(Amount):
			print('Left -> ',i)
			Pause = random.choice(range(1,5))
			leftX = random.choice(range(-300,0))
			try:
				Viewer.centerpeice.LeftClickDown(threshold = .84)
			except:
				Reset_Timeline()
			Viewer.centerpeice.MoveMouse(x=leftX,y=0)
			Sleep(Pause)
		if NoReleaseAtEnd == False:
			Viewer.obv21.Click()
	def Drag_Right_No_Release(Amount,NoReleaseAtEnd = False):
		print('Drag_Right_No_Release')
		Display_Text('Drag RIGHT With NO-RELEASE')
		Viewer.obv21.Click()
		for i in range(Amount):
			print('RIGHT -> ',i)
			Pause = random.choice(range(1,5))
			rightX = random.choice(range(0,300))
			try:
				Viewer.centerpeice.LeftClickDown(threshold = .84)
			except:
				Reset_Timeline()
			Viewer.centerpeice.MoveMouse(x=rightX,y=0)
			Sleep(Pause)
		if NoReleaseAtEnd == False:
			Viewer.obv21.Click()
		
	def Drag_Both_No_Release(Amount):
		print('Drag_Right_No_Release')
		Display_Text('Drag BOTH-DIRECTIONS With NO-RELEASE') 
		Viewer.obv21.Click()
		for i in range(Amount):
			print('RIGHT -> ',i)
			Pause = random.choice(range(1,5))
			rightX = random.choice(range(0,300))
			try:
				Viewer.centerpeice.LeftClickDown(threshold = .84)
			except:
				Reset_Timeline()
			
			Viewer.centerpeice.MoveMouse(x=rightX,y=0)
			Sleep(Pause)
			print('RIGHT -> ',i)
			Pause = random.choice(range(1,5))
			rightX = random.choice(range(-300,0))
			Viewer.centerpeice.MoveMouse(x=rightX,y=0)
			Sleep(Pause)
		Viewer.obv21.Click()
	def Drag_Left_With_Release(Amount):
		print('Drag_Left_With_Release')
		Display_Text('Drag LEFT With RELEASE')
		for i in range(Amount):
			Xoffset = random.choice(range(-420,0))
			Duration = random.choice(range(1,15))
			try:
				Viewer.centerpeice.DragAndDrop(duration = Duration,threshold = .84,xoffset=Xoffset,yoffset=4,seconds = 2)
			except:
				Reset_Timeline()
				Viewer.centerpeice.DragAndDrop(duration = Duration,threshold = .84,xoffset=Xoffset,yoffset=4,seconds = 2)
				
		
	def Drag_Right_With_Release(Amount):
		print('Drag_Right_With_Release')
		Display_Text('Drag RIGHT With RELEASE')
		for i in range(Amount):
			Xoffset = random.choice(range(0,400))
			Duration = random.choice(range(1,15))
			try:
				Viewer.centerpeice.DragAndDrop(duration = Duration,threshold = .84,xoffset=Xoffset,yoffset=4,seconds = 2)
			except:
				Reset_Timeline()
				Viewer.centerpeice.DragAndDrop(duration = Duration,threshold = .84,xoffset=Xoffset,yoffset=4,seconds = 2)
				
			
			
		
	def Drag_Both_With_Release(Amount):
		print('Drag_Both_With_Release')
		Display_Text('Drag BOTH-DIRECTIONS With RELEASE')
		Viewer.obv21.Click()
		for i in range(Amount):
			Xoffset = random.choice(range(0,400))
			Duration = random.choice(range(1,15))
			try:
				Viewer.centerpeice.DragAndDrop(duration = Duration,threshold = .84,xoffset=Xoffset,yoffset=4,seconds = 2)
			except:
				Reset_Timeline()
				Viewer.centerpeice.DragAndDrop(duration = Duration,threshold = .84,xoffset=Xoffset,yoffset=4,seconds = 2)
			Xoffset = random.choice(range(-400,0))
			Duration = random.choice(range(1,15))
			Viewer.obv21.Click()
			try:
				Viewer.centerpeice.DragAndDrop(duration = Duration,threshold = .84,xoffset=Xoffset,yoffset=4,seconds = 2)
			except:
				Reset_Timeline()
				Viewer.centerpeice.DragAndDrop(duration = Duration,threshold = .84,xoffset=Xoffset,yoffset=4,seconds = 2)
		Viewer.obv21.Click()
	def Get_to_outer_layer():
		try:
			Viewer.timelineminus.Click(times = Amount_of_Layers)
		except:
			Reset_Timeline()
			Viewer.timelineminus.Click(times = Amount_of_Layers)
	def Get_to_inner_layer():
		try:
			Viewer.timelineplus.Click(times = Amount_of_Layers)
		except:
			Reset_Timeline()
			Viewer.timelineplus.Click(times = Amount_of_Layers)
	def Go_up_a_layer():
		try:
			Viewer.timelineminus.Click()
		except:
			Reset_Timeline()
			Viewer.timelineminus.Click()
		
			
	def Go_down_a_layer():
		try:
			Viewer.timelineplus.Click()
		except:
			Reset_Timeline()
			Viewer.timelineplus.Click()
	def Check_if_Frozen():
		try:
			Viewer.cameraleft.Click()
			Viewer.camerafullscreen.Wait()
			Viewer.cameranvrwait123.Click()
			Viewer.slideleft.Click()
			Sleep(8)
			Reset_Timeline()
		except Exception as e:
			print(e)
			raise ValueError('Viewer is Frozen')
	#Check_if_Frozen()
	#ForceCloseViewer()
	#ForceCloseNotepad()		
	Check_if_NVR_IS_Down()
	Setup()
	Viewer.slideleft.Click()
	Get_to_inner_layer()
	for i in range(Amount_of_Layers):
		Drag_Left_No_Release(AMOUNT_PER_TEST)
		#Check_if_NVR_IS_Down()
		Drag_Right_No_Release(AMOUNT_PER_TEST)
		#Check_if_NVR_IS_Down()
		Drag_Both_No_Release(AMOUNT_PER_TEST)
		#try:
		#	Check_if_NVR_IS_Down()
		#except:
		#	Sleep(60)
		#	Check_if_NVR_IS_Down()
		Drag_Left_With_Release(AMOUNT_PER_TEST)
		#Check_if_NVR_IS_Down()
		Drag_Right_With_Release(AMOUNT_PER_TEST)
		#Check_if_NVR_IS_Down()
		Drag_Both_With_Release(AMOUNT_PER_TEST)
		#Check_if_NVR_IS_Down()
		Go_up_a_layer()
		try:
			Check_if_NVR_IS_Down()
		except:
			try:
				Sleep(50)
				Check_if_NVR_IS_Down()
			except:
				Sleep(50)
				try:
					Check_if_NVR_IS_Down()
				except:
					Sleep(50)
					Check_if_NVR_IS_Down()
	Check_if_NVR_IS_Down()
	Check_if_Frozen()
	Viewer.CloseAndClean()
except Exception as e:
	################
	#raise
	###############
	try:
		e = str(e)
		Send_Email(e,e)
		ForceCloseViewer()
		ForceCloseNotepad()
		traceback.print_exc()
		#Sleep(100)
		try:
			RebootNVR()
		except Exception as e:
			print(e)
			ForceCloseViewer()
			Sleep(60)
			RebootNVR()
		Configurator.Start()
		Configurator.RestartHard()
		Sleep(100)
		try:
			Check_if_NVR_IS_Down()
		except:
			raise ValueError('THe NVR Went down then we rebooted it and it didnt come back')
		e = "###got to end### " + e
		#NVRLOG = ''
		#NVRLOG = Get_And_Delete_NVR_Logs()
		#e = '\n\n' + NVRLOG
		raise ValueError(e)
	except Exception as e:
		print(e)
		ForceCloseViewer()
		ForceCloseNotepad()
		raise