from PyQt5 import QtGui,uic,QtCore
from win32api import GetSystemMetrics
import sys
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog
import cv2
import win32api
from imagescripter.core.ssh_manager_for_image_show import SSH_Manager
from time import sleep
from datetime import datetime
import PyQt5
import time
from paths import *

def GetDisplayInformation():
    monitors = win32api.EnumDisplayMonitors()
    for i in monitors:
        print(win32api.GetMonitorInfo(i[0]))

def GetSecondDisplyRect():
    secondMonort = None
    monitors = win32api.EnumDisplayMonitors()
    for i in monitors:
        a = win32api.GetMonitorInfo(i[0])
        if a['Flags'] == 0:
            x,y,w,h = a['Monitor']
            w = x - w
            h = y - h
            w = -w
            h = -h
            print(x,y,w,h)
            return x,y,w,h





class Counter(QtCore.QThread):
    def __init__(self,parent):
        QtCore.QThread.__init__(self)
        self.parent_ui = parent

    def run(self):
        x = 0
        while True:

            try:
                self.parent_ui.label_2.setText(str(x) + ' Seconds')
                x += 1
                time.sleep(1)
            except Exception as e:
                print(e)












class Loading_Interface_Class(QWidget):
    def __init__(self):
        try:
            QWidget.__init__(self)
            ##Loading_Interface_ui = r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\Loading_Interface.ui"
            self.ui = uic.loadUi(Loading_Interface_ui)

            ##loading_eyepng = r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\loading_eye.png"


            Image_Path = loading_eyepng
            Pixmap = QtGui.QPixmap(Image_Path)
            #Pixmap = Pixmap.scaled(Width,Height,QtCore.Qt.KeepAspectRatio)
            #self.ui.label.setMaximumSize((Width/10)*7,16777215)
            self.ui.label.setPixmap(Pixmap)
            #self.ui.label.resize(Pixmap.width(), Pixmap.height())

            Counter_Thread = Counter(self.ui)
            Counter_Thread.start()
            import datetime
            now = datetime.datetime.now()
            date = now.strftime("%Y-%m-%d %H:%M")
            self.ui.label_3.setText(date)





            self.ui.setWindowTitle('Loading_Interface')

            if PyQt5.QtWidgets.QDesktopWidget().screenCount() == 2:
                x, y, w, h = GetSecondDisplyRect()
                self.ui.setGeometry(x, y, w, h)
                self.ui.showMaximized()
            if PyQt5.QtWidgets.QDesktopWidget().screenCount() >= 3:
               raise ValueError("Too many screens Connected, MAX 2")
            else:
                self.ui.showMaximized()







            #self.ui.showMaximized()
            #self.ui.show()
            #self.ui.move(-1000,0)
            #self.ui.showMaximized()
        except Exception as e:
            print(e)


    def initMainGeometry(self):
        self.AmountOfScreens = PyQt5.QtWidgets.QDesktopWidget().screenCount()
        if self.AmountOfScreens <= 1:
            self.screen = PyQt5.QtWidgets.QDesktopWidget().availableGeometry()
            self.width = self.screen.width()
            self.height = self.screen.height()
            self.setGeometry(0, 30, self.width / 4, self.height / 2)
        else:
            x, y, w, h = GetSecondDisplyRect()
            appwidth = w / 4
            appheight = h / 2
            self.setGeometry(x, y + 30, appwidth, appheight)




if __name__ == '__main__':
        app = QApplication(sys.argv)
        screen = app.primaryScreen()
        size = screen.size()
        ex = Loading_Interface_Class()
        sys._excepthook = sys.excepthook

        def exception_hook(exctype, value, traceback):
            print(exctype, value, traceback)
            sys._excepthook(exctype, value, traceback)
            sys.exit(1)
        sys.excepthook = exception_hook
        sys.exit(app.exec_())




