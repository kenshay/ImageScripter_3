import os
import sys
from importlib import reload
import re
#from elan.elan_script import Elan_Script_Class
from imagescripter.core.imagescripter_script import ImageScripter_Script_Class
from imagescripter.core.functions import Start_Image_Show2,Close_Image_Show2
from imagescripter.core.database_manager import Database_Manager_Class
from imagescripter.core.variable_file_getter import Variable_File_Getter
from imagescripter.core.variable_file_getter import Variable_File_Getter
from imagescripter.core.functions import getListOfAllApplications,closeAllApplicationsNotInList,Close_Viewer
from elan import ElanConnectPro
from elan import Sleep
from imagescripter.core.functions import Clear_Directory_Contents
import traceback
import time

def CloseProgamsAfterFail():
    pass
    #print("Trying to close left over programs manually")
    #try:
    #    ElanConnectPro.CloseAndClean()
    #except Exception as e:
    #    print(e)
    #    pass



Script_Folder = Variable_File_Getter.getVariableFromFile('Active_Script_Folder')
#database_location = Variable_File_Getter.getVariableFromFile('Database_Location')

def natural_keys(text):
    return [atoi(c) for c in re.split('(\d+)', text)]

def atoi(text):
    return int(text) if text.isdigit() else text

class Script_Runner_Class():
    def __init__(self,script_folder):
        self.script_folder = script_folder
        self.add_to_be_able_to_be_imported()
        #self.init_database_manager()
    def init_database_manager(self):
        pass
        #print("Initing Database Manger")
        #self.Database_Manager = Database_Manager_Class(database_location)
    def add_to_be_able_to_be_imported(self):
        sys.path.append(self.script_folder)
    def get_list_of_scripts(self):
        os.chdir(self.script_folder)
        List = os.listdir(self.script_folder)
        #print(List)
        List_of_scripts = []
        List.sort(key=natural_keys)
        for i in List:
            if i.endswith('.py'):
                if "IGNORE" not in i:
                    print(i)
                    script_location = os.path.abspath(i)
                    script_object = ImageScripter_Script_Class(script_location)
                    List_of_scripts.append(script_object)
                else:
                    print("IGNORE -> ", i)
        return List_of_scripts
    def init_run_scripts_while_loop(self):

                List_of_opened_apps = getListOfAllApplications()
                List_of_script_objects = self.get_list_of_scripts()
                while True:
                        Clear_Directory_Contents(Variable_File_Getter.getVariableFromFile('Recordings_Location'))
                        Clear_Directory_Contents(Variable_File_Getter.getVariableFromFile('Image_Compare_Location'))
                        Start_Image_Show2()
                        for script_object in List_of_script_objects:
                            Close_Image_Show2()
                            Start_Image_Show2()
                            try:
                                if script_object.has_run_once_already == False:
                                    print("#########################")
                                    print(script_object.Script_Name)
                                    print("#########################")
                                    #Close_Viewer()
                                    script_object.run()
                                else:
                                    print("#########################")
                                    print(script_object.Script_Name)
                                    print("#########################")
                                    #Close_Viewer()
                                    script_object.re_run()
                            except:
                                error_message = traceback.format_exc()
                                print(error_message)
                                #raise
                                closeAllApplicationsNotInList(List_of_opened_apps)
                                #Close_Image_Show2()
                                #Start_Image_Show2()
                                continue

if __name__ == "__main__":
    Script_Runner = Script_Runner_Class(Script_Folder)
    Script_Runner.init_run_scripts_while_loop()






'''  
    while True:
        try:
            Script_Runner = Script_Runner_Class(Script_Folder)
            Script_Runner.init_run_scripts_while_loop()
        except Exception as e:
            print(e)
            print("Exception 55")
            closeAllApplicationsNotInList(List_of_opened_apps)
            CloseProgamsAfterFail()
            Sleep(10)
            #raise
'''
