import os
from imagescripter.core.ssh_manager_for_image_show import SSH_Manager
import sys
from importlib import reload
import re
#from elan.elan_script import Elan_Script_Class
from imagescripter.core.imagescripter_script import ImageScripter_Script_Class
from imagescripter.core.functions import Start_Image_Show2,Close_Image_Show2,Start_Loading_Interface,Close_Loading_Interface
from imagescripter.core.database_manager import Database_Manager_Class
from imagescripter.core.variable_file_getter import Variable_File_Getter
from imagescripter.core.variable_file_getter import Variable_File_Getter
from imagescripter.core.image_manager import Image_Manager
from email.message import Message
import smtplib
from email.message import EmailMessage
from imagescripter.core.functions import *
from elan import ElanConnectPro
from elan import Sleep
from imagescripter.core.functions import Clear_Directory_Contents
import traceback
import time
import smtplib
##Email_Recipients = ["kennyshay123@gmail.com","elantestertools@gmail.com","ben.bickell@nortekcontrol.com","Ken.Shay@nortekcontrol.com"]
Email_Recipients = Email_Recipients_List
#def send_fail_email_alert(scriptname,error):
#    if "ALERT" in scriptname:
#        subject = "Script Fail Alert -> " + scriptname
#        body = error
#        user = "elantestertools@gmail.com"
#        pwd = "corebrands123"
#        FROM = user
#        TO = Email_Recipients if isinstance(Email_Recipients, list) else [Email_Recipients]
#        SUBJECT = subject
#        TEXT = body
#        message = """From: %s\nTo: %s\nSubject: %s\n\n%s
#        """ % (FROM, ", ".join(TO), SUBJECT, TEXT)
#        server = smtplib.SMTP("smtp.gmail.com", 587)
#        server.ehlo()
#        server.starttls()
#        server.login(user, pwd)
#        server.sendmail(FROM, TO, message)
#        server.close()
#        print('successfully sent the mail')
def send_fail_email_alert(scriptname,error):
    if "ALERT" in scriptname:
        for i in range(100):
            try:
                message_string = error
                #Email_Recipients = ["kennyshay123@gmail.com","elantestertools@gmail.com","ben.bickell@nortekcontrol.com","Ken.Shay@nortekcontrol.com"]
                Email_Recipients = Email_Recipients_List
                msg = EmailMessage()
                msg.set_content(message_string)
                msg['Subject'] = scriptname
                msg['From'] = FROM_EMAIL
                msg['To'] = ", ".join(Email_Recipients)
                msg['X-Priority'] = '2'
                s = smtplib.SMTP("smtp.gmail.com", 587)
                s.ehlo()
                s.starttls()
                s.login(FROM_EMAIL,FROM_EMAIL_Pass)
                s.send_message(msg)
                s.close()
                break
            except Exception as e:
                print('Trying to send alert mail')
                print("Times ",i)
                print(e)
                if i >= 99:
                    raise
                Sleep(50)
#send_fail_email_alert(scriptname = 'ALERT',error = 'test')
def CloseProgamsAfterFail():
    pass
    #print("Trying to close left over programs manually")
    #try:
    #    ElanConnectPro.CloseAndClean()
    #except Exception as e:
    #    print(e)
    #    pass
Script_Folder_List = eval(Variable_File_Getter.getVariableFromFile('Active_Script_Folder'))
#database_location = Variable_File_Getter.getVariableFromFile('Database_Location')
def natural_keys(text):
    return [atoi(c) for c in re.split('(\d+)', text)]
def atoi(text):
    return int(text) if text.isdigit() else text
class Script_Runner_Class():
    def __init__(self,Script_Folder_List):
        self.script_folder_list = Script_Folder_List
        self.add_to_be_able_to_be_imported()
        #self.init_database_manager()
    def init_database_manager(self):
        pass
        #print("Initing Database Manger")
        #self.Database_Manager = Database_Manager_Class(database_location)
    def add_to_be_able_to_be_imported(self):
        for folder in self.script_folder_list:
            sys.path.append(folder)
    def get_list_of_scripts(self):
        List_of_scripts = []
        for folder in self.script_folder_list:
            os.chdir(folder)
            List = os.listdir(folder)
            #print(List)
            List.sort(key=natural_keys)
            for i in List:
                if i.endswith('.py'):
                    if "IGNORE" not in i:
                        print(i)
                        script_location = os.path.abspath(i)
                        print('#########')
                        print(script_location)
                        print('#########')
                        script_object = ImageScripter_Script_Class(script_location)
                        List_of_scripts.append(script_object)
                    else:
                        print("IGNORE -> ", i)
        return List_of_scripts
    def init_run_scripts_while_loop(self):
                List_of_opened_apps = getListOfAllApplications()
                MinizeAllApplications()##
                List_of_script_objects = self.get_list_of_scripts()
                Cycle = 0
                while True:
                        Close_Loading_Interface()
                        Start_Loading_Interface()
                        with open(Total_Runs_Script_Runnertxt,'w') as f:
                            f.write(str(Cycle))
                        #Variable_File_Getter.setFileFromVariable('Total_Runs_Script_Runner', str(Cycle))
                        Cycle += 1
                        ##Clear_Directory_Contents(Variable_File_Getter.getVariableFromFile('Recordings_Location'))
                        Clear_Directory_Contents(Recordings_Location)
                        ##Clear_Directory_Contents(Variable_File_Getter.getVariableFromFile('Image_Compare_Location'))
                        Clear_Directory_Contents(Image_Compare_Location)
                        #Start_Image_Show2()
                        for script_object in List_of_script_objects:
                            Close_Image_Show2()
                            Start_Image_Show2()
                            Image_Manager.replace_both_with_black()
                            try:
                                if script_object.has_run_once_already == False:
                                    print("#########################")
                                    print(script_object.Script_Name)
                                    print("#########################")
                                    #Close_Viewer()
                                    script_object.run()
                                else:
                                    print("#########################")
                                    print(script_object.Script_Name)
                                    print("#########################")
                                    #Close_Viewer()
                                    script_object.re_run()
                            except:
                                error_message = traceback.format_exc()
                                print(error_message)
                                #raise
                                closeAllApplicationsNotInList(List_of_opened_apps)
                                #Close_Image_Show2()
                                #Start_Image_Show2()
                                send_fail_email_alert(script_object.Script_Name,str(error_message))
                                continue
if __name__ == "__main__":
    Script_Runner = Script_Runner_Class(Script_Folder_List)
    Script_Runner.init_run_scripts_while_loop()
'''  
    while True:
        try:
            Script_Runner = Script_Runner_Class(Script_Folder)
            Script_Runner.init_run_scripts_while_loop()
        except Exception as e:
            print(e)
            print("Exception 55")
            closeAllApplicationsNotInList(List_of_opened_apps)
            CloseProgamsAfterFail()
            Sleep(10)
            #raise
'''