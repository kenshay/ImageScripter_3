import os, shutil
import pyautogui
import win32gui
import win32con
from time import sleep
import time
from pywinauto import application
import time
from paths import *
def get_data_from_file(x):
    with open(x, 'r') as f:
        data = f.readline()
    ###For Bool
    if data == "True":
        return True
    elif data == "False":
        return False
    else:
        return data

def Press(stringToPress,amount = 1):
    for i in range(amount):
        print("Pressing -> ", stringToPress)
        pyautogui.press(stringToPress)
        print("Pressed -> ", stringToPress)

def Fail(string):
    raise ValueError(string)



def Ping(ip):
    from pythonping import ping
    x = str(ping(ip, verbose=True))
    if 'Request timed out' in x:
        return False
    else:
        return True



def Ping_Notify_If_Fail(ip):
    from pythonping import ping
    x = str(ping(ip, verbose=True))
    if 'Request timed out' in x:
        import ctypes
        Message = ip + ' is not online!'
        ctypes.windll.user32.MessageBoxW(0, Message, "Offline", 1)
        return False
    else:
        return True







def Type(stringToType):
        print("Typing -> ",stringToType)
        pyautogui.typewrite(stringToType)
        print("Typed -> ", stringToType)


def KeyDown(stringToType):
    print("Typing -> ", stringToType)
    pyautogui.keyDown(stringToType)
    print("Typed -> ", stringToType)

def KeyUp(stringToType):
    print("Typing -> ", stringToType)
    pyautogui.keyUp(stringToType)
    print("Typed -> ", stringToType)




def Display_Text(TEXT,x = 10):
    try:
        from pywinauto import application
        app = application.Application()
        app.start('notepad.exe')
        app.UntitledNotepad.maximize()
        time.sleep(1)
        LIST = TEXT.split('\n')
        for i in LIST:
            app.UntitledNotepad.Edit.type_keys(i, with_spaces = True)
            Press('enter')
            Press('enter')
        Press('enter')
        Press('enter')
        Take_Image_Of_Entire_Deskop_And_Save_IT_AS_LAST_TEMPLATE()
        for i in range(x):
            app.UntitledNotepad.Edit.type_keys(str(x) + ' Seconds ', with_spaces=True)
            x = x - 1
            Press('enter')
        time.sleep(x)
        try:
            app.UntitledNotepad.close()
        except:
            pass
        #time.sleep(3)
        app2 = application.Application().connect(title=u'Notepad')
        window = app2.Dialog
        button = window.Button2
        button.click()
    except Exception as e:
        print(e)


def getListOfAllApplications():
    print('Getting a list of all opened applications')
    list = []
    def enumHandler(hwnd, lParam):
        if win32gui.IsWindowVisible(hwnd):
            list.append(hwnd)
            #list.append(win32gui.GetWindowText(hwnd))
    win32gui.EnumWindows(enumHandler, None)
    list = [x for x in list if x]
    return list


def Start_Image_Show():
    pass


def Close_Image_Show():
    pass


def Start_Loading_Interface():
    try:
        #from elan import *
        import subprocess
        import os
        python = Python_Exe_Location
        ##Loading_Interface_script = r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\Loading_Interface.py"
        commmand = python + ' ' + Loading_Interface_script
        subprocess.Popen(commmand, shell=True)
        time.sleep(5)
    except Exception as e:
        try:
            print(e)
            #from elan import *
            import subprocess
            import os
            python = Python_Exe_Location
            ##Loading_Interface_script = r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\Loading_Interface.py"
            commmand = python + ' ' + Loading_Interface_script
            subprocess.Popen(commmand, shell=True)
            time.sleep(5)
        except Exception as e:
            print(e)
            #with open(r"C:\Users\admin\Desktop\log2.txt",'w') as f:
            #   f.write(str(e))

#Start_Loading_Interface()

def Close_Loading_Interface():
    time.sleep(5)
    try:
        from pywinauto.application import Application
        app = Application().connect(title=u'Loading_Interface')
        qtqwindowicon = app[u'Loading_Interface']
        qtqwindowicon.wait('ready')
        qtqwindowicon.close()
        app.Kill()
        app = Application().connect(title=u'Python')
        qtqwindowicon = app[u'Python']
        qtqwindowicon.wait('ready')
        qtqwindowicon.close()
        app.Kill()
    except Exception as e:
        time.sleep(5)
        #with open(r"C:\Users\admin\Desktop\log3.txt", 'w') as f:
            #f.write(str(e))
        print(e)
        try:
            from pywinauto.application import Application
            app = Application().connect(title=u'Loading_Interface')
            qtqwindowicon = app[u'Loading_Interface']
            qtqwindowicon.wait('ready')
            qtqwindowicon.close()
            app.Kill()
            app = Application().connect(title=u'Python')
            qtqwindowicon = app[u'Python']
            qtqwindowicon.wait('ready')
            qtqwindowicon.close()
            app.Kill()
        except Exception as e:
            #with open(r"C:\Users\admin\Desktop\log4.txt",'w') as f:
            #    f.write(str(e))
            print(e)


#Close_Loading_Interface()













def Start_Image_Show2():
    try:
        #from elan import *
        import subprocess
        import os
        python = Python_Exe_Location + ' '
        ##scriptImage_Show = r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\Image_Show.py"
        commmand = python + scriptImage_Show
        subprocess.Popen(commmand, shell=True)
        time.sleep(5)
    except Exception as e:
        try:
            ##log1text = r"C:\Users\admin\Desktop\log1.txt"
            with open(log1text,'w') as f:
                f.write(str(e))
            print(e)
            #from elan import *
            import subprocess
            import os
            python = Python_Exe_Location + ' '
            ##scriptImage_Show = r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\Image_Show.py"
            commmand = python + scriptImage_Show
            subprocess.Popen(commmand, shell=True)
            time.sleep(5)
        except Exception as e:
            print(e)
            #with open(r"C:\Users\admin\Desktop\log2.txt",'w') as f:
            #   f.write(str(e))

def Close_Image_Show2():
    time.sleep(5)
    try:
        from pywinauto.application import Application
        app = Application().connect(title=u'Show Image')
        qtqwindowicon = app[u'Show Image']
        qtqwindowicon.wait('ready')
        qtqwindowicon.close()
        app.Kill()
        app = Application().connect(title=u'Python')
        qtqwindowicon = app[u'Python']
        qtqwindowicon.wait('ready')
        qtqwindowicon.close()
        app.Kill()
    except Exception as e:
        time.sleep(5)
        #with open(r"C:\Users\admin\Desktop\log3.txt", 'w') as f:
            #f.write(str(e))
        print(e)
        try:
            from pywinauto.application import Application
            app = Application().connect(title=u'Show Image')
            qtqwindowicon = app[u'Show Image']
            qtqwindowicon.wait('ready')
            qtqwindowicon.close()
            app.Kill()
            app = Application().connect(title=u'Python')
            qtqwindowicon = app[u'Python']
            qtqwindowicon.wait('ready')
            qtqwindowicon.close()
            app.Kill()
        except Exception as e:
            #with open(r"C:\Users\admin\Desktop\log4.txt",'w') as f:
            #    f.write(str(e))
            print(e)


















def Close_Viewer():
    from imagescripter.core.variable_file_getter import Variable_File_Getter
    from elan import Viewer
    from elan import ELANViewer
    for i in range(2):
        print('Trying to close the Viewer')
        try:
            try:
                print('Trying Close with x')
                Viewer.CloseWithX()
            except Exception as e:
                print(e)

            try:
                print('Trying Close')
                Viewer.Close()
            except Exception as e:
                print(e)

            try:
                print('Trying Close_And_Clean')
                Viewer.CloseAndClean()
            except Exception as e:
                print(e)
            try:
                ELANViewer.Move(0,0)
                ELANViewer.PushButton.Click("OK")
                try:
                    ELANViewer.Close()
                except Exception as e:
                    print(e)
            except Exception as e:
                print(e)

        except Exception as e:
            print(e)
            print('Trying to close viewer -> ',i)




def Take_Image_Of_Entire_Deskop_And_Save_IT_AS_LAST_TEMPLATE():
    import win32gui, win32ui, win32con, win32api
    hwnd = win32gui.GetDesktopWindow()
    print(hwnd)
    # you can use this to capture only a specific window
    # l, t, r, b = win32gui.GetWindowRect(hwnd)
    # w = r - l
    # h = b - t
    # get complete virtual screen including all monitors
    SM_XVIRTUALSCREEN = 76
    SM_YVIRTUALSCREEN = 77
    SM_CXVIRTUALSCREEN = 78
    SM_CYVIRTUALSCREEN = 79
    w = vscreenwidth = win32api.GetSystemMetrics(SM_CXVIRTUALSCREEN)
    h = vscreenheigth = win32api.GetSystemMetrics(SM_CYVIRTUALSCREEN)
    l = vscreenx = win32api.GetSystemMetrics(SM_XVIRTUALSCREEN)
    t = vscreeny = win32api.GetSystemMetrics(SM_YVIRTUALSCREEN)
    r = l + w
    b = t + h
    print(l, t, r, b, ' -> ', w, h)
    hwndDC = win32gui.GetWindowDC(hwnd)
    mfcDC = win32ui.CreateDCFromHandle(hwndDC)
    saveDC = mfcDC.CreateCompatibleDC()
    saveBitMap = win32ui.CreateBitmap()
    saveBitMap.CreateCompatibleBitmap(mfcDC, w, h)
    saveDC.SelectObject(saveBitMap)
    saveDC.BitBlt((0, 0), (w, h), mfcDC, (l, t), win32con.SRCCOPY)
    saveBitMap.SaveBitmapFile(saveDC,Template_Path)
    #from imagescripter.core.image_manager import Image_Manager
    #Image_Manager.replace_both_with_black()
    #Image_Manager.Update_Templet_With_Image_Path(self, image_path):


















def closeAllApplicationsNotInList(Last_List):
    from elan import Viewer
    from elan import Close_Image_Show
    print('Closing All Applications Not In List')
    try:
        Close_Image_Show()
    except:
        pass
    for i in range(10):
        sleep(.10)
        New_List = getListOfAllApplications()
        for handle in New_List:
            if 'Loading_Interface' not in win32gui.GetWindowText(handle):
                if handle not in Last_List:
                    try:
                        win32gui.PostMessage(handle, win32con.WM_CLOSE, 0, 0)
                    except Exception as e:
                        print(e)
                        sleep(1)
                        try:
                            win32gui.PostMessage(handle, win32con.WM_CLOSE, 0, 0)
                        except Exception as e:
                            print(e)
    Close_Viewer()

    print('Finished Closing All Applications Not In List')



def MinizeAllApplications():
    print('Getting a list of all opened applications')
    list = []
    def enumHandler(hwnd, lParam):
        if win32gui.IsWindowVisible(hwnd):
            list.append(hwnd)
            #list.append(win32gui.GetWindowText(hwnd))
    win32gui.EnumWindows(enumHandler, None)
    print(list)
    #list = [x for x in list if x]
    for hwnd in list:
            print('Min-> ',hwnd)
            try:
                win32gui.ShowWindow(hwnd, win32con.SW_MINIMIZE)
            except Exception as e:
                sleep(1)
                try:
                    win32gui.PostMessage(hwnd,win32con.SW_MINIMIZE, 0, 0)
                except Exception as e:
                    print(e)

            #win32gui.PostMessage(handle, win32con.SW_MINIMIZE, 0, 0)


                    #try:
                    #    win32gui.PostMessage(handle,win32con.SW_MINIMIZE, 0, 0)
                    #except Exception as e:
                     #   print(e)
                     #   sleep(1)
                     #   try:
                      #      win32gui.PostMessage(handle,win32con.SW_MINIMIZE, 0, 0)
                      #  except Exception as e:
                       #     print(e)



def RestoreAllApplicationsInList(Last_List):
    from elan import Viewer
    from elan import Close_Image_Show
    print('Restore All Applications In List')
    for i in range(10):
        sleep(.10)
        New_List = getListOfAllApplications()
        for handle in New_List:
            #if 'Show Image' not in win32gui.GetWindowText(handle):
                if handle in Last_List:
                    try:
                        win32gui.PostMessage(handle,win32con.SW_RESTORE, 0, 0)
                    except Exception as e:
                        print(e)
                        sleep(1)
                        try:
                            win32gui.PostMessage(handle,win32con.SW_RESTORE, 0, 0)
                        except Exception as e:
                            print(e)
    print('Restore All Applications In List')


def rename_all_files_in_folder():
    import os
    #os.chdir(r"C:\Users\Automation3\Desktop\Project_Elan\Applications_And_Devices\Configurator")
    # os.rename('guru99.txt','career.guru99.txt')
    for file in os.listdir():
        if file.endswith('.png'):
            old_name = file
            new_name = old_name.split('_')[1]
            print(new_name)
            os.rename(file, new_name)

def Clear_Directory_Contents(Directory_Path):
    print("Clearing Directory Contents -> ", Directory_Path)
    try:
        for the_file in os.listdir(Directory_Path):
            file_path = os.path.join(Directory_Path, the_file)
            try:
                if os.path.isfile(file_path):
                    os.unlink(file_path)
                    print('Removed -> ', file_path)
            except Exception as e:
                print(e)
    except FileNotFoundError:
        os.makedirs(Directory_Path)