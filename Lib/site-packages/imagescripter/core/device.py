import cv2
from PIL import Image
import time
from imagescripter.core.widget_control import *
from imagescripter.core.variable_file_getter import Variable_File_Getter
import os
from shutil import copyfile


class Device_Class():
    def __init__(self,list_of_tags = None,ip_address = None, port = None,user_name = None, password = None):
        ##########################################
        self.PushButton = PushButton_Class(self)
        self.Edit = Edit_Class(self)
        self.ListView = ListView_Class(self)
        self.ListBox = ListBox_Class(self)
        self.ComboBox = ComboBox_Class(self)
        ###############################################
        self.Last_Target_Image_Path = Variable_File_Getter.getVariableFromFile("Last_Target_Image_Location")
        self.Last_Templet_Image_Path = Variable_File_Getter.getVariableFromFile("Last_Templet_Image_Location")



        self._class_name_ = None
        self._self_tags_ = list_of_tags
        self._ipadress_ = ip_address
        try:
            self._port_ = int(port)
        except:
            self._port_ = port
        self._username_ = user_name
        self._password_ = password
        self._class_name_ = self.__class__.__name__
    def _get_image_of_screen_(self):
        pass
    def _get_location_of_image_in_image(self,target_img_path,actual_img_path,threshold):


            img = cv2.imread(target_img_path, 0)
            print('#############')
            print(target_img_path)
            print(self.Last_Target_Image_Path)
            copyfile(target_img_path, self.Last_Target_Image_Path)
            print('#############')
            img2 = img.copy()
            template = cv2.imread(actual_img_path, 0)
            copyfile(actual_img_path, self.Last_Templet_Image_Path)

            w, h = template.shape[::-1]
            img = img2.copy()
            # Apply template Matching
            try:
                res = cv2.matchTemplate(img, template, cv2.TM_CCOEFF_NORMED)
            except cv2.error as e:
                print(e)
                raise ValueError('Cant find Application Window')
            min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)
            Last_Max_Val = max_val
            if max_val >= threshold:
                #print('MaxVal -> ',max_val)
                #print('Threshold Setting -> ',threshold)
                top_left = max_loc
                bottom_right = (top_left[0] + w, top_left[1] + h)
                x, y = top_left
                return x,y
            else:
                print('MaxVal -> ',max_val)
                print('Threshold Setting -> ',threshold)
                return False
    def setIPAdress(self,ip):
        self._ipadress_ = ip
    def setPort(self,port):
        self._port_ = port
    def setUserName(self,username):
        self._username_ = username
    def setPassword(self,password):
        self._password_ = password
    def _click_(self):
        pass
    def _get_an_image_Width_and_height_(self,path_of_image):
        im = Image.open(path_of_image)
        return im.size






if __name__ == "__main__":
    pass
