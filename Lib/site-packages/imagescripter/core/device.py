from paths import *

import cv2
from PIL import Image
import time
from imagescripter.core.widget_control import *
from imagescripter.core.variable_file_getter import Variable_File_Getter
import os
from shutil import copyfile



def log_Current_Thresh_Match(variable):
    try:
        ##Variable_File_Getter.setFileFromVariable('Current_Thresh_Match.txt',variable)
        with open(Current_Thresh_Match,'w') as f:
            f.write(variable)


    except Exception as e:
        print(e)
def log_Current_Image_Cordinates(x1,y1,x2,y2):
    variable = str(x1) + ',' + str(y1) + ',' + str(x2) + ',' + str(y2)
    try:
        #Variable_File_Getter.setFileFromVariable('Current_Image_Cordinates.txt',variable)
        with open(Current_Image_Cordinates,'w') as f:
            f.write(variable)
    except Exception as e:
        print(e)

def log_Current_x_y(x,y):
    variable = str(x) + ',' + str(y)
    try:
        #Variable_File_Getter.setFileFromVariable('last_x_y.txt',variable)
        with open(last_x_y,'w') as f:
            f.write(variable)
    except Exception as e:
        print(e)








class Device_Class():
    classtype = "Default"
    def __init__(self,list_of_tags = None,ip_address = None, port = None,user_name = None, password = None):
        ##########################################
        self.PushButton = PushButton_Class(self)
        self.Edit = Edit_Class(self)
        self.EditBox = Edit_Class(self)
        self.ListView = ListView_Class(self)
        self.ListBox = ListBox_Class(self)
        self.ComboBox = ComboBox_Class(self)
        self.RadioButton = RadioButton_Class(self)
        self.CheckBox = CheckBox_Class(self)
        ###############################################
        ##self.Last_Target_Image_Path = Variable_File_Getter.getVariableFromFile("Last_Target_Image_Location")
        self.Last_Target_Image_Path = Target_Path








        #self.Last_Templet_Image_Path = Variable_File_Getter.getVariableFromFile("Last_Templet_Image_Location")
        self.Last_Templet_Image_Path = Template_Path

        self._class_name_ = None
        self._self_tags_ = list_of_tags
        self._ipadress_ = ip_address
        try:
            self._port_ = int(port)
        except:
            self._port_ = port
        self._username_ = user_name
        self._password_ = password
        self._class_name_ = self.__class__.__name__

    def Get_IP(self):
        if self._ipadress_ != 'None':
            return self._ipadress_
        else:
            return None


    def __getstate__(self):
        return vars(self)

    def __setstate__(self, state):
        vars(self).update(state)

    def __getattr__(self, attr: str):
        raise AttributeError(attr + ' is not an object')




        """Return None for all unknown attributes"""
        if attr.startswith('__') and attr.endswith('__'):
            raise AttributeError
        return None

    def _get_image_of_screen_(self,attempts = 100):
        pass

    def Wait(self):
        pass

    def _get_location_of_image_in_image(self,target_img_path,actual_img_path,threshold):
            ##past_pic_compare_location = Variable_File_Getter.getVariableFromFile('Image_Compare_Location')
            past_pic_compare_location = Image_Compare_Location
            file_name = past_pic_compare_location + '\\' + str(time.time()) + '.png'
            copyfile(target_img_path, file_name)
            file_name = past_pic_compare_location + '\\' + str(time.time()) + '.png'
            copyfile(actual_img_path, file_name)
            #############################################################################################
            img = cv2.imread(target_img_path, 0)
            target_w, target_h = img.shape[::-1]
            #print('#############')
            #print(target_img_path)
            #print(self.Last_Target_Image_Path)
            try:
                copyfile(target_img_path, self.Last_Target_Image_Path)
            except OSError:
                sleep(4)
                copyfile(target_img_path, self.Last_Target_Image_Path)
            #print('#############')
            img2 = img.copy()
            template = cv2.imread(actual_img_path, 0)
            try:
                copyfile(actual_img_path, self.Last_Templet_Image_Path)
            except PermissionError:
                sleep(4)
                copyfile(actual_img_path, self.Last_Templet_Image_Path)
            w, h = template.shape[::-1]
            img = img2.copy()
            # Apply template Matching
            try:
                res = cv2.matchTemplate(img, template, cv2.TM_CCOEFF_NORMED)
            except cv2.error as e:
                print(e)
                raise ValueError('Cant find Application Window')
            min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)
            Last_Max_Val = max_val
            log_Current_Thresh_Match(str(Last_Max_Val))
            if max_val >= threshold:
                #print('MaxVal -> ',max_val)
                #print('Threshold Setting -> ',threshold)
                top_left = max_loc
                bottom_right = (top_left[0] + w, top_left[1] + h)
                x, y = top_left
                ########FOR LOG
                x1 = x
                y1 = y
                x2 = x + target_w
                y2 = y + target_h
                x3 = x + (target_w / 2)
                y3 = y + (target_h / 2)



                log_Current_Image_Cordinates(x1,y1,x2,y2)
                log_Current_x_y(x3, y3)
                print('MaxVal -> ',max_val)
                print('Threshold Setting -> ',threshold)
                return x,y
            else:
                print('MaxVal -> ',max_val)
                print('Threshold Setting -> ',threshold)
                return False
    def setIPAdress(self,ip):
        self._ipadress_ = ip
    def setPort(self,port):
        self._port_ = port
    def setUserName(self,username):
        self._username_ = username
    def setPassword(self,password):
        self._password_ = password
    def _click_(self,x=0,y=0):
        pass

    def ClickXY(self, x, y):
        print('ClickXY -> ',x,y)
        self._click_(x, y)


    def _get_an_image_Width_and_height_(self,path_of_image):
        im = Image.open(path_of_image)
        return im.size






if __name__ == "__main__":
    pass
