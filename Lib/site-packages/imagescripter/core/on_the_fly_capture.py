import sys
from PyQt5.QtWidgets import QApplication, QWidget
from win32api import GetSystemMetrics
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QMessageBox
from PyQt5 import QtGui, uic, Qt
from PyQt5.QtGui import QStandardItemModel,QStandardItem
import traceback
from Script_Writer.variable_file_getter import Variable_File_Getter
import os
from PyQt5.QtGui import QIcon, QPixmap
import base64
import sys
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from Script_Writer.editor import Editor_Class
from Script_Writer.snipping_tool import Snipping_Tool_Class
from win32api import GetSystemMetrics
from tkinter import filedialog
from tkinter import *
import shutil
import PyQt5
from win32api import GetSystemMetrics
from PyQt5 import QtCore
import shutil
Templet_Image_File = r"C:\Settings\Last_Templet_Image.png"








import sys
from PyQt5 import QtWidgets, QtCore, QtGui
import tkinter as tk
from PIL import ImageGrab
import numpy as np
import cv2


class Snipping_Tool_Class(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        root = tk.Tk()
        screen_width = root.winfo_screenwidth()
        screen_height = root.winfo_screenheight()
        self.setGeometry(0, 0, screen_width, screen_height)
        self.setWindowTitle(' ')
        self.begin = QtCore.QPoint()
        self.end = QtCore.QPoint()
        self.setWindowOpacity(0.3)
        QtWidgets.QApplication.setOverrideCursor(
            QtGui.QCursor(QtCore.Qt.CrossCursor)
        )
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        print('Capture the screen...')
        self.show()

    def paintEvent(self, event):
        qp = QtGui.QPainter(self)
        qp.setPen(QtGui.QPen(QtGui.QColor('black'), 3))
        qp.setBrush(QtGui.QColor(128, 128, 255, 128))
        qp.drawRect(QtCore.QRect(self.begin, self.end))

    def mousePressEvent(self, event):
        self.begin = event.pos()
        self.end = self.begin
        self.update()

    def mouseMoveEvent(self, event):
        self.end = event.pos()
        self.update()

    def mouseReleaseEvent(self, event):
        self.close()
        try:
            x1 = min(self.begin.x(), self.end.x())
            y1 = min(self.begin.y(), self.end.y())
            x2 = max(self.begin.x(), self.end.x())
            y2 = max(self.begin.y(), self.end.y())
            img = ImageGrab.grab(bbox=(x1, y1, x2, y2))
            img.save(r"C:\ImageScripter_2\Lib\site-packages\Script_Writer\capture.png")
            img = cv2.cvtColor(np.array(img), cv2.COLOR_BGR2RGB)
            self.start_image_display_window()
            #cv2.imshow('Captured Image', img)
            #cv2.waitKey(0)
            #cv2.destroyAllWindows()
        except Exception as e:
            print(e)
    def start_image_display_window(self):
        print('Start Display Window')
        import subprocess
        #subprocess.Popen(r"C:\ImageScripter_2\python.exe C:\ImageScripter_2\Lib\site-packages\Script_Writer\snipping_tool.py", shell=True)
        print('End')
        #import subprocess
        subprocess.Popen(r"C:\ImageScripter_2\python.exe C:\ImageScripter_2\Lib\site-packages\Script_Writer\image_display_for_save.py",shell=True)
        ##subprocess.Popen(r"C:\ImageScripter_2\python.exe C:\ImageScripter_2\Lib\site-packages\Script_Writer\image_display_for_save.py",shell=True)
        print('End')




class Image_Display_Window_Class(QWidget):

    def __init__(self):
        super().__init__()
        #self.ui = uic.loadUi(r"database_viewer.ui")
        self.ui = uic.loadUi(r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\on_the_fly_capture.py.ui")
        Width = GetSystemMetrics(0)
        Height = GetSystemMetrics(1)
        self.ui.setGeometry(0, 0, Width, Height)
        self.Load_image()
        self.ui.showMaximized()
        load_image_picture_changed_paths = [Templet_Image_File]
        self.ui.pushButton.clicked.connect(self.capture_clicked)
        self.picture_changed_watcher = QtCore.QFileSystemWatcher(load_image_picture_changed_paths)
        self.picture_changed_watcher.fileChanged.connect(self.Load_image)
        ##############################################################################################

    def capture_clicked(self):
        try:
            import subprocess
            subprocess.Popen(r"C:\ImageScripter_2\python.exe C:\ImageScripter_2\Lib\site-packages\imagescripter\core\snipping_tool_for_on_the_fly.py", shell=True)
        except Exception as e:
            print(e)



    def Load_image(self):
        print('Load Image')
        pixmap_ = QPixmap(Templet_Image_File)
        self.ui.label.setPixmap(pixmap_)






if __name__ == '__main__':
    app = QApplication(sys.argv)
    Image_Display_Window = Image_Display_Window_Class()
    #Image_Display_Window.showMaximized()
    sys.exit(app.exec_())