import sqlite3
import shutil
import os
import time
from imagescripter.core.variable_file_getter import Variable_File_Getter
from paths import *

fresh_data_base = fresh_database_location
##


class Database_Manager_Class():
    def __init__(self,database_location):
        self.database_location_file = database_location
        self.database_folder_location = os.path.dirname(self.database_location_file)
        self.database_name = os.path.basename(self.database_location_file)
        self.database_name_without_db = self.database_name.strip('.db')
        if os.path.isfile(self.database_location_file) == False:
            self.Create_New_Database()
        else:
            pass
            #print('Found Database -> ',self.database_location_file)

    def enter_results_into_database(self,Index_Time,Script_Start_Time, Steps, Date, Script_End_Time, Script_Name, Pass, Fail, Skip,Controller_Name,Station_Name, Controller_Build, Error, target_img, templet_img, Error_ID,Fail_Video,Pass_Video,Client,Index_Time_String,Memory_Used_Start,Memory_Used_End,Data):
        import time
        IT_Passed = False
        for i in range(300):
            try:
                print('Entering Results Into Database -> ',self.database_location_file)
                conn = sqlite3.connect(self.database_location_file)
                c = conn.cursor()
                c.execute('''INSERT INTO Reports(Index_Time,Script_Start_Time,Steps, Date,Script_End_Time, Script_Name, Pass, Fail, Skip, Controller_Name, Station_Name, Controller_Build,Error,target_img,templet_img,Error_ID,Fail_Video,Pass_Video,Client,Index_Time_String,Memory_Used_Start,Memory_Used_End,Data)
                                          VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)''',
                          (Index_Time,Script_Start_Time, Steps, Date, Script_End_Time, Script_Name, Pass, Fail, Skip,Controller_Name,Station_Name, Controller_Build, Error, target_img, templet_img, Error_ID, Fail_Video, Pass_Video, Client,Index_Time_String,Memory_Used_Start,Memory_Used_End,Data))
                conn.commit()
                conn.close()
                print('Entered Results Into Database -> ', self.database_location_file)
                IT_Passed = True
                break
            except Exception as e:
                print(e)
                print('Having Trouble Entering Into Database')
                time.sleep(4)
        if IT_Passed == False:
            raise ValueError('Something went wrong entering into Database')


    def enter_test_results_into_database(self):
        print('Entering Results Into Database -> ',self.database_location_file)
        Index_Time = time.time()
        Script_Start_Time = 'Test'
        Steps = 'Test'
        Date = 'Test'
        Script_End_Time = 'Test'
        Script_Name = 'Test'
        Pass = 'Test'
        Fail = 'Test'
        Skip = 'Test'
        Controller_Name = 'Test'
        Station_Name = 'Test'
        Controller_Build = 'Test'
        Error = 'Test'
        target_img = 'Test'
        templet_img = 'Test'
        Index_Time_String = 'Test'
        Memory_Used_Start = 'Test'
        Memory_Used_End = 'Test'
        Data = 'Test'

        Error_ID = 'Test'
        conn = sqlite3.connect(self.database_location_file)
        c = conn.cursor()
        c.execute('''INSERT INTO Reports(Index_Time,Script_Start_Time,Steps, Date,Script_End_Time, Script_Name, Pass, Fail, Skip, Controller_Name, Station_Name, Controller_Build,Error,target_img,templet_img,Error_ID,Index_Time_String,Memory_Used_Start,Memory_Used_End,Data)
                                  VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)''',
                  (Index_Time,Script_Start_Time, Steps, Date, Script_End_Time, Script_Name, Pass, Fail, Skip,Controller_Name,Station_Name, Controller_Build, Error, target_img, templet_img, Error_ID,Index_Time_String,Memory_Used_Start,Memory_Used_End,Data))
        conn.commit()
        conn.close()

    def Create_New_Database(self):
        for i in range(100):
            try:
                print("Creating New Database -> ",self.database_location_file)
                lastcmd = os.getcwd()
                Folder = self.database_folder_location
                print(Folder)
                try:
                    os.chdir(Folder)
                except FileNotFoundError:

                    os.mkdir(Folder)
                    os.chdir(Folder)

                shutil.copy(fresh_data_base,self.database_location_file)
                os.chdir(lastcmd)
                break
            except Exception as e:
                print(e)
                print('Failed to make data base')
                time.sleep(1)
                if i >= 98:
                    e = str(e)
                    raise ValueError(e)
                else:
                    print('trying again -> ' + str(i))

if __name__ == "__main__":
    from imagescripter.core.variable_file_getter import Variable_File_Getter



    #database_location = Variable_File_Getter.getVariableFromFile('Database_Location')
    database_location = Database_Location
    Database_Manager = Database_Manager_Class(database_location)
    Database_Manager.enter_test_results_into_database()