from imagescripter.core.device import Device_Class
import paramiko
from scp import SCPClient
from PIL import Image
import time
screenshot_file = r"C:\ImageScripter_2\TEMP\ITP8_Screenshot.png"



class ITP8_Class(Device_Class):
    connection_started = False

    def createSSHClient(self):
        client = paramiko.SSHClient()
        # client.load_system_host_keys()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(self._ipadress_, self._port_, self._username_, self._password_)
        return client




    def _start_connection_if_not_started_already_(self):
        if self.connection_started == False:
            print('Starting Connection')
            self.client = paramiko.SSHClient()
            #client.load_system_host_keys()
            self.client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            self.client.connect(self._ipadress_, self._port_, self._username_, self._password_)
            self.connection_started = True
        elif self.connection_started == True:
            pass
            #print('Connnection already started, using old connection')


    def _click_(self,y,x):
            Pass = False
            for i in range(10):
                try:
                    self._start_connection_if_not_started_already_()
                    print('New Click')
                    x = str(x)
                    y = str(y)
                    nbytes = 4096
                    command = """#!/bin/sh
                          tp_testing=$(find /sys/ -name tp_testing)
                          echo "0 #X #Y 1" >$tp_testing
                          echo "0 #X #Y 0" >$tp_testing
                          sleep 1
                          """
                    command = command.replace('#X', x)
                    command = command.replace('#Y', y)
                    stdin, stdout, stderr = self.client.exec_command(command)
                    Pass = True
                    break
                except paramiko.ssh_exception.SSHException as e:
                    print(e)
                    pass
            if Pass == False:
                raise ValueError('Having trouble Clicking')








    def reboot(self):
        print('Rebooting ITP')
        Pass = False
        for atime in range(10):
            try:
                self._start_connection_if_not_started_already_()
                print('Reboot ITP')
                nbytes = 4096
                command = """shutdown -r 0"""
                stdin, stdout, stderr = self.client.exec_command(command)
                print(stdout.read())
                print(stderr.read())
                Pass = True
                break
            except Exception as e:
                print(e)
                print("line -> 84")
        if Pass == False:
            raise ValueError('Having trouble Restarting')

    def _get_image_of_screen_(self):
        for atime in range(100):
            try:
                self._start_connection_if_not_started_already_()
                command = 'scrot --thumb 50 /tmp/test.png'
                stdin, stdout, stderr = self.client.exec_command(command)
                print(stdout.read())
                print(stderr.read())
                ########################################PULL IMAGE###########################################
                #ssh = self.createSSHClient()
                scp = SCPClient(self.client.get_transport())
                scp.get('/tmp/test.png', screenshot_file)
                # Flip
                picture = Image.open(screenshot_file)
                picture.rotate(90, expand=True).save(screenshot_file)
                picture.close()
                break
                ########################################################################################
            except Exception as e:
                print(e)
                print("line -> 77")
        return screenshot_file


    def old_get_image_of_screen_new_connection_each_time_(self):
        def createSSHClient():
            client = paramiko.SSHClient()
            #client.load_system_host_keys()
            client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            client.connect(self._ipadress_, self._port_, self._username_, self._password_)
            return client
        for atime in range(100): #Should run only once, unless failure
            try:
                nbytes = 4096
                command = 'scrot --thumb 50 /tmp/test.png'
                client = paramiko.Transport((self._ipadress_, self._port_))
                client.connect(username=self._username_, password=self._password_)
                stdout_data = []
                stderr_data = []
                session = client.open_channel(kind='session')
                session.exec_command(command)
                while True:
                    if session.recv_ready():
                        stdout_data.append(session.recv(nbytes))
                    if session.recv_stderr_ready():
                        stderr_data.append(session.recv_stderr(nbytes))
                    if session.exit_status_ready():
                        break
                #print 'exit status: ', session.recv_exit_status()
                #print ''.join(stdout_data)
                #print ''.join(stderr_data)
                session.close()
                client.close()
                ssh = createSSHClient()
                scp = SCPClient(ssh.get_transport())
                scp.get('/tmp/test.png', screenshot_file)
                # Flip
                picture = Image.open(screenshot_file)
                picture.rotate(90, expand=True).save(screenshot_file)
                picture.close()
                break
            except PermissionError as e:
                print(e)
        return screenshot_file











    def old_click_new_connection_each_time(self,y,x):
        print("_click_")
        x = str(x)
        y = str(y)
        nbytes = 4096
        command = """#!/bin/sh
        tp_testing=$(find /sys/ -name tp_testing)
        echo "0 #X #Y 1" >$tp_testing
        echo "0 #X #Y 0" >$tp_testing
        sleep 1
        """
        command = command.replace('#X', x)
        command = command.replace('#Y', y)
        def createSSHClient():
            client = paramiko.SSHClient()
            #client.load_system_host_keys()
            client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            client.connect(self._ipadress_, self._port_, self._username_, self._password_)
            return client
        Fail = True
        for i in range(10):
            try:
                client = paramiko.Transport((self._ipadress_, self._port_))
                Fail = False
            except paramiko.ssh_exception.SSHException as e:
                print(e)
                time.sleep(1)
            if Fail == True:
                raise ValueError('ssh issue')
        client.connect(username=self._username_, password=self._password_)
        stdout_data = []
        stderr_data = []
        session = client.open_channel(kind='session')
        session.exec_command(command)
        while True:
            if session.recv_ready():
                stdout_data.append(session.recv(nbytes))
            if session.recv_stderr_ready():
                stderr_data.append(session.recv_stderr(nbytes))
            if session.exit_status_ready():
                break
        session.close()
        client.close()
        print("_click_")
    def _click_forever_(self,y,x):
        print("Click Forever")
        print(self._ipadress_, self._port_, self._username_, self._password_)
        x = str(x)
        y = str(y)
        nbytes = 4096
        command = """#!/bin/sh
        tp_testing=$(find /sys/ -name tp_testing)
        echo "0 #X #Y 1" >$tp_testing
        echo "0 #X #Y 0" >$tp_testing
        sleep 1
        """
        command = command.replace('#X', x)
        command = command.replace('#Y', y)

        client = paramiko.SSHClient()
        #client.load_system_host_keys()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(self._ipadress_, self._port_, self._username_, self._password_)

        #client = paramiko.Transport((self._ipadress_, self._port_))
        #client.connect(username=self._username_, password=self._password_)
        while True:
            print("Running")
            stdin, stdout, stderr = client.exec_command(command)
            print(stdout.read())
            print(stderr.read())
            print("Waiting")
            time.sleep(1)



if __name__ == "__main__":
    Interface = ITP8_Class(ip_address = '192.168.0.105', port = 22,user_name = 'root', password = 'nortek')
    #Interface.setIPAdress('192.168.0.117')
    #Interface.setPort(22)
    #Interface.setUserName('root')
    #Interface.setPassword('nortek')
    times = 0

    while True:
        print('Times -> ',times)
        times += 1
        import os
        pic_place = r"C:\ImageScripter_2\TEMP\pics"
        os.chdir(pic_place)
        List = os.listdir(pic_place)
        for picture in sorted(List):
            while True:
                try:
                    print('Times -> ', times)
                    print(picture)
                    actual_img_path = Interface._get_image_of_screen_()
                    target_img_path = picture
                    x,y = Interface._get_location_of_image_in_image(target_img_path,actual_img_path,threshold=.96)
                    Interface._click_(x,y)
                    print('Times -> ', times)
                    break
                except OSError as e:
                    print(e)

    
    
    
    
''' 
    
    Interface = ITP8_Class()
    Interface.setIPAdress('192.168.0.112')
    Interface.setPort(22)
    Interface.setUserName('root')
    Interface.setPassword('nortek')
    import time
    #Demo For BEN
    while True:
        x = 10
        Interface._click_(10,200)#1
        time.sleep(x)
        Interface._click_(1910,200)#9
        time.sleep(x)
        Interface._click_(1,1050)#64
        time.sleep(x)
        Interface._click_(1910, 1050)  #72
        time.sleep(x)











    #Interface._click_(1910,0)#TOP Right
    #Interface._click_(1910,1200)#TOP Right ###########HERE ###
    #Interface._click_(1910,1199)#TOP Right ###########HERE ###
    #Interface._click_(1910,1199)#Bottom RIGHT
    #Interface._click_(1910, 1180)  # Bottom RIGHT
    #Interface._click_(1910, 1199)  # Bottom RIGHT
    #Interface._click_(1910, 1200)  # Bottom RIGHT ######HERE
        #GOOD
    #Interface._click_(10, 200)  # TOP LEFT
    #Interface._click_(1910, 1200)
    #Interface._click_(10, 400)
    #Interface._click_(1910, 1200)

    #Interface._click_(10, 200)  # TOP LEFT
    #Interface._click_(1910, 1199)
    #Interface._click_(10, 400)
    #Interface._click_(10, 10)
    #Interface._click_(1,1)




    #Simple
    #Interface._click_(10, 0)  # TOP LEFT
    #Interface._click_(1910, 1199)  # Bottom RIGHT
    #Interface._click_(1910, 1200)  # Bottom RIGHT ######HERE
    #Interface._click_(1910, 1199)

    #Interface._click_(10,0)#TOP LEFT
    #Interface._click_(1910,0)#TOP Right
    #Interface._click_(1910,1200)#TOP Right ###########HERE
    #4Interface._click_(1910,1199)#Bottom RIGHT
    #Interface._click_(1910, 1180)  # Bottom RIGHT
    #Interface._click_(1910, 1199)  # Bottom RIGHT
    #Interface._click_(1910, 1200)  # Bottom RIGHT ######HERE

'''