import win32gui
import pickle
import time
import pyautogui
from imagescripter.core.variable_file_getter import Variable_File_Getter
from imagescripter.core.database_manager import Database_Manager_Class
database_location = Variable_File_Getter.getVariableFromFile('Database_Location')  # name of the sqlite database file
Database_Manager = Database_Manager_Class(database_location)

class Image_Class():
    def __init__(self,path_of_image,appication_object,threshold):
        self._path_of_image_ = path_of_image
        #self._application_object_ = eval(appication_object)
        pickle_off = open(appication_object, "rb")
        self._application_object_ = pickle.load(pickle_off)
        self._threshold_ = threshold
    def Exists(self,threshold = .96):
        try:
            self._application_object_.Wait()
            result = self._application_object_._get_location_of_image_in_image(self._path_of_image_,self._application_object_._get_image_of_screen_(),threshold)
            if result:
                print('Exists -> ',self._path_of_image_)
                return True
            else:
                print('Doesnt Exists -> ', self._path_of_image_)
                return False
        except TypeError:
            print('Doesnt Exists -> ', self._path_of_image_)
            return False

    def WaitContinue(self,seconds = 100,threshold = .96):
        self._application_object_.Wait()
        print("This is just using 'Wait', needs to be worked on to enter into database")
        try:
            self.Wait(seconds,threshold)
        except:
            Database_Manager.enter_test_results_into_database()
    def Wait(self,seconds = 100,threshold = .96):

        self._application_object_.Wait()

        result = False
        for sec in range(seconds):
            image_of_screen_or_false = self._application_object_._get_image_of_screen_()
            if image_of_screen_or_false != False:
                image_of_screen = image_of_screen_or_false
                result = self._application_object_._get_location_of_image_in_image(self._path_of_image_,image_of_screen, threshold)
                if result != False:
                    break
            print('Wating For ',self._path_of_image_,'Sec->',sec,'Total->',seconds)
            time.sleep(1)
        if result == False:
            raise ValueError("Image not Found->", self._path_of_image_)
        '''

           
            if image_of_screen_or_false != False:
                image_of_screen = image_of_screen_or_false
                result = self._application_object_._get_location_of_image_in_image(self._path_of_image_,image_of_screen,threshold)
                break
            else:
                time.sleep(1)
        #if not result:
        #        print("Failed Looking For -> ", self._path_of_image_)
        #        raise ValueError("Image not Found->",self._path_of_image_)
        '''
    def WaitVanish(self,amount = 100,threshold = .96):
        self._application_object_.Wait()
        print("Waiting For Vanish")
        try:
            for i in range(amount):
                print(amount)
                amount -= 1
                result = self._application_object_._get_location_of_image_in_image(self._path_of_image_,self._application_object_._get_image_of_screen_(),threshold)
                if not result:
                    print("Image Vanished")
                    break
            if result:
                    raise ValueError("Image did not disappear")
        except TypeError as e:
            print(e)
            print("Image Vanished")
    def Click(self,amount = 15,xoffset = 0,yoffset=0,threshold = .96):
        self._application_object_.Wait()
        print('Clicking -> ', self._path_of_image_)
        for i in range(amount):
            print('Amount -> ',i,' / ',amount)
            if self._application_object_._class_name_ != "PC_Class":
                result = self._application_object_._get_location_of_image_in_image(self._path_of_image_,self._application_object_._get_image_of_screen_(),threshold)
                if result:
                    x,y = result
                    SmallWith, SmallHeight = self._application_object_._get_an_image_Width_and_height_(self._path_of_image_)
                    #print('width',SmallWith / 2)
                    #print('height',SmallHeight / 2)
                    x = int(x + SmallWith / 2)
                    y = int(y + SmallHeight / 2)
                    break
            else:
                result = self._application_object_._get_location_of_image_in_image(self._path_of_image_,self._application_object_._get_image_of_screen_(),threshold)
                if result:
                    SmallButtonX, SmallButtonY = result
                    SmallWith, SmallHeight = self._application_object_._get_an_image_Width_and_height_(self._path_of_image_)
                    handle = self._application_object_._get_most_likely_application_window_hande_by_tags_()
                    rect = win32gui.GetWindowRect(handle)
                    LargeAppX = rect[0]
                    LargeAppY = rect[1]
                    x = LargeAppX + SmallButtonX + SmallWith / 2
                    y = LargeAppY + SmallButtonY + SmallHeight / 2
                    break
        if result:
            x = x + xoffset
            y = y + yoffset
            self._application_object_._click_(x, y)
        else:
            #print(self._path_of_image_)
            raise ValueError("Cant find image -> " + self._path_of_image_)
    def RightClick(self,amount = 15,xoffset = 0,yoffset=0,threshold = .96):
        self._application_object_.Wait()
        for i in range(amount):
            if self._application_object_._class_name_ != "PC_Class":
                result = self._application_object_._get_location_of_image_in_image(self._path_of_image_,self._application_object_._get_image_of_screen_(),threshold)
                if result:
                    x,y = result
                    SmallWith, SmallHeight = self._application_object_._get_an_image_Width_and_height_(self._path_of_image_)
                    #print('width',SmallWith / 2)
                    #print('height',SmallHeight / 2)
                    x = int(x + SmallWith / 2)
                    y = int(y + SmallHeight / 2)
                    break
            else:
                result = self._application_object_._get_location_of_image_in_image(self._path_of_image_,self._application_object_._get_image_of_screen_(),threshold)
                if result:
                    SmallButtonX, SmallButtonY = result
                    SmallWith, SmallHeight = self._application_object_._get_an_image_Width_and_height_(self._path_of_image_)
                    handle = self._application_object_._get_most_likely_application_window_hande_by_tags_()
                    rect = win32gui.GetWindowRect(handle)
                    LargeAppX = rect[0]
                    LargeAppY = rect[1]
                    x = LargeAppX + SmallButtonX + SmallWith / 2
                    y = LargeAppY + SmallButtonY + SmallHeight / 2
                    break
        if result:
            x = x + xoffset
            y = y + yoffset
            self._application_object_._right_click_(x, y)
        else:
            #print(self._path_of_image_)
            raise ValueError("Cant find image -> " + self._path_of_image_)
    def RightClickType(self,stringToType,amount = 15,xoffset = 0,yoffset=0,threshold = .96):
        self._application_object_.Wait()
        for i in range(amount):
            if self._application_object_._class_name_ != "PC_Class":
                result = self._application_object_._get_location_of_image_in_image(self._path_of_image_,self._application_object_._get_image_of_screen_(),threshold)
                if result:
                    x,y = result
                    SmallWith, SmallHeight = self._application_object_._get_an_image_Width_and_height_(self._path_of_image_)
                    #print('width',SmallWith / 2)
                    #print('height',SmallHeight / 2)
                    x = int(x + SmallWith / 2)
                    y = int(y + SmallHeight / 2)
                    break
            else:
                result = self._application_object_._get_location_of_image_in_image(self._path_of_image_,self._application_object_._get_image_of_screen_(),threshold)
                if result:
                    SmallButtonX, SmallButtonY = result
                    SmallWith, SmallHeight = self._application_object_._get_an_image_Width_and_height_(self._path_of_image_)
                    handle = self._application_object_._get_most_likely_application_window_hande_by_tags_()
                    rect = win32gui.GetWindowRect(handle)
                    LargeAppX = rect[0]
                    LargeAppY = rect[1]
                    x = LargeAppX + SmallButtonX + SmallWith / 2
                    y = LargeAppY + SmallButtonY + SmallHeight / 2
                    break
        if result:
            x = x + xoffset
            y = y + yoffset
            self._application_object_._right_click_(x, y)
            pyautogui.typewrite(stringToType)
        else:
            #print(self._path_of_image_)
            raise ValueError("Cant find image -> " + self._path_of_image_)
    def ClickFast(self,amount = 15,xoffset = 0,yoffset=0,threshold = .96):
        self._application_object_.Wait()
        print('This has been depreciated, Please use "Click" instead')
        self.Click(amount,xoffset,yoffset,threshold)
    def RealClick(self,amount = 15,xoffset = 0,yoffset=0,threshold = .96):
        self._application_object_.Wait()
        print('This has been depreciated, Please use "Click" instead')
        self.Click(amount,xoffset,yoffset,threshold)
    def RightClickTypeThenPress(self,stringToType,commmand_to_press,waitbetween = 3,amount = 15,xoffset = 0,yoffset=0,threshold = .96):
        self._application_object_.Wait()
        for i in range(amount):
            if self._application_object_._class_name_ != "PC_Class":
                result = self._application_object_._get_location_of_image_in_image(self._path_of_image_,self._application_object_._get_image_of_screen_(),threshold)
                if result:
                    x,y = result
                    SmallWith, SmallHeight = self._application_object_._get_an_image_Width_and_height_(self._path_of_image_)
                    #print('width',SmallWith / 2)
                    #print('height',SmallHeight / 2)
                    x = int(x + SmallWith / 2)
                    y = int(y + SmallHeight / 2)
                    break
            else:
                result = self._application_object_._get_location_of_image_in_image(self._path_of_image_,self._application_object_._get_image_of_screen_(),threshold)
                if result:
                    SmallButtonX, SmallButtonY = result
                    SmallWith, SmallHeight = self._application_object_._get_an_image_Width_and_height_(self._path_of_image_)
                    handle = self._application_object_._get_most_likely_application_window_hande_by_tags_()
                    rect = win32gui.GetWindowRect(handle)
                    LargeAppX = rect[0]
                    LargeAppY = rect[1]
                    x = LargeAppX + SmallButtonX + SmallWith / 2
                    y = LargeAppY + SmallButtonY + SmallHeight / 2
                    break
        if result:
            x = x + xoffset
            y = y + yoffset
            self._application_object_._right_click_(x, y)
            pyautogui.typewrite(stringToType)
            time.sleep(waitbetween)
            pyautogui.press(commmand_to_press)
        else:
            #print(self._path_of_image_)
            raise ValueError("Cant find image -> " + self._path_of_image_)


if __name__ == "__main__":


    #############################################################CLICKING SIMPLE#################
    '''
    #######################ANDROID#########################
    from imagescripter.core.android import Android_Class
    Interface = Android_Class()
    path_of_image = r"C:\ImageScripter_2\TEMP\Android_Pics\1.PNG"
    Interface.media = Image_Class(path_of_image,Interface,.96)
    Interface.media.Click()



    #######################PC########################
    from imagescripter.core.pc import PC_Class
    Interface = PC_Class(['ELAN','Viewer:'])
    path_of_image = r"C:\ImageScripter_2\TEMP\PC_Pics\1.PNG"
    Interface.media = Image_Class(path_of_image,Interface,.96)
    Interface.media.Click()
    '''
    #######################ITP8########################
    from imagescripter.core.itp8 import ITP8_Class
    Interface = ITP8_Class(ip_address='192.168.0.105', port=22, user_name='root', password='nortek')
    path_of_image = r"C:\ImageScripter_2\TEMP\pics\2.PNG"
    Interface.media = Image_Class(path_of_image,Interface,.96)
    Interface.media.Click()
    Interface.media.Click()
    '''
   
    #######################MAC########################
    from imagescripter.core.mac import Mac_Class
    Interface = Mac_Class(ip_address='192.168.0.119', port=22, user_name='Ken', password='100hoods')
    path_of_image = r"C:\ImageScripter_2\TEMP\Mac_Pics\1.PNG"
    Interface.media = Image_Class(path_of_image, Interface, .96)
    Interface.media.Click()
    Interface.media.Click()
    

    #######################LINUX########################
    from imagescripter.core.linux import Linux_Class
    Interface = Linux_Class(ip_address='192.168.0.118', port=22, user_name='god', password='god')
    path_of_image = r"C:\ImageScripter_2\TEMP\Linux_Pics\1.PNG"
    Interface.media = Image_Class(path_of_image, Interface, .96)
    Interface.media.Click()
    Interface.media.Click()
    '''



