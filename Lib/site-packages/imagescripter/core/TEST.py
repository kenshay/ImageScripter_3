import paramiko
from scp import SCPClient
import sys
import cv2
import cv2
import numpy as np
from matplotlib import pyplot as plt
import PIL, os
from PIL import Image
from paths import *
from time import  sleep














class TP8_Class():
    def touch_x_y(self,y,x,max_val):
        x = str(x)
        y = str(y)
        nbytes = 4096
        hostname = '192.168.0.49'
        port = 22
        username = 'root'
        password = 'nortek'
        #command = 'tp_testing=$(find /sys/ -name tp_testing echo "0 81 22 1" >$tp_testing echo "0 81 22 0" >$tp_testing)'
        command = """#!/bin/sh

tp_testing=$(find /sys/ -name tp_testing)

echo "0 #X #Y 1" >$tp_testing
echo "0 #X #Y 0" >$tp_testing
sleep 1

"""
        command = command.replace('#X',x)
        command = command.replace('#Y',y)
        print(command)
        #command2 = 'echo "0 81 22 1" >$tp_testing'
        #command3 = ' echo "0 81 22 0" >$tp_testing'
        def createSSHClient():
            client = paramiko.SSHClient()
            client.load_system_host_keys()
            client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            client.connect(hostname, port, username, password)
            return client
        client = paramiko.Transport((hostname, port))
        client.connect(username=username, password=password)
        stdout_data = []
        stderr_data = []
        session = client.open_channel(kind='session')
        session.exec_command(command)
        #session.exec_command(command2)
        #session.exec_command(command3)
        while True:
            if session.recv_ready():
                stdout_data.append(session.recv(nbytes))
            if session.recv_stderr_ready():
                stderr_data.append(session.recv_stderr(nbytes))
            if session.exit_status_ready():
                break
        session.close()
        client.close()
        print(max_val)
        print("clicked")
        print(x)
        print(y)
        #ssh = createSSHClient()
        #scp = SCPClient(ssh.get_transport())
        #scp.get('/tmp/test.png', destination_File)
        #return destination_File

























    def take_screen_grab(self):
        nbytes = 4096
        hostname = '192.168.0.49'
        port = 22
        username = 'root'
        password = 'nortek'
        command = 'scrot --thumb 50 /tmp/test.png'
        #destination_File = r"C:\Users\Automation3\Desktop\Exported\screenshot.png"

        ##screenshot_export = r"C:\Users\Automation3\Desktop\Exorted\screenshot.png"

        destination_File = screenshot_export
        def createSSHClient():
            client = paramiko.SSHClient()
            client.load_system_host_keys()
            client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            client.connect(hostname, port, username, password)
            return client
        client = paramiko.Transport((hostname, port))
        client.connect(username=username, password=password)
        stdout_data = []
        stderr_data = []
        session = client.open_channel(kind='session')
        session.exec_command(command)
        while True:
            if session.recv_ready():
                stdout_data.append(session.recv(nbytes))
            if session.recv_stderr_ready():
                stderr_data.append(session.recv_stderr(nbytes))
            if session.exit_status_ready():
                break
        #print 'exit status: ', session.recv_exit_status()
        #print ''.join(stdout_data)
        #print ''.join(stderr_data)
        session.close()
        client.close()
        ssh = createSSHClient()
        scp = SCPClient(ssh.get_transport())
        scp.get('/tmp/test.png', destination_File)
        return destination_File



TP8 = TP8_Class()
######################################################################Click ONE
Image_Directory = TP8.take_screen_grab()
#Flip
picture= Image.open(Image_Directory)
picture.rotate(90, expand=True).save(Image_Directory)
picture.close()



###################################

img = cv2.imread(Image_Directory,0)
img2 = img.copy()
template = cv2.imread(r"C:\Users\Automation3\Desktop\Exorted\zoneone.png",0)
w, h = template.shape[::-1]
img = img2.copy()
# Apply template Matching
res = cv2.matchTemplate(img,template,cv2.TM_CCOEFF_NORMED)
min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)
print("Max Val Is ", max_val)
print(max_val)
if max_val < .96:
    raise ValueError('Cant find image')

top_left = max_loc
bottom_right = (top_left[0] + w, top_left[1] + h)
cv2.rectangle(img,top_left, bottom_right, 255, 2)
'''
plt.subplot(121),plt.imshow(res)
plt.subplot(121),plt.imshow(res,cmap = 'gray')
plt.title('Matching Result'), plt.xticks([]), plt.yticks([])
plt.subplot(122),plt.imshow(img,cmap = 'gray')
plt.title('Detected Point'), plt.xticks([]), plt.yticks([])
plt.suptitle(cv2.TM_CCOEFF_NORMED)
plt.show()
'''

x,y = top_left
TP8.touch_x_y(x,y,max_val)
sleep(10)
##########################################################################################TWO
while True:
    try:
        TP8 = TP8_Class()
        ######################################################################Click ONE
        Image_Directory = TP8.take_screen_grab()
        #Flip
        picture= Image.open(Image_Directory)
        picture.rotate(90, expand=True).save(Image_Directory)
        picture.close()
        break
    except IOError as e:
        print(e)
        pass
img = cv2.imread(Image_Directory,0)
img2 = img.copy()
template = cv2.imread(r"C:\Users\Automation3\Desktop\Exorted\shudder.png",0)
w, h = template.shape[::-1]
img = img2.copy()
# Apply template Matching
res = cv2.matchTemplate(img,template,cv2.TM_CCOEFF_NORMED)
min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)
print("Max Val Is ",max_val)
print(max_val)
if max_val < .96:
    raise ValueError('Cant find image')
top_left = max_loc
bottom_right = (top_left[0] + w, top_left[1] + h)
cv2.rectangle(img,top_left, bottom_right, 255, 2)
'''
plt.subplot(121),plt.imshow(res)
plt.subplot(121),plt.imshow(res,cmap = 'gray')
plt.title('Matching Result'), plt.xticks([]), plt.yticks([])
plt.subplot(122),plt.imshow(img,cmap = 'gray')
plt.title('Detected Point'), plt.xticks([]), plt.yticks([])
plt.suptitle(cv2.TM_CCOEFF_NORMED)
plt.show()
'''
x,y = top_left
TP8.touch_x_y(x,y,max_val)
sleep(10)
print(max_val)