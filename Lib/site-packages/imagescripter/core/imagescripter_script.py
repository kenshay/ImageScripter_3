from importlib import reload
import traceback
from imagescripter.core.screen_recorder import Screen_Recorder_Class
from Database_Manager.Dictionary_Database_Manager import Dictionary_Database_Manager_Class
import time
import shutil
from paths import *
from threading import Thread
import os
from paths import Controler_Build_Location
import paramiko
import sys
from imagescripter.core.error_window import Error_Window_Self_Destruct_Class
from imagescripter.core.start_end_winow import Start_End_Window_Self_Destruct_Class
from imagescripter.core.variable_file_getter import Variable_File_Getter
from imagescripter.core.database_manager import Database_Manager_Class
#from imagescripter.core.ssh_manager_for_image_show import SSH_Manager_Class

if The_NAME == 'elan':
    string = 'from $$$.ssh_manager import SSH_Manager_Class'
    string = string = string.replace('$$$',The_NAME)
    exec(string)



import datetime
import base64
from paths import *
from paths import Controler_Build_Location

##database_location = Variable_File_Getter.getVariableFromFile('Database_Location')
database_location = Database_Location


def Send_Message_T0_Dashboard(message):
    try:
        import socket
        HOST = '172.16.42.56'
        #HOST = '127.0.0.1'
        PORT = 65432
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect((HOST, PORT))
            Byte_Message = str.encode(message)
            s.sendall(Byte_Message)
            data = s.recv(1024)
        print('Received', repr(data))
    except Exception as e:
        try:
            e = str(e)
            import socket
            HOST = '172.16.42.56'
            # HOST = '127.0.0.1'
            PORT = 65432
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.connect((HOST, PORT))
                Byte_Message = str.encode(e)
                s.sendall(Byte_Message)
                data = s.recv(1024)
            print('Received', repr(data))
        except Exception as e:
            print(e)








class ImageScripter_Script_Class():
    def __init__(self,script_location):
        self.script_location = script_location
        #Add to sys.path or wont run on import
        if os.path.dirname(os.path.dirname(self.script_location)) not in sys.path:
            sys.path.append(os.path.dirname(self.script_location))
        self.file_name = os.path.basename(self.script_location)
        #print('Script File Name is -> ',self.file_name)
        self.file_name_without_py = self.file_name.replace('.py', '')
        self.Script_Name = self.file_name_without_py
        #print('Script Name is -> ',self.file_name_without_py)
        self.Screen_Recorder = Screen_Recorder_Class()
        self.DataBase_Manager = Database_Manager_Class(database_location)
        self.Dictionary_Database_Manager = Dictionary_Database_Manager_Class(Dictionary_Database_Location)
        self.has_run_once_already = False
        self.percent_of_memory_In_Use_end = 0
        self.percent_of_memory_In_Use_start = 0
        if The_NAME == 'elan':
            self.Controller_Name = Variable_File_Getter.getVariableFromFile('Controller_Name')
        else:
            self.Controller_Name = 'None'
        self.Station_Name = Variable_File_Getter.getVariableFromFile('Station_Name')

        if The_NAME == 'elan':
            Controller_IP = Variable_File_Getter.getVariableFromFile('Controller_IP')
        else:
            Controller_IP = 'None'
            ##Controller_Port = Variable_File_Getter.getVariableFromFile('Elan_Controller_Port')
        Controller_Port = Elan_Controller_Port
        Controller_Port = int(Controller_Port)
        Controller_UserName = Elan_Controller_User_Name
        ##Controller_UserName = Variable_File_Getter.getVariableFromFile('Elan_Controller_User_Name')
        ##Controller_Password = Variable_File_Getter.getVariableFromFile('Elan_Controller_Password')
        Controller_Password = Elan_Controller_Password

        if The_NAME == 'elan':
            self.SSH_Manager = SSH_Manager_Class(ipaddress=Controller_IP, port=Controller_Port, username=Controller_UserName, password=Controller_Password)
        else:
            self.SSH_Manager = False


    def get_script_text(self):
        #print('Getting Script Text From -> ',self.script_location)
        with open(self.script_location,'r') as f:
            script_text = f.read()
        return script_text



    def get_commands(self):
        with open(self.script_location) as f:
            commands = f.read()
        return commands

    def get_String_From_Image(self,path_of_image):
        with open(path_of_image, "rb") as imageFile:
            img_string = base64.b64encode(imageFile.read())
            #print(img_string)
            return img_string

    def get_Image_From_String(self,string,path_of_image):
        imgdata = base64.b64decode(string)
        with open(path_of_image, 'wb') as f:
            f.write(imgdata)


    def get_and_enter_database_information_about_script(self):
        Client = 'Default'
        Index_Time = time.time()
        Index_Time_String = str(Index_Time)
        Script_Start_Time = self.Script_Start_time
        Steps = self.get_script_text()
        Date = self.Current_Date
        Script_End_Time = self.Script_End_time
        Script_Name = self.Script_Name
        Pass = self.did_Script_pass
        Fail = self.did_Script_fail
        Skip = 'N/A'
        #Controller_Name = Variable_File_Getter.getVariableFromFile('Controller_Name')
        #Station_Name = Variable_File_Getter.getVariableFromFile('Station_Name')
        Controller_Build = self.Controller_Build
        #Controller_Build = SSH_Manager.get_Build()

        Error = self.Last_Exception

        if Fail == 'True':
            Fail_Video = self.Pass_Or_Fail_Video
            Pass_Video = 'None'
            ##Last_Target_Image_Path = Variable_File_Getter.getVariableFromFile("Last_Target_Image_Location")
            Last_Target_Image_Path = Target_Path
            #Last_Templet_Image_Path = Variable_File_Getter.getVariableFromFile("Last_Templet_Image_Location")
            Last_Templet_Image_Path = Template_Path
            target_img = self.get_String_From_Image(Last_Target_Image_Path)
            templet_img = self.get_String_From_Image(Last_Templet_Image_Path)
        elif Pass == 'True':
            Fail_Video = 'None'
            Pass_Video = self.Pass_Or_Fail_Video
            target_img = 'None'
            templet_img = 'None'
        Memory_Used_Start = self.percent_of_memory_In_Use_start
        Memory_Used_End = self.percent_of_memory_In_Use_end
        Data = ''
        Error_ID = ''.join([i for i in Error if not i.isdigit()])
        self.DataBase_Manager.enter_results_into_database(Index_Time,Script_Start_Time, Steps, Date, Script_End_Time, Script_Name, Pass, Fail, Skip,self.Controller_Name,self.Station_Name, Controller_Build, Error, target_img, templet_img, Error_ID,Fail_Video,Pass_Video,Client,Index_Time_String,Memory_Used_Start,Memory_Used_End,Data)


        New_Target_Path = 'None'
        New_Template_Path = 'None'

        if Fail == 'True':
            try:
                New_Target_Path = Images_For_Database_Location + '\\Target__' + Index_Time_String + '.png'
                shutil.copy(Last_Target_Image_Path,New_Target_Path)
            except Exception as e:
                New_Target_Path = 'Error'
                traceback.print_exc()
            try:
                New_Template_Path = Images_For_Database_Location + '\\Temp__' + Index_Time_String + '.png'
                shutil.copy(Last_Templet_Image_Path,New_Template_Path)
            except Exception as e:
                New_Template_Path = 'Error'
                traceback.print_exc()
        try:
            aList = [('index_time',Index_Time),
                    ('script_start_time', Script_Start_Time),
                    ('steps', Steps),
                    ('date', Date),
                    ('script_end_time', Script_End_Time),
                    ('script_name', Script_Name),
                    ('pass', Pass),
                    ('fail', Fail),
                    ('skip', Skip),
                    ('controller_name', self.Controller_Name),
                    ('station_name', self.Station_Name),
                    ('controller_build', Controller_Build),
                    ('error', Error),
                    ('target_img',New_Target_Path),
                    ('templet_img',New_Template_Path),
                    ('error_id', Error_ID),
                    ('fail_video', Fail_Video),
                    ('pass_video', Pass_Video),
                    ('client', Client),
                    ('index_time_string', Index_Time_String),
                    ('memory_used_start',Memory_Used_Start),
                    ('memory_used_end', Memory_Used_End),
                    ('data', Data)]

            Dictionary_Entry = dict(aList)
            self.Dictionary_Database_Manager.enter_results_into_database(Dictionary_Entry)
        except Exception as e:
            traceback.print_exc()




    def update_controller_if_needed(self):
        try:
            import os
            from imagescripter.core.variable_file_getter import Variable_File_Getter
            try:
                Last_Controller_Build = Variable_File_Getter.getVariableFromFile('Last_Controler_Build_File_Name')
            except:
                Variable_File_Getter.setFileFromVariable('Last_Controler_Build_File_Name','000')
                Last_Controller_Build = Variable_File_Getter.getVariableFromFile('Last_Controler_Build_File_Name')
            ##Controler_Build_Location = Variable_File_Getter.getVariableFromFile('Controler_Build_Location')
            from paths import Controler_Build_Location
            Controler_Build_Location = Controler_Build_Location
            last_dir = os.getcwd()
            Current_Build = os.listdir(Controler_Build_Location)[0]
            if Current_Build != Last_Controller_Build:
                #print('Current Build is ',Current_Build,' Last Build is ',Last_Controller_Build)
                #print("Updating Because Builds Are Different")
                Command = 'from $$$ import Configurator'
                Command = Command.replace('$$$',The_NAME)
                #print('#############')
                #print(Command)
                from elan import Configurator
                exec(Command)
                Configurator.Update()
                Variable_File_Getter.setFileFromVariable('Last_Controler_Build_File_Name', Current_Build)
            else:
                print('Current Build is ',Current_Build,' Last Build is ',Last_Controller_Build)
                print("NOT Updating Because Builds Are NOT Different")
        except Exception as e:
            raise




    def set_Script_Start_time(self):
        now = datetime.datetime.now()
        hour_min = str(now.hour) + ':' + str(now.minute) + ':' + str(now.second)
        #print('Set Scripts Start Time -> ',hour_min)
        #16:49:13
        self.Script_Start_time = hour_min


    def log_current_script_to_settings(self):
        with open(Current_Running_Script, 'w') as f:
            f.write(self.Script_Name)
        ##Variable_File_Getter.setFileFromVariable('Current_Running_Script',self.Script_Name)




    def set_Script_End_time(self):
        now = datetime.datetime.now()
        self.Current_Date = str(now.month) + '/' + str(now.day) + '/' + str(now.year)
        # 2015 5 6 8 53 40
        hour_min = str(now.hour) + ':' + str(now.minute) + ':' + str(now.second)
        #print('Set Scripts Start Time -> ',hour_min)
        #16:49:13
        self.Script_End_time = hour_min





    def run_simple(self):
        try:
            #print("Running Script -> ", self.Script_Name)
            self.Screen_Recorder.record(self.file_name_without_py)
            module = __import__(self.file_name_without_py)
            self.Pass_Or_Fail_Video = self.Screen_Recorder.stop_simple()
        except Exception as e:
            self.Pass_Or_Fail_Video = self.Screen_Recorder.stop_simple()
            raise





















    def run(self):
        Encoded_Traceback = ' '
        self.has_run_once_already = True
        print('#####################################')
        print("Running Script -> ",self.Script_Name)
        ####################################
        Send_Message_T0_Dashboard("Running Script -> " + self.Script_Name)
        #####################
        print('#####################################')
        self.Fail_Video = 'None'
        self.Last_Exception = 'None'
        self.set_Script_Start_time()
        self.Screen_Recorder.record(self.file_name_without_py)
        try:
            if The_NAME == 'elan':
                self.percent_of_memory_In_Use_start = self.SSH_Manager.get_percent_of_memory_In_Use2()
            else:
                self.percent_of_memory_In_Use_start = '00'

            self.log_current_script_to_settings()
            Start_Window = Start_End_Window_Self_Destruct_Class()
            if The_NAME == 'elan':
                self.update_controller_if_needed()
            module = __import__(self.file_name_without_py)
            if The_NAME == 'elan':
                self.percent_of_memory_In_Use_end = self.SSH_Manager.get_percent_of_memory_In_Use2()
            else:
                self.percent_of_memory_In_Use_end = '00'
            self.has_run_once_already == True
            time.sleep(10)
            End_Window = Start_End_Window_Self_Destruct_Class()
            self.set_Script_End_time()
            self.PassOrFail = 'Pass'
            if The_NAME == 'elan':
                try:
                    self.Controller_Build = self.SSH_Manager.get_Build()
                except:
                    print("Failed to get build, waiting 30 seconds then trying again.")
                    time.sleep(30)
                    self.Controller_Build = self.SSH_Manager.get_Build()
            else:
                with open(VersionBuild, 'r') as f:
                    self.Controller_Build = f.read()
            self.Pass_Or_Fail_Video = self.Screen_Recorder.stop(Station_Name=self.Station_Name, Script_Name=self.Script_Name, Build = self.Controller_Build,
                                      PassOrFail=self.PassOrFail, Error=Encoded_Traceback)
            self.did_Script_fail = 'False'
            self.did_Script_pass = 'True'
            self.get_and_enter_database_information_about_script()
        except Exception as e:
            Send_Message_T0_Dashboard("Script Failed -> " + self.Script_Name)
            Send_Message_T0_Dashboard(str(e))
            if The_NAME == 'elan':
                self.percent_of_memory_In_Use_end = self.SSH_Manager.get_percent_of_memory_In_Use2()
            else:
                self.percent_of_memory_In_Use_end = '00000'
            self.Last_Exception = traceback.format_exc()
            #########################
            Encoded_Traceback = self.Last_Exception.replace(" ", "")
            Encoded_Traceback = ''.join(e for e in Encoded_Traceback if e.isalnum())
            ##Last_Target_Image_Path = Variable_File_Getter.getVariableFromFile("Last_Target_Image_Location")
            Last_Target_Image_Path = Target_Path
            #################################################################################
            Size = str(os.path.getsize(Last_Target_Image_Path))
            Encoded_Traceback += Size
            #print('Encoded_Traceback -> ', Encoded_Traceback)
            ################################################################################FIX###########
            #print("Exception 29")
            #time.sleep(5)
            Error_Window = Error_Window_Self_Destruct_Class(str(e))
            self.set_Script_End_time()
            self.PassOrFail = 'Fail'
            self.Controller_Build = self.SSH_Manager.get_Build()
            self.Pass_Or_Fail_Video = self.Screen_Recorder.stop(Station_Name=self.Station_Name, Script_Name=self.Script_Name,Build = self.Controller_Build, PassOrFail=self.PassOrFail,Error=Encoded_Traceback)
            self.did_Script_fail = 'True'
            self.did_Script_pass = 'False'
            self.get_and_enter_database_information_about_script()
            raise



    def re_run(self):

        Encoded_Traceback = None
        #print('#####################################')
        #print("RE-Running Script -> ",self.Script_Name)
        #print('#####################################')
        self.Fail_Video = 'None'
        self.Last_Exception = 'None'
        self.set_Script_Start_time()
        self.Screen_Recorder.record(self.file_name_without_py)
        try:
            if The_NAME == 'elan':
                self.percent_of_memory_In_Use_start = self.SSH_Manager.get_percent_of_memory_In_Use2()
            else:
                self.percent_of_memory_In_Use_start = '00'
            self.log_current_script_to_settings()
            Start_Window = Start_End_Window_Self_Destruct_Class()
            if The_NAME == 'elan':
                self.update_controller_if_needed()
            module = __import__(self.file_name_without_py)
            reload(module)
            if The_NAME == 'elan':
                self.percent_of_memory_In_Use_end = self.SSH_Manager.get_percent_of_memory_In_Use2()
            else:
                self.percent_of_memory_In_Use_end = '00'
            time.sleep(10)
            End_Window = Start_End_Window_Self_Destruct_Class()
            self.set_Script_End_time()
            self.PassOrFail = 'Pass'
            if The_NAME == 'elan':
                self.Controller_Build = self.SSH_Manager.get_Build()
            else:
                with open(VersionBuild, 'r') as f:
                    self.Controller_Build = f.read()
            self.Pass_Or_Fail_Video = self.Screen_Recorder.stop(Station_Name=self.Station_Name, Script_Name=self.Script_Name, Build = self.Controller_Build,
                                      PassOrFail=self.PassOrFail, Error=Encoded_Traceback)
            self.did_Script_fail = 'False'
            self.did_Script_pass = 'True'
            self.get_and_enter_database_information_about_script()
        except Exception as e:
            if The_NAME == 'elan':
                self.percent_of_memory_In_Use_end = self.SSH_Manager.get_percent_of_memory_In_Use2()
            else:
                self.percent_of_memory_In_Use_end = '00'
            self.Last_Exception = traceback.format_exc()
            #########################
            Encoded_Traceback = self.Last_Exception.replace(" ", "")
            Encoded_Traceback = ''.join(e for e in Encoded_Traceback if e.isalnum())
            ##Last_Target_Image_Path = Variable_File_Getter.getVariableFromFile("Last_Target_Image_Location")
            Last_Target_Image_Path = Target_Path
            Size = str(os.path.getsize(Last_Target_Image_Path))
            Encoded_Traceback += Size
            #print('Encoded_Traceback -> ', Encoded_Traceback)
            ########################
            Error_Window = Error_Window_Self_Destruct_Class(str(e))
            self.set_Script_End_time()
            self.PassOrFail = 'Fail'
            if The_NAME == 'elan':
                self.Controller_Build = self.SSH_Manager.get_Build()
            else:
                with open(VersionBuild, 'r') as f:
                    self.Controller_Build = f.read()
            self.Pass_Or_Fail_Video = self.Screen_Recorder.stop(Station_Name = self.Station_Name,Script_Name = self.Script_Name,Build = self.Controller_Build,PassOrFail = self.PassOrFail,Error = Encoded_Traceback)
            self.did_Script_fail = 'True'
            self.did_Script_pass = 'False'
            self.get_and_enter_database_information_about_script()
            raise







            #os.system()
        #try:
        #    exec(self.get_commands())
        #except Exception as e:
        #    print(e)
        #    raise
        #    #return Exception


if __name__ == "__main__":
    ##############################Do not change, Scrip Runner Uses This##################################################
    with open(Active_Script_For_Script_Runner,'r') as f:
        pythonFile = f.read()
    script = ImageScripter_Script_Class(pythonFile)
    script.run()
    ####################################################################################################################
