from PyQt5 import QtGui,uic,QtCore
from win32api import GetSystemMetrics
import sys
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog
import cv2
import win32api
from imagescripter.core.ssh_manager_for_image_show import SSH_Manager
from time import sleep
from datetime import datetime
import PyQt5


Templet_Image_File = r"C:\Settings\Last_Templet_Image.png"
Active_output_File = "C:\Settings\Active_Script_Ouput.txt"
Templet_Image_File_With_Red_Box = r"C:\Settings\Last_Templet_Image_With_Red_Box.png"
Target_Image_File = r"C:\Settings\Last_Target_Image.png"
Show_Image_Ui_Location = r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\show_image.ui"
Image_Cordinates_location = r"C:\Settings\Current_Image_Cordinates.txt"
Current_Running_Script_txt = r"C:\Settings\Current_Running_Script.txt"
Current_Action_txt = r"C:\Settings\Current_Action.txt"
Current_Thresh_Match_txt = r"C:\Settings\Current_Thresh_Match.txt"

MAX_MEMORY_USE_FOR_RED = 16





def GetDisplayInformation():
    monitors = win32api.EnumDisplayMonitors()
    for i in monitors:
        print(win32api.GetMonitorInfo(i[0]))

def GetSecondDisplyRect():
    secondMonort = None
    monitors = win32api.EnumDisplayMonitors()
    for i in monitors:
        a = win32api.GetMonitorInfo(i[0])
        if a['Flags'] == 0:
            x,y,w,h = a['Monitor']
            w = x - w
            h = y - h
            w = -w
            h = -h
            print(x,y,w,h)
            return x,y,w,h




class Update_Controller_Info_And_Cycle(QtCore.QThread):
    def __init__(self,parent):
        QtCore.QThread.__init__(self)
        self.parent_ui = parent
        self.Last_Number = 0
    def run(self):
        while True:
            try:
                with open(r"C:\Settings\Controller_Name.txt",'r') as f:
                    controller_name = f.read()
                    self.parent_ui.label_13.setText(controller_name)
            except Exception as e:
                print(e)
            try:
                with open(r"C:\Settings\Controller_IP.txt",'r') as f:
                    controller_ip = f.read()
                    self.parent_ui.label_14.setText(controller_ip)
            except Exception as e:
                print(e)
            try:
                with open(r"C:\Settings\Total_Runs_Script_Runner.txt", 'r') as f:
                    scritp_runner_cycles = f.read()
                    self.parent_ui.label_15.setText('Total Cycles = ' + scritp_runner_cycles)
            except Exception as e:
                print(e)
            sleep(10)







class Get_Controller_Info_Thread_Memory_Use(QtCore.QThread):
    def __init__(self,parent):
        QtCore.QThread.__init__(self)
        self.parent_ui = parent
        self.Last_Number = 0
    def run(self):
        while True:
            try:
                Did_it_get_new_info = False
                try:
                    self.Memory_In_Use = SSH_Manager.get_percent_of_memory_In_Use()
                    self.Last_Number = self.Memory_In_Use
                    Did_it_get_new_info = True
                except:
                    Did_it_get_new_info = False
                    self.Memory_In_Use = self.Last_Number
                if Did_it_get_new_info == True:
                    self.parent_ui.label_10.setText(str(self.Memory_In_Use) + ' %')
                else:
                    self.parent_ui.label_10.setText(str(self.Memory_In_Use) + ' %')
            except Exception as e:
                print(e)


class Get_Controller_Info_Thread_Memory_Free(QtCore.QThread):
    def __init__(self,parent):
        QtCore.QThread.__init__(self)
        self.parent_ui = parent
        self.Last_Number = 0
    def run(self):
        while True:
            try:
                Did_it_get_new_info = False
                try:
                    self.Memory_In_Use = SSH_Manager.get_percent_of_memory_free()
                    self.Last_Number = self.Memory_In_Use
                    Did_it_get_new_info = True
                except:
                    Did_it_get_new_info = False
                    self.Memory_In_Use = self.Last_Number
                if Did_it_get_new_info == True:
                    self.parent_ui.label_7.setText(str(self.Memory_In_Use) + ' %')
                else:
                    self.parent_ui.label_7.setText(str(self.Memory_In_Use) + ' %')
            except Exception as e:
                print(e)



class Get_Controller_Info_Thread_CPU_USE(QtCore.QThread):
    def __init__(self,parent):
        QtCore.QThread.__init__(self)
        self.parent_ui = parent
        self.Last_Number = 0
    def run(self):
        while True:
            try:
                Did_it_get_new_info = False
                try:
                    self.Memory_In_Use = SSH_Manager.get_percent_of_cpu_usage_used()
                    self.Last_Number = self.Memory_In_Use
                    Did_it_get_new_info = True
                except:
                    Did_it_get_new_info = False
                    self.Memory_In_Use = self.Last_Number
                if Did_it_get_new_info == True:
                    self.parent_ui.label_12.setText(str(self.Memory_In_Use) + ' %')
                else:
                    self.parent_ui.label_12.setText(str(self.Memory_In_Use) + ' %')
            except Exception as e:
                print(e)





class Image_Show_Class(QWidget):
    def __init__(self):
        try:
            QWidget.__init__(self)

            ################################################################
            load_image_picture_changed_paths = [Templet_Image_File]
            self.picture_changed_watcher = QtCore.QFileSystemWatcher(load_image_picture_changed_paths)
            self.picture_changed_watcher.fileChanged.connect(self.Load_image_without_red)
            ##############################################################################################

            ################################################################
            active_output_paths = [Active_output_File]
            self.active_output_watcher = QtCore.QFileSystemWatcher(active_output_paths)
            self.active_output_watcher.fileChanged.connect(self.active_output_changed)
            ##############################################################################################









            ################################################################
            RED_load_image_picture_changed_paths = [Image_Cordinates_location]
            self.RED_picture_changed_watcher = QtCore.QFileSystemWatcher(RED_load_image_picture_changed_paths)
            self.RED_picture_changed_watcher.fileChanged.connect(self.draw_red_box)
            ##############################################################################################
            self.ui = uic.loadUi(Show_Image_Ui_Location)

            #Update_Controller_Info_And_Cycle
            Update_Controller_Info_And_Cycle_Thread = Update_Controller_Info_And_Cycle(self.ui)
            Update_Controller_Info_And_Cycle_Thread.start()


            Controller_Info_Thread1 = Get_Controller_Info_Thread_Memory_Use(self.ui)
            Controller_Info_Thread1.start()

            Controller_Info_Thread2 = Get_Controller_Info_Thread_Memory_Free(self.ui)
            Controller_Info_Thread2.start()

            Controller_Info_Thread3 = Get_Controller_Info_Thread_CPU_USE(self.ui)
            Controller_Info_Thread3.start()

            self.ui.setWindowTitle('Show Image')
            self.Load_image_without_red()
            #self.initMainGeometry()
            if PyQt5.QtWidgets.QDesktopWidget().screenCount() == 2:
                x, y, w, h = GetSecondDisplyRect()
                self.ui.setGeometry(x, y, w, h)
                self.ui.showMaximized()
            if PyQt5.QtWidgets.QDesktopWidget().screenCount() >= 3:
               raise ValueError("Too many screens Connected, MAX 2")
            else:
                self.ui.showMaximized()
            #self.ui.showMaximized()
            #self.ui.show()
            #self.ui.move(-1000,0)
            #self.ui.showMaximized()
        except Exception as e:
            print(e)


    def active_output_changed(self):
        try:
            with open(Active_output_File, 'r') as f:
                active_ouput = f.read()
            cursor = self.ui.textEdit.textCursor()
            cursor.movePosition(cursor.End)
            cursor.insertText(active_ouput)
            self.ui.textEdit.setTextCursor(cursor)
            self.ui.textEdit.ensureCursorVisible()




                #self.ui.lineEdit.setText(active_ouput)
        except Exception as e:
            print(e)



    def initMainGeometry(self):
        self.AmountOfScreens = PyQt5.QtWidgets.QDesktopWidget().screenCount()
        if self.AmountOfScreens <= 1:
            self.screen = PyQt5.QtWidgets.QDesktopWidget().availableGeometry()
            self.width = self.screen.width()
            self.height = self.screen.height()
            self.setGeometry(0, 30, self.width / 4, self.height / 2)
        else:
            x, y, w, h = GetSecondDisplyRect()
            appwidth = w / 4
            appheight = h / 2
            self.setGeometry(x, y + 30, appwidth, appheight)

    # def initWatcher(self):
    #    paths = [
    #        Settings.HighlightFolderLocation,
    #        Settings.HighLightLocation
    #    ]
    #    self.fs_watcher = QtCore.QFileSystemWatcher(paths)


    def draw_red_box(self):
        try:
            with open(Image_Cordinates_location, 'r') as f:
                txt = f.read()
                List = txt.split(',')
                x1 = int(List[0])
                y1 = int(List[1])
                x2 = int(List[2])
                y2 = int(List[3])
            img = cv2.imread(Templet_Image_File, 3)
            cv2.rectangle(img, (x1, y1), (x2, y2), (0, 0, 255), 2)
            cv2.imwrite(Templet_Image_File_With_Red_Box, img)
            self.load_image_picture_changed(Templet_Image_File_With_Red_Box)
        except Exception as e:
            print(e)
    def Load_image_without_red(self):
        try:
            self.load_image_picture_changed(Templet_Image_File)
        except Exception as e:
            print(e)
    def load_image_picture_changed(self,Image_Path):
        try:
            Width = GetSystemMetrics(0)
            Height = GetSystemMetrics(1)
            Height = Height - 250
            Pixmap = QtGui.QPixmap(Image_Path)
            Pixmap = Pixmap.scaled(Width,Height,QtCore.Qt.KeepAspectRatio)
            self.ui.label.setMaximumSize((Width/10)*7,16777215)
            self.ui.label.setPixmap(Pixmap)
            self.ui.label.resize(Pixmap.width(), Pixmap.height())
            Pixmap2 = QtGui.QPixmap(Target_Image_File)
            Pixmap2 = Pixmap2.scaled(200, 100, QtCore.Qt.KeepAspectRatio)
            self.ui.label_2.setMaximumSize((Width/10)*7,16777215)
            self.ui.label_2.setPixmap(Pixmap2)
            self.ui.label_2.resize(Pixmap2.width(), Pixmap2.height() - Pixmap.height())
            try:
                with open(Current_Running_Script_txt,'r') as f:
                    txt = f.read()
                self.ui.label_6.setText(txt)
            except:
                self.ui.label_6.setText('')
            try:
                with open(Current_Action_txt,'r') as f:
                    txt = f.read()
                self.ui.label_5.setText(txt + '... ')
            except:
                self.ui.label_5.setText('')
            try:
                with open(Current_Thresh_Match_txt,'r') as f:
                    txt = f.read()
                List = txt.split('.')
                PercentLong = List[1]
                txt = PercentLong[:2]
                if txt != '':
                    self.ui.label_3.setText(txt + '% MATCH')
                else:
                    self.ui.label_3.setText('')
            except Exception as e:
                print(e)
                self.ui.label_3.setText('')
        except Exception as e:
            print(e)




if __name__ == '__main__':
        app = QApplication(sys.argv)
        screen = app.primaryScreen()
        size = screen.size()
        ex = Image_Show_Class()
        sys._excepthook = sys.excepthook

        def exception_hook(exctype, value, traceback):
            print(exctype, value, traceback)
            sys._excepthook(exctype, value, traceback)
            sys.exit(1)
        sys.excepthook = exception_hook
        sys.exit(app.exec_())




