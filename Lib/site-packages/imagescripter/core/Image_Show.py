from PyQt5 import QtGui,uic,QtCore
from win32api import GetSystemMetrics
import sys
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog
import cv2
from imagescripter.core.ssh_manager_for_image_show import SSH_Manager
from time import sleep


Templet_Image_File = r"C:\Settings\Last_Templet_Image.png"
Templet_Image_File_With_Red_Box = r"C:\Settings\Last_Templet_Image_With_Red_Box.png"
Target_Image_File = r"C:\Settings\Last_Target_Image.png"
Show_Image_Ui_Location = r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\show_image.ui"
Image_Cordinates_location = r"C:\Settings\Current_Image_Cordinates.txt"
Current_Running_Script_txt = r"C:\Settings\Current_Running_Script.txt"
Current_Action_txt = r"C:\Settings\Current_Action.txt"
Current_Thresh_Match_txt = r"C:\Settings\Current_Thresh_Match.txt"





class Get_Controller_Info_Thread(QtCore.QThread):
    def __init__(self,parent):
        QtCore.QThread.__init__(self)
        self.parent_ui = parent

    def run(self):
        while True:
            try:
                self.Memory_In_Use = SSH_Manager.get_percent_of_memory_In_Use()
            except:
                self.Memory_In_Use = '...'
            try:
                self.Memory_Free = SSH_Manager.get_percent_of_memory_free()
            except:
                self.Memory_Free = '...'
            try:
                self.CPU_Usage = SSH_Manager.get_percent_of_cpu_usage_used()
            except:
                self.CPU_Usage = '...'
            self.parent_ui.label_4.setText("    Memory Use: " + str(self.Memory_In_Use) + ' %')
            self.parent_ui.label_7.setText("    Memory Free: " + str(self.Memory_Free) + ' %')
            self.parent_ui.label_8.setText("    CPU Use: " + str(self.CPU_Usage) + ' %')














class Image_Show_Class(QWidget):
    def __init__(self):
        try:
            QWidget.__init__(self)

            ################################################################
            load_image_picture_changed_paths = [Templet_Image_File]
            self.picture_changed_watcher = QtCore.QFileSystemWatcher(load_image_picture_changed_paths)
            self.picture_changed_watcher.fileChanged.connect(self.Load_image_without_red)
            ##############################################################################################
            ################################################################
            RED_load_image_picture_changed_paths = [Image_Cordinates_location]
            self.RED_picture_changed_watcher = QtCore.QFileSystemWatcher(RED_load_image_picture_changed_paths)
            self.RED_picture_changed_watcher.fileChanged.connect(self.draw_red_box)
            ##############################################################################################
            self.ui = uic.loadUi(Show_Image_Ui_Location)
            Controller_Info_Thread = Get_Controller_Info_Thread(self.ui)
            Controller_Info_Thread.start()
            self.ui.setWindowTitle('Show Image')
            self.Load_image_without_red()
            self.ui.showMaximized()
        except Exception as e:
            print(e)














    def draw_red_box(self):
        try:
            with open(Image_Cordinates_location, 'r') as f:
                txt = f.read()
                List = txt.split(',')
                x1 = int(List[0])
                y1 = int(List[1])
                x2 = int(List[2])
                y2 = int(List[3])
            img = cv2.imread(Templet_Image_File, 3)
            cv2.rectangle(img, (x1, y1), (x2, y2), (0, 0, 255), 2)
            cv2.imwrite(Templet_Image_File_With_Red_Box, img)
            self.load_image_picture_changed(Templet_Image_File_With_Red_Box)
        except Exception as e:
            print(e)
    def Load_image_without_red(self):
        try:
            self.load_image_picture_changed(Templet_Image_File)
        except Exception as e:
            print(e)
    def load_image_picture_changed(self,Image_Path):
        try:
            Width = GetSystemMetrics(0)
            Height = GetSystemMetrics(1)
            Height = Height - 250
            Pixmap = QtGui.QPixmap(Image_Path)
            Pixmap = Pixmap.scaled(Width,Height,QtCore.Qt.KeepAspectRatio)
            self.ui.label.setPixmap(Pixmap)
            self.ui.label.resize(Pixmap.width(), Pixmap.height())
            Pixmap2 = QtGui.QPixmap(Target_Image_File)
            Pixmap2 = Pixmap2.scaled(200, 100, QtCore.Qt.KeepAspectRatio)
            self.ui.label_2.setPixmap(Pixmap2)
            self.ui.label_2.resize(Pixmap2.width(), Pixmap2.height() - Pixmap.height())
            try:
                with open(Current_Running_Script_txt,'r') as f:
                    txt = f.read()
                self.ui.label_6.setText(txt)
            except:
                self.ui.label_6.setText('')
            try:
                with open(Current_Action_txt,'r') as f:
                    txt = f.read()
                self.ui.label_5.setText(txt + '... ')
            except:
                self.ui.label_5.setText('')
            try:
                with open(Current_Thresh_Match_txt,'r') as f:
                    txt = f.read()
                List = txt.split('.')
                PercentLong = List[1]
                txt = PercentLong[:2]
                if txt != '':
                    self.ui.label_3.setText(txt + '% MATCH')
                else:
                    self.ui.label_3.setText('')
            except Exception as e:
                print(e)
                self.ui.label_3.setText('')
        except Exception as e:
            print(e)




if __name__ == '__main__':
    app = QApplication(sys.argv)
    screen = app.primaryScreen()
    size = screen.size()
    ex = Image_Show_Class()
    sys.exit(app.exec_())