import sys
from PyQt5.QtWidgets import QApplication, QWidget
from PyQt5.QtGui import QIcon
from database_manager import DataBase_Manager
from PyQt5 import QtGui, uic, Qt
from PyQt5.QtGui import QStandardItemModel,QStandardItem
import traceback
from variable_file_getter import Variable_File_Getter
import os
from PyQt5.QtGui import QIcon, QPixmap
import base64
from PyQt5 import QtCore
class Custom_StandardItem_Class(QStandardItem):
    def __init__(self,text = ''):
        super().__init__()
        self.setText(text)
        self.Index_Time_String = None






class Database_Viewer_Class(QWidget):

    def __init__(self):
        super().__init__()

        self.ui = uic.loadUi(r"database_viewer.ui")
        self.ui.pushButton_4.clicked.connect(self.refresh_button_was_clicked)
        self.ui.pushButton.clicked.connect(self.video_button_was_clicked)
        #self.get_and_fill_listview_with_data(Pass = 'True')
        self.get_and_fill_listview_with_data()
        self.ui.progressBar.hide()
        #self.ui.showFullScreen()
        #self.ui.show()
        self.ui.showMaximized()
        self.ui.listView.selectionModel().selectionChanged.connect(self.list_view_selection_changed)

    def video_button_was_clicked(self):
        if self.Pass == True:
            print('Pass')
            os.system(self.Pass_Video)
        else:
            print('Fail')
            os.system(self.Fail_Video)


    def refresh_button_was_clicked(self):
        print('Refreshing')
        self.get_and_fill_listview_with_data()



    def get_and_fill_listview_with_data(self,Pass = "%"):
        self.ui.progressBar.show()
        #Data = DataBase_Manager.get_data_from_databases(Target='Index_Time,Script_Name')
        Data = DataBase_Manager.get_data_from_databases(Target='Index_Time,Index_Time_String,Pass,Date,Station_Name,Script_Name,Controller_Build',Pass = Pass)
        #Data = DataBase_Manager.get_data_from_databases(Target='Index_Time,Index_Time_String,Station_Name,Script_Name,Controller_Build,Date',Pass = Pass)
        self.model = QStandardItemModel()
        List_OF_List = []
        for entry in Data:
             entry = list(entry)
             List_OF_List.append(entry)
        List_OF_List.sort(key=lambda x: x[0])
        Length_of_list = len(List_OF_List)
        ProgressIndex = 1
        self.ui.progressBar.setValue(1)
        self.ui.progressBar.setMaximum(Length_of_list)
        self.ui.progressBar.setMinimum(1)
        for display_entry in reversed(List_OF_List):
            self.ui.progressBar.setValue(ProgressIndex)
            ProgressIndex += 1
            Custom_Standard_Item = Custom_StandardItem_Class()
            Custom_Standard_Item.Index_Time_String = display_entry[1]
            display_entry.pop(0)
            display_entry.pop(0)
            Custom_Standard_Item.setText(str(display_entry))
            self.model.appendRow(Custom_Standard_Item)
        self.ui.progressBar.hide()
        self.ui.listView.setModel(self.model)
        self.ui.progressBar.setValue(0)

    def set_Station_Name_Label(self,str):
        self.ui.label.setText(str)

    def set_Script_Name_Label(self,str):
        self.ui.label_2.setText(str)

    def set_Client_Type_Label(self,str):
        #if str == 'None':
        #    self.ui.label_3.setText(str)
        #else:
        self.ui.label_3.setText('PC')

    def set_Build_Label(self,str):
        self.ui.label_4.setText(str)

    def set_Templet_Img_Label(self,templet_image):
        try:
            Failure_images_Folder = Variable_File_Getter.getVariableFromFile("Error_Images_Folder_Location")
            curdur = os.getcwd()
            os.chdir(Failure_images_Folder)
            try:
                pixmap_of_templet = QPixmap(templet_image)
            except TypeError as e:
                imgdata = base64.b64decode(templet_image)
                with open('temp.png', 'wb') as f:
                    f.write(imgdata)
                pixmap_of_templet = QPixmap('temp.png')
            #pixmap_of_templet = pixmap_of_templet.scaled(300 / 2, 200 / 2, QtCore.Qt.KeepAspectRatio,QtCore.Qt.FastTransformation)
            self.ui.label_6.setPixmap(pixmap_of_templet)
        except Exception as e:
            print(e)



    def set_Target_Img_Label(self,Target_image):
        try:
            Failure_images_Folder = Variable_File_Getter.getVariableFromFile("Error_Images_Folder_Location")
            curdur = os.getcwd()
            os.chdir(Failure_images_Folder)
            try:
                pixmap_of_Target = QPixmap(Target_image)
            except TypeError as e:
                imgdata = base64.b64decode(Target_image)
                with open('temp.png', 'wb') as f:
                    f.write(imgdata)
                pixmap_of_Target = QPixmap('temp.png')
            #pixmap_of_Target = pixmap_of_Target.scaled(300 / 2, 200 / 2, QtCore.Qt.KeepAspectRatio,QtCore.Qt.FastTransformation)
            self.ui.label_5.setPixmap(pixmap_of_Target)
        except Exception as e:
            print(e)


    def list_view_selection_changed(self):
            try:
                selected_index = self.ui.listView.selectedIndexes()[0]
                selected_item_object = self.model.itemFromIndex(selected_index)
                index_time_string = selected_item_object.Index_Time_String
                entry = DataBase_Manager.get_entry_fron_Index_Time_String(index_time_string)
                #Index_Time = entry[0]
                Date = entry[1]
                Script_Start_Time = entry[2]
                Script_End_Time = entry[3]
                self.set_Station_Name_Label(entry[4])
                Controller_Name = entry[5]
                self.set_Script_Name_Label(entry[6])

                self.set_Build_Label(entry[7])



                self.Pass = entry[8]
                Fail = entry[9]
                Skip = entry[10]
                Error = entry[11]
                self.set_Target_Img_Label(entry[12])


                self.set_Templet_Img_Label(entry[13])
                Steps = entry[14]
                Error_ID = entry[15]
                Notes = entry[16]
                Ignore = entry[17]
                try:
                    self.Fail_Video = entry[18]
                    self.Pass_Video = entry[19]
                    Client = entry[20]
                except IndexError:
                    self.Fail_Video = 'None'
                    self.Pass_Video = 'None'
                    Client = 'None'
                self.set_Client_Type_Label(Client)

                    


            except:
                error_message = traceback.format_exc()
                print(error_message)


















if __name__ == '__main__':
    app = QApplication(sys.argv)
    Database_Viewer = Database_Viewer_Class()
    sys.exit(app.exec_())