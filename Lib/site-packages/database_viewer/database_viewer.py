import sys
from PyQt5.QtWidgets import QApplication, QWidget
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog
from database_manager import DataBase_Manager
from PyQt5 import QtGui, uic, Qt
from PyQt5.QtGui import QStandardItemModel,QStandardItem
import traceback
from variable_file_getter import Variable_File_Getter
import os
from PyQt5.QtGui import QIcon, QPixmap
import base64
import sys
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *



from PyQt5 import QtCore
class Custom_StandardItem_Class(QStandardItem):
    def __init__(self,text = ''):
        super().__init__()
        self.setText(text)
        self.Index_Time_String = None






class Database_Viewer_Class(QWidget):

    def __init__(self):
        super().__init__()
        self.ui = uic.loadUi(r"database_viewer.ui")
        self.ui.pushButton_4.clicked.connect(self.refresh_button_was_clicked)
        self.ui.pushButton.clicked.connect(self.fail_video_button_was_clicked)
        self.ui.pushButton_6.clicked.connect(self.pass_video_button_was_clicked)
        self.ui.pushButton_2.clicked.connect(self.missing_scripts_was_clicked)
        self.ui.pushButton_5.clicked.connect(self.Browse_for_database_folder)
        self.ui.pushButton_3.clicked.connect(self.Save_Note)
        self.ui.lineEdit.setText(Variable_File_Getter.getVariableFromFile('Database_Folder'))
        self.refresh_combo_boxes_with_new_data()
        #self.get_and_fill_listview_with_data(Pass = 'True')
        self.get_and_fill_listview_with_data()
        self.ui.progressBar.hide()
        #self.ui.showFullScreen()
        #self.ui.show()
        self.get_and_update_missing_scripts()
        self.ui.showMaximized()
        self.ui.listView.selectionModel().selectionChanged.connect(self.list_view_selection_changed)


    def Browse_for_database_folder(self):
        print('Browse for database folder')
        lastdir = os.getcwd()
        txt = ''
        os.chdir(Variable_File_Getter.getVariableFromFile('Database_Folder'))
        txt = QFileDialog.getExistingDirectory(self, 'Select directory')
        if txt != '':
            Variable_File_Getter.setFileFromVariable('Database_Folder',txt)
            self.ui.lineEdit.setText(txt)
        os.chdir(lastdir)



    def get_and_update_missing_scripts(self):
        Scripts = DataBase_Manager.get_missing_scripts(Controller_Build='%')
        #String = 'Missing Scripts'
        #self.ui.textEdit.setAlignment(Qt.AlignLeft)
        #self.ui.textEdit.append(String)
        for i in Scripts:
            self.ui.textEdit.setAlignment(Qt.AlignLeft)
            self.ui.textEdit.append(i)








    def missing_scripts_was_clicked(self):
        self.get_and_update_missing_scripts()
        self.ui.stackedWidget.setCurrentIndex(1)


    def fail_video_button_was_clicked(self):
        print("fail_video_button_was_clicked -> ",self.Fail_Video)
        try:
            if not self.Fail_Video.endswith('.avi'):
                self.Fail_Video = self.Fail_Video + '.avi'
                self.Fail_Video = self.Fail_Video.replace(' ', '')
            os.system(self.Fail_Video)
        except Exception as e:
            print(e)

    def pass_video_button_was_clicked(self):
        print("pass_video_button_was_clicked -> ",self.Pass_Video)
        try:
            if not self.Pass_Video.endswith('.avi'):
                self.Pass_Video = self.Pass_Video + '.avi'
                self.Pass_Video = self.Pass_Video.replace(' ','')
            os.system(self.Pass_Video)
            print('################')
            print(self.Pass_Video)
        except Exception as e:
            print(e)

    def refresh_combo_boxes_with_new_data(self):

        print("refresh_combo_boxes_with_new_data")
        ###############BUILDS
        List_of_Controller_Builds = DataBase_Manager.get_list_of_controller_builds()
        for Controller_Build in List_of_Controller_Builds:
            self.ui.comboBox_2.addItem(Controller_Build)




    def refresh_button_was_clicked(self):
        print("refresh_button_was_clicked")
        try:
            self.get_and_update_missing_scripts()
            #####################################









            self.ui.stackedWidget.setCurrentIndex(1)
            ###################PASS OR FAIL#############################
            Pass_Fail_All_Selection = self.ui.comboBox.currentText()
            if Pass_Fail_All_Selection == 'Fail':
                DidPass = 'False'
            elif Pass_Fail_All_Selection == 'Pass':
                DidPass = 'True'
            elif Pass_Fail_All_Selection == 'All':
                DidPass = '%'
            ###################Build#############################
            Controller_Buil_Selection = self.ui.comboBox_2.currentText()
            if Controller_Buil_Selection == 'Any':
                Controller_Buil_Selection = '%'
            self.get_and_fill_listview_with_data(Pass = DidPass,Controller_Build = Controller_Buil_Selection)
            self.ui.listView.selectionModel().selectionChanged.connect(self.list_view_selection_changed)
        except Exception as e:
            print(e)



    def get_and_fill_listview_with_data(self,Pass = "%",Controller_Build = '%'):
        print('get_and_fill_listview_with_data')

        self.ui.progressBar.show()
        Data = DataBase_Manager.get_data_from_databases(Target='Index_Time,Index_Time_String,Pass,Script_End_Time,Date,Station_Name,Script_Name,Controller_Build',Pass = Pass,Controller_Build = Controller_Build)

        self.model = QStandardItemModel()
        List_OF_List = []
        for entry in Data:
             entry = list(entry)
             List_OF_List.append(entry)
        List_OF_List.sort(key=lambda x: x[0])
        Length_of_list = len(List_OF_List)
        ProgressIndex = 1
        self.ui.progressBar.setValue(1)
        self.ui.progressBar.setMaximum(Length_of_list)
        self.ui.progressBar.setMinimum(1)
        for display_entry in reversed(List_OF_List):
            self.ui.progressBar.setValue(ProgressIndex)
            ProgressIndex += 1
            Custom_Standard_Item = Custom_StandardItem_Class()
            Custom_Standard_Item.Index_Time_String = display_entry[1]
            display_entry.pop(0)
            display_entry.pop(0)
            display_entry_string = str(display_entry)
            display_entry_string = display_entry_string.replace('True','PASS')
            display_entry_string = display_entry_string.replace('False','FAIL')
            display_entry_string = display_entry_string.replace("'",'')
            display_entry_string = display_entry_string.replace('[','')
            display_entry_string = display_entry_string.replace(']','')
            display_entry_string = display_entry_string.replace(',',' ')
            Custom_Standard_Item.setText(display_entry_string)
            self.model.appendRow(Custom_Standard_Item)
        self.ui.progressBar.hide()
        self.ui.listView.setModel(self.model)
        self.ui.progressBar.setValue(0)

    def set_Station_Name_Label(self,str):
        self.ui.label.setText(str)

    def set_Script_Name_Label(self,str):
        self.ui.label_2.setText(str)

    def set_Client_Type_Label(self,str):
        #if str == 'None':
        #    self.ui.label_3.setText(str)
        #else:
        self.ui.label_3.setText('PC')

    def set_Build_Label(self,str):
        self.ui.label_4.setText(str)

    def set_Templet_Img_Label(self,templet_image):
        try:
            Failure_images_Folder = Variable_File_Getter.getVariableFromFile("Error_Images_Folder_Location")
            curdur = os.getcwd()
            os.chdir(Failure_images_Folder)
            try:
                pixmap_of_templet = QPixmap(templet_image)
            except TypeError as e:
                imgdata = base64.b64decode(templet_image)
                with open('temp.png', 'wb') as f:
                    f.write(imgdata)
                pixmap_of_templet = QPixmap('temp.png')
            #pixmap_of_templet = pixmap_of_templet.scaled(300 / 2, 200 / 2, QtCore.Qt.KeepAspectRatio,QtCore.Qt.FastTransformation)
            self.ui.label_6.setPixmap(pixmap_of_templet)
        except Exception as e:
            print(e)



    def set_Target_Img_Label(self,Target_image):
        try:
            Failure_images_Folder = Variable_File_Getter.getVariableFromFile("Error_Images_Folder_Location")
            curdur = os.getcwd()
            os.chdir(Failure_images_Folder)
            try:
                pixmap_of_Target = QPixmap(Target_image)
            except TypeError as e:
                imgdata = base64.b64decode(Target_image)
                with open('temp.png', 'wb') as f:
                    f.write(imgdata)
                pixmap_of_Target = QPixmap('temp.png')
            #pixmap_of_Target = pixmap_of_Target.scaled(300 / 2, 200 / 2, QtCore.Qt.KeepAspectRatio,QtCore.Qt.FastTransformation)
            self.ui.label_5.setPixmap(pixmap_of_Target)
        except Exception as e:
            print(e)


    def Save_Note(self):
        try:
            print("Save Note")
            notes_txt = self.ui.plainTextEdit.toPlainText()
            error_id = self.Fail_Video
            if error_id != 'None':
                DataBase_Manager.Save_Note_Into_Database(notes_txt, error_id)
            print("Note Saved")
        except Exception as e:
            print(e)





    def list_view_selection_changed(self):
            print("list_view_selection_changed(self)")
            try:
                self.ui.stackedWidget.setCurrentIndex(0)
                selected_index = self.ui.listView.selectedIndexes()[0]
                selected_item_object = self.model.itemFromIndex(selected_index)
                index_time_string = selected_item_object.Index_Time_String
                entry = DataBase_Manager.get_entry_fron_Index_Time_String(index_time_string)
                #Index_Time = entry[0]
                Date = entry[1]
                Script_Start_Time = entry[2]
                Script_End_Time = entry[3]
                self.set_Station_Name_Label(entry[4])
                Controller_Name = entry[5]
                self.set_Script_Name_Label(entry[6])
                self.set_Build_Label(entry[7])
                self.Pass = entry[8]
                Fail = entry[9]
                Skip = entry[10]
                Error = entry[11]
                self.ui.plainTextEdit_4.setPlainText(Error)
                self.set_Target_Img_Label(entry[12])
                self.set_Templet_Img_Label(entry[13])
                Steps = entry[14]
                self.ui.plainTextEdit_2.setPlainText(Steps)


                Error_ID = entry[15]
                Ignore = entry[17]
                self.Fail_Video = entry[18]
                print('################')
                print(self.Fail_Video)
                print('################')
                Notes = DataBase_Manager.Get_Notes_For_An_Error_From_Notes_Database(self.Fail_Video)
                print(Notes)


                self.ui.plainTextEdit.setPlainText(Notes)





                self.Fail_Video = self.Fail_Video.replace(' ', '')
                self.Pass_Video = entry[19]
                self.Pass_Video = self.Pass_Video.replace(' ','')

                Client = entry[20]
                self.set_Client_Type_Label(Client)

                    


            except:
                error_message = traceback.format_exc()
                print(error_message)


















if __name__ == '__main__':
    app = QApplication(sys.argv)
    Database_Viewer = Database_Viewer_Class()
    sys.exit(app.exec_())