import sys
from PyQt5.QtWidgets import QApplication, QWidget
from PyQt5.QtGui import QIcon
from database_manager import DataBase_Manager
from PyQt5 import QtGui, uic, Qt
from PyQt5.QtGui import QStandardItemModel,QStandardItem
import traceback

class Custom_StandardItem_Class(QStandardItem):
    def __init__(self,text):
        super().__init__()
        self.setText(text)
        self.Index_Number = None




class Database_Viewer_Class(QWidget):

    def __init__(self):
        super().__init__()
        self.ui = uic.loadUi(r"database_viewer.ui")
        self.get_and_fill_listview_with_data()
        self.ui.show()
        self.ui.listView.selectionModel().selectionChanged.connect(self.list_view_selection_changed)






    def get_and_fill_listview_with_data(self):
        #Data = DataBase_Manager.get_data_from_databases(Target='Index_Time,Script_Name')
        Data = DataBase_Manager.get_data_from_databases(Target='Index_Time,Date,Station_Name,Script_Name,Controller_Build',)
        self.model = QStandardItemModel()
        List_OF_List = []
        for d in Data:
             d = list(d)
             List_OF_List.append(d)
        List_OF_List.sort(key=lambda x: x[0])
        print(List_OF_List)
        for i in reversed(List_OF_List):
            Custom_Standard_Item = Custom_StandardItem_Class(str(i))
            Custom_Standard_Item.Index_Number = i[0]
            self.model.appendRow(Custom_Standard_Item)
        self.ui.listView.setModel(self.model)



    def list_view_selection_changed(self):
            try:

                selected_index = ''
                selected_item_object = ''
                index_time = ''
                entry = ''


                selected_index = self.ui.listView.selectedIndexes()[0]
                selected_item_object = self.model.itemFromIndex(selected_index)
                index_time = selected_item_object.Index_Number

                entry = DataBase_Manager.get_entry_fron_Index_Time(index_time)


                #Index_Time = entry[0]
                Date = entry[1]
                Script_Start_Time = entry[2]
                Script_End_Time = entry[3]
                Station_Name = entry[4]
                Controller_Name = entry[5]
                Script_Name = entry[6]
                Controller_Build = entry[7]
                Pass = entry[8]
                Fail = entry[9]
                Skip = entry[10]
                Error = entry[11]
                Target_Img = entry[12]
                Templet_Img = entry[13]
                Steps = entry[14]
                Error_ID = entry[15]
                Notes = entry[16]
                Ignore = entry[17]
                try:
                    Fail_Video = entry[18]
                    Pass_Video = entry[19]
                    Client = entry[20]
                except IndexError:
                    Fail_Video = 'None'
                    Pass_Video = 'None'
                    Client = 'None'
                    


            except:
                error_message = traceback.format_exc()
                print(error_message)


















if __name__ == '__main__':
    app = QApplication(sys.argv)
    Database_Viewer = Database_Viewer_Class()
    sys.exit(app.exec_())