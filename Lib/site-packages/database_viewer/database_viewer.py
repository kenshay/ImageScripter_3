import sys
from PyQt5.QtWidgets import QApplication, QWidget
from win32api import GetSystemMetrics
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog
from database_manager import DataBase_Manager
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QMessageBox
from PyQt5 import QtGui, uic, Qt
from PyQt5.QtGui import QStandardItemModel,QStandardItem
import traceback
from variable_file_getter import Variable_File_Getter
import os
from PyQt5.QtGui import QIcon, QPixmap
import base64
import sys
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import shutil
import PyQt5
from win32api import GetSystemMetrics
from PyQt5 import QtCore
class Custom_StandardItem_Class(QStandardItem):
    def __init__(self,text = ''):
        super().__init__()
        self.setText(text)
        self.Index_Time_String = None





def get_run_time(s1,s2):
    print("Get Run Time")
    print(s1)
    print(s2)


    from datetime import datetime
    #s1 = '7:20:3'
    #s2 = '7:30:1' # for example
    FMT = '%H:%M:%S'
    tdelta = datetime.strptime(s2, FMT) - datetime.strptime(s1, FMT)
    return tdelta














class Database_Viewer_Class(QWidget):

    def __init__(self):
        super().__init__()
        #self.ui = uic.loadUi(r"database_viewer.ui")
        self.ui = uic.loadUi(r"C:\ImageScripter_2\Lib\site-packages\database_viewer\database_viewer.ui")


        W = GetSystemMetrics(0)
        H = GetSystemMetrics(1)
        percent = W / 10
        Target_W = percent * 6
        self.ui.stackedWidget.setMinimumWidth(Target_W)
        self.ui.stackedWidget_2.setMinimumWidth(Target_W)
        print("$$$$$$$$$$$$$$$$$$")
        print(Target_W)
        print("$$$$$$$$$$$$$$$$$$")


        self.ui.pushButton_4.clicked.connect(self.refresh_button_was_clicked)
        self.ui.pushButton.clicked.connect(self.fail_video_button_was_clicked)
        self.ui.pushButton_6.clicked.connect(self.pass_video_button_was_clicked)
        self.ui.pushButton_2.clicked.connect(self.missing_scripts_was_clicked)
        self.ui.pushButton_5.clicked.connect(self.Browse_for_database_folder)
        self.ui.pushButton_11.clicked.connect(self.Pass_Only_Entry_Pass_Video_Was_Clicked)
        self.ui.pushButton_3.clicked.connect(self.Save_Note)
        self.ui.pushButton_8.clicked.connect(self.Export_Fail_Video_To_Desktop)
        self.ui.pushButton_10.clicked.connect(self.Export_ScreenShot_To_Desktop)
        self.ui.pushButton_9.clicked.connect(self.Delete_Past_Fail_Video)
        self.ui.lineEdit.setText(Variable_File_Getter.getVariableFromFile('Database_Folder'))
        self.ui.actionUpdate.triggered.connect(self.Update_Action_Clicked)
        self.refresh_combo_boxes_with_new_data()
        #self.get_and_fill_listview_with_data(Pass = 'True')
        LatestBuild = DataBase_Manager.get_latest_controller_build()
        self.get_and_fill_listview_with_data(Controller_Build = LatestBuild)
        index = self.ui.comboBox_2.findText(LatestBuild, QtCore.Qt.MatchFixedString)
        if index >= 0:
            self.ui.comboBox_2.setCurrentIndex(index)


        self.ui.progressBar.hide()
        #self.ui.showFullScreen()
        #self.ui.show()
        self.get_and_update_missing_scripts()
        self.ui.showMaximized()
        self.ui.listView.selectionModel().selectionChanged.connect(self.list_view_selection_changed)

    def Delete_Past_Fail_Video(self):
        try:
            quit_msg = "Are you sure you want to delete the last past fail video?"
            reply = QMessageBox.question(self, 'Message',
                                               quit_msg, QMessageBox.Yes, QMessageBox.No)

            if reply == QMessageBox.Yes:
                print("Deleting_Past_Fail_Video")
                if not self.Fail_Video.endswith('.avi'):
                    self.Fail_Video = self.Fail_Video + '.avi'
                    self.Fail_Video = self.Fail_Video.replace(' ', '')
                Video_Name = os.path.basename(self.Fail_Video)
                print('Deleting File')
                os.remove(self.Fail_Video)
                print('File Deleted -> ',self.Fail_Video)
        except Exception as e:
            print(e)


    def Export_ScreenShot_To_Desktop(self):
        try:
            quit_msg = "Are you sure you want to export the screenshot to your desktop? \n This will overwrite the last image"
            reply = QMessageBox.question(self, 'Question',
                                               quit_msg, QMessageBox.Yes, QMessageBox.No)
            if reply == QMessageBox.Yes:
                print("Exporting Screen Shot To Desktop")
                Desktop_Path = os.path.join(os.environ["HOMEPATH"], "Desktop") + '\\'
                imgdata = base64.b64decode(self.screen_shot)
                with open(Desktop_Path + 'Screenshot.png', 'wb') as f:
                    f.write(imgdata)
        except Exception as e:
            print(e)




    def Export_Fail_Video_To_Desktop(self):
        try:
            quit_msg = "Are you sure you want to export fail video to your desktop?"
            reply = QMessageBox.question(self, 'Message',
                                               quit_msg, QMessageBox.Yes, QMessageBox.No)
            if reply == QMessageBox.Yes:
                print("Exporting Fail Video To Desktop")
                Desktop_Path = os.path.join(os.environ["HOMEPATH"], "Desktop") + '\\'

                if not self.Fail_Video.endswith('.avi'):
                    self.Fail_Video = self.Fail_Video + '.avi'
                    self.Fail_Video = self.Fail_Video.replace(' ', '')
                Video_Name = os.path.basename(self.Fail_Video)
                print('Copying File')
                shutil.copyfile(self.Fail_Video,Desktop_Path + Video_Name)
                print('File Copied -> ',Desktop_Path + Video_Name)
        except Exception as e:
            print(e)








    def Update_Action_Clicked(self):
        import subprocess
        #print("Update_Action_Clicked")
        #os.system(r"C:\ImageScripter_2\Scripts\dist\Reset_Image_Scripter_2.exe")
        subprocess.Popen(r"C:\ImageScripter_2\Scripts\dist\Reset_Image_Scripter_2.exe", shell=True)

    def Browse_for_database_folder(self):
        print('Browse for database folder')
        lastdir = os.getcwd()
        txt = ''
        os.chdir(Variable_File_Getter.getVariableFromFile('Database_Folder'))
        txt = QFileDialog.getExistingDirectory(self, 'Select directory')
        if txt != '':
            Variable_File_Getter.setFileFromVariable('Database_Folder',txt)
            self.ui.lineEdit.setText(txt)
        os.chdir(lastdir)



    def get_and_update_missing_scripts(self):
        self.ui.textEdit.setText('')
        selected_Build = self.ui.comboBox_2.currentText()
        if selected_Build == 'Any':
            selected_Build = '%'
        Scripts = DataBase_Manager.get_missing_scripts(Controller_Build=selected_Build)
        String = 'Missing Scripts\n\n'
        self.ui.textEdit.setAlignment(Qt.AlignLeft)
        self.ui.textEdit.append(String)
        for i in Scripts:
            self.ui.textEdit.setAlignment(Qt.AlignLeft)
            self.ui.textEdit.append(i)








    def missing_scripts_was_clicked(self):
        self.get_and_update_missing_scripts()
        self.ui.stackedWidget.setCurrentIndex(1)
        self.ui.stackedWidget_2.setCurrentIndex(1)


    def fail_video_button_was_clicked(self):
        print("fail_video_button_was_clicked -> ",self.Fail_Video)
        try:
            if not self.Fail_Video.endswith('.avi'):
                self.Fail_Video = self.Fail_Video + '.avi'
                self.Fail_Video = self.Fail_Video.replace(' ', '')
            os.system(self.Fail_Video)
        except Exception as e:
            print(e)

    def Pass_Only_Entry_Pass_Video_Was_Clicked(self):
        print("pass_Video_button_was_clicked -> ", self.Pass_Video)
        os.system(self.Pass_Video)




    def pass_video_button_was_clicked(self):

        Pass_Video_List = self.Fail_Video.split('__Fail__')
        pass_Video = Pass_Video_List[0]
        pass_Video = pass_Video + '__Pass__'
        print("pass_Video_button_was_clicked -> ",pass_Video)
        try:
            if not pass_Video.endswith('.avi'):
                pass_Video = pass_Video + 'x.avi'
                pass_Video = pass_Video.replace(' ', '')
            print(pass_Video)
            os.system(pass_Video)

        except Exception as e:
            try:
                if not pass_Video.endswith('.avi'):
                    pass_Video = pass_Video + '.avi'
                    pass_Video = pass_Video.replace(' ', '')
                print(pass_Video)
                os.system(pass_Video)
            except Exception as e:
                print(e)



    def refresh_combo_boxes_with_new_data(self):
        print("refresh_combo_boxes_with_new_data")
        ###############BUILDS
        List_of_Controller_Builds = DataBase_Manager.get_list_of_controller_builds()
        for Controller_Build in List_of_Controller_Builds:
            self.ui.comboBox_2.addItem(Controller_Build)




    def refresh_button_was_clicked(self):
        print("refresh_button_was_clicked")
        try:
            self.refresh_combo_boxes_with_new_data()
            self.get_and_update_missing_scripts()
            #####################################
            self.ui.stackedWidget.setCurrentIndex(1)
            self.ui.stackedWidget_2.setCurrentIndex(1)
            ###################PASS OR FAIL#############################
            Pass_Fail_All_Selection = self.ui.comboBox.currentText()
            if Pass_Fail_All_Selection == 'Fail':
                DidPass = 'False'
            elif Pass_Fail_All_Selection == 'Pass':
                DidPass = 'True'
            elif Pass_Fail_All_Selection == 'All':
                DidPass = '%'
            ###################Build#############################
            Controller_Buil_Selection = self.ui.comboBox_2.currentText()
            if Controller_Buil_Selection == 'Any':
                Controller_Buil_Selection = '%'
            self.get_and_fill_listview_with_data(Pass = DidPass,Controller_Build = Controller_Buil_Selection)
            self.ui.listView.selectionModel().selectionChanged.connect(self.list_view_selection_changed)
        except Exception as e:
            print(e)


    def get_and_fill_listview_with_data(self,Pass = "False",Controller_Build = '%'):





        self.get_and_update_missing_scripts()
        #####################################
        self.ui.stackedWidget.setCurrentIndex(1)
        self.ui.stackedWidget_2.setCurrentIndex(1)
        print('get_and_fill_listview_with_data')
        self.ui.progressBar.show()
        Data = DataBase_Manager.get_data_from_databases(Target='Index_Time,Index_Time_String,Pass,Script_End_Time,Date,Station_Name,Script_Name,Controller_Build',Pass = Pass,Controller_Build = Controller_Build)
        Data = DataBase_Manager.get_data_from_databases(Target='Index_Time,Index_Time_String,Pass,Station_Name,Script_Name,Controller_Build',Pass = Pass,Controller_Build = Controller_Build)
        self.model = QStandardItemModel()
        List_OF_List = []
        for entry in Data:
             entry = list(entry)
             List_OF_List.append(entry)
        List_OF_List.sort(key=lambda x: x[0])
        Length_of_list = len(List_OF_List)
        ProgressIndex = 1
        self.ui.progressBar.setValue(1)
        self.ui.progressBar.setMaximum(Length_of_list)
        self.ui.progressBar.setMinimum(1)
        List_to_see_if_already_added = []
        for display_entry in reversed(List_OF_List):
            self.ui.progressBar.setValue(ProgressIndex)
            ProgressIndex += 1
            Custom_Standard_Item = Custom_StandardItem_Class()
            Custom_Standard_Item.Index_Time_String = display_entry[1]
            display_entry.pop(0)
            display_entry.pop(0)
            display_entry_string = str(display_entry)
            display_entry_string = display_entry_string.replace('True','PASS')
            display_entry_string = display_entry_string.replace('False','FAIL')
            display_entry_string = display_entry_string.replace("'",'')
            display_entry_string = display_entry_string.replace('[','')
            display_entry_string = display_entry_string.replace(']','')
            display_entry_string = display_entry_string.replace(',',' ')
            Custom_Standard_Item.setText(display_entry_string)
            if self.ui.radioButton.isChecked():#UNIQUE IS ENAbled so hide repeats
                if display_entry not in List_to_see_if_already_added:
                    List_to_see_if_already_added.append(display_entry)
                    self.model.appendRow(Custom_Standard_Item)
                pass
            else:
                self.model.appendRow(Custom_Standard_Item)
        self.ui.progressBar.hide()
        self.ui.listView.setModel(self.model)
        self.ui.progressBar.setValue(0)

    def set_Station_Name_Label(self,str):
        self.ui.label.setText(str)

    def set_Script_Name_Label(self,str):
        self.ui.label_2.setText(str)

    def set_Client_Type_Label(self,str):
        #if str == 'None':
        #    self.ui.label_3.setText(str)
        #else:
        self.ui.label_3.setText('PC')

    def set_Build_Label(self,str):
        self.ui.label_4.setText(str)

    def set_Templet_Img_Label(self,templet_image):
        try:
            Failure_images_Folder = Variable_File_Getter.getVariableFromFile("Error_Images_Folder_Location")
            curdur = os.getcwd()
            os.chdir(Failure_images_Folder)
            try:
                pixmap_of_templet = QPixmap(templet_image)
            except TypeError as e:
                imgdata = base64.b64decode(templet_image)
                with open('temp.png', 'wb') as f:
                    f.write(imgdata)
                pixmap_of_templet = QPixmap('temp.png')
            #pixmap_of_templet = pixmap_of_templet.scaled(300 / 2, 200 / 2, QtCore.Qt.KeepAspectRatio,QtCore.Qt.FastTransformation)

            Width = GetSystemMetrics(0)
            Height = GetSystemMetrics(1)
            pixmap_of_templet = pixmap_of_templet.scaled(Width / 2, Height / 2, QtCore.Qt.KeepAspectRatio)
            self.ui.label_6.setPixmap(pixmap_of_templet)


        except Exception as e:
            print(e)



    def set_Target_Img_Label(self,Target_image):
        try:
            Failure_images_Folder = Variable_File_Getter.getVariableFromFile("Error_Images_Folder_Location")
            curdur = os.getcwd()
            os.chdir(Failure_images_Folder)
            try:
                pixmap_of_Target = QPixmap(Target_image)
            except TypeError as e:
                imgdata = base64.b64decode(Target_image)
                with open('temp.png', 'wb') as f:
                    f.write(imgdata)
                pixmap_of_Target = QPixmap('temp.png')
            #pixmap_of_Target = pixmap_of_Target.scaled(300 / 2, 200 / 2, QtCore.Qt.KeepAspectRatio,QtCore.Qt.FastTransformation)
            self.ui.label_5.setPixmap(pixmap_of_Target)
        except Exception as e:
            print(e)


    def Save_Note(self):
        try:
            quit_msg = "Are you sure you want to save the note?"
            reply = QMessageBox.question(self, 'Message',
                                               quit_msg, QMessageBox.Yes, QMessageBox.No)
            if reply == QMessageBox.Yes:
                print("Saveing Note")
                notes_txt = self.ui.plainTextEdit.toPlainText()
                error_id = self.Error_ID
                if error_id != 'None':
                    DataBase_Manager.Save_Note_Into_Database(notes_txt, error_id)
                print("Note Saved")
        except Exception as e:
            print(e)





    def list_view_selection_changed(self):
            print("list_view_selection_changed(self)")
            try:
                selected_index = self.ui.listView.selectedIndexes()[0]
                selected_item_object = self.model.itemFromIndex(selected_index)
                index_time_string = selected_item_object.Index_Time_String
                entry = DataBase_Manager.get_entry_fron_Index_Time_String(index_time_string)
                #Index_Time = entry[0]
                Date = entry[1]
                self.ui.label_16.setText(Date)
                Script_Start_Time = entry[2]
                self.ui.label_8.setText(Script_Start_Time)
                Script_End_Time = entry[3]
                self.ui.label_9.setText(Script_End_Time)
                Run_Time = get_run_time(Script_Start_Time,Script_End_Time)
                self.ui.label_3.setText(str(Run_Time))
                self.set_Station_Name_Label(entry[4])
                Controller_Name = entry[5]
                self.set_Script_Name_Label(entry[6])
                self.set_Build_Label(entry[7])
                self.Pass = entry[8]
                if self.Pass == 'True':
                    self.ui.label_17.setText('PASS')
                    self.ui.stackedWidget.setCurrentIndex(2)
                    self.ui.stackedWidget_2.setCurrentIndex(2)
                else:
                    self.ui.label_17.setText('FAIL')
                    self.ui.stackedWidget.setCurrentIndex(0)
                    self.ui.stackedWidget_2.setCurrentIndex(0)
                #else:
                #    self.ui.pushButton.show()
                #    self.ui.plainTextEdit.show()
                #    self.ui.pushButton_7.show()
                #    self.ui.pushButton_3.show()
                #    self.ui.label_5.show()
                #    self.ui.plainTextEdit_4.show()
                #   self.ui.plainTextEdit_2.show()

                Fail = entry[9]
                Skip = entry[10]
                Error = entry[11]
                self.ui.plainTextEdit_4.setPlainText(Error)
                self.set_Target_Img_Label(entry[12])
                self.set_Templet_Img_Label(entry[13])
                self.screen_shot = entry[13]
                Steps = entry[14]
                self.ui.plainTextEdit_2.setPlainText(Steps)


                self.Error_ID = entry[15]
                self.Error_ID = self.Error_ID.replace("'",'')
                self.Error_ID = self.Error_ID.replace('"','')
                Ignore = entry[17]
                self.Fail_Video = entry[18]
                Notes = DataBase_Manager.Get_Notes_For_An_Error_From_Notes_Database(self.Error_ID)
                self.ui.plainTextEdit.setPlainText(Notes)
                print(self.Fail_Video)
                Fail_Amount = DataBase_Manager.Count(self.Fail_Video)
                Pass_Amount = DataBase_Manager.get_count_of_passes_with_script_for_specific_build(entry[7],entry[6])

                total = Fail_Amount + Pass_Amount
                Average_Fail = round((Fail_Amount / total) * 100)
                self.ui.label_18.setText(str(Average_Fail) + '% Failure')





                self.ui.label_14.setText('Fail: ' + str(Fail_Amount))
                self.ui.label_15.setText('Pass: ' + str(Pass_Amount))
                self.Fail_Video = self.Fail_Video.replace(' ', '')
                self.Pass_Video = entry[19]
                self.Pass_Video = self.Pass_Video.replace(' ','')

                Client = entry[20]
                #self.set_Client_Type_Label(Client)


                    


            except:
                error_message = traceback.format_exc()
                print(error_message)


















if __name__ == '__main__':
    app = QApplication(sys.argv)
    Database_Viewer = Database_Viewer_Class()
    sys.exit(app.exec_())