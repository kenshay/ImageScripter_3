import sys
from PyQt5.QtWidgets import QApplication, QWidget
from win32api import GetSystemMetrics
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog
from database_manager import DataBase_Manager
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QMessageBox
from PyQt5 import QtGui, uic, Qt
from PyQt5.QtGui import QStandardItemModel,QStandardItem
import traceback
from paths import *
from paths import *
from variable_file_getter import Variable_File_Getter
import os
from PyQt5.QtGui import QIcon, QPixmap
import base64
import sys
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import shutil
from paths import *
import PyQt5
from win32api import GetSystemMetrics
from PyQt5 import QtCore
class Custom_StandardItem_Class(QStandardItem):
    def __init__(self,text = ''):
        #print(10)
        super().__init__()
        self.setText(text)
        self.Index_Time_String = None





def get_run_time(s1,s2):
    #print(11)
    print("Get Run Time")
    #print(s1)
    #print(s2)


    from datetime import datetime
    #s1 = '7:20:3'
    #s2 = '7:30:1' # for example
    FMT = '%H:%M:%S'
    tdelta = datetime.strptime(s2, FMT) - datetime.strptime(s1, FMT)
    return tdelta




def Empy_Recycle_Bing():
    #print(13)
    try:
        print('Emptying Recycle Bin')
        import os
        import subprocess
        import winshell
        from random import randint
        from time import sleep
        winshell.recycle_bin().empty(confirm=False, show_progress=False, sound=False)
        print('Done')
    except Exception as e:
        print(e)






class Database_Viewer_Class(QWidget):
    def __init__(self):
        super().__init__()
        #print(14)
        ##database_viewerdatabase_viewerui = r"C:\ImageScripter_2\Lib\site-packages\database_viewer\database_viewer.ui"
        self.ui = uic.loadUi(database_viewerdatabase_viewerui)
        ##self.ui = uic.loadUi(r"C:\ImageScripter_2\Lib\site-packages\database_viewer\database_viewer.ui")
        self.ui.setWindowTitle("Database Viewer")
        self.ui.setWindowIcon(QtGui.QIcon(loading_eyepng))
        Empy_Recycle_Bing()
        W = GetSystemMetrics(0)
        H = GetSystemMetrics(1)
        percent = W / 10
        Target_W = percent * 6
        self.ui.stackedWidget.setMinimumWidth(Target_W)
        self.ui.stackedWidget_2.setMinimumWidth(Target_W)
        #print("$$$$$$$$$$$$$$$$$$")
        #print(Target_W)
        #print("$$$$$$$$$$$$$$$$$$")
        #self.ui.listView.setVerticalScrollBarPolicy(Qt.ScrollBarAlways)
        self.init_missing_scripts_build_combo()


        self.ui.pushButton_4.clicked.connect(self.refresh_button_was_clicked)
        self.ui.pushButton_12.clicked.connect(self.ignore_was_clicked)
        self.ui.pushButton_13.clicked.connect(self.remove_ignore_was_clicked)
        self.ui.pushButton_14.clicked.connect(self.pull_database)
        self.ui.pushButton_7.clicked.connect(self.fail_and_play_video_button_clicked)
        self.ui.pushButton.clicked.connect(self.fail_video_button_was_clicked)
        self.ui.pushButton_16.clicked.connect(self.open_script_button_was_clicked)
        self.ui.pushButton_6.clicked.connect(self.pass_video_button_was_clicked)

        #self.ui.comboBox_4.currentIndexChanged.connect(self.refresh_combo_boxes_with_new_data)
        #self.ui.comboBox_4.currentIndexChanged.connect(self.combo_station_selected_has_changed)



        self.ui.pushButton_2.clicked.connect(self.missing_scripts_was_clicked)
        self.ui.pushButton_5.clicked.connect(self.Browse_for_database_folder)
        self.ui.pushButton_11.clicked.connect(self.Pass_Only_Entry_Pass_Video_Was_Clicked)
        self.ui.pushButton_3.clicked.connect(self.Save_Note)
        self.ui.pushButton_17.clicked.connect(self.Date_Note)
        self.ui.pushButton_18.clicked.connect(self.Pass_Note)
        self.ui.pushButton_19.clicked.connect(self.Fail_Note)
        self.ui.pushButton_20.clicked.connect(self.Keep_An_Eye_On_Note)
        self.ui.pushButton_21.clicked.connect(self.Fixed_Note)
        self.ui.pushButton_8.clicked.connect(self.Export_Fail_Video_To_Desktop)
        self.ui.pushButton_10.clicked.connect(self.Export_ScreenShot_To_Desktop)
        self.ui.pushButton_9.clicked.connect(self.Delete_Past_Fail_Video)
        ##self.ui.lineEdit.setText(Variable_File_Getter.getVariableFromFile('Database_Folder'))
        self.ui.lineEdit.setText(Database_Folder)
        self.ui.actionUpdate.triggered.connect(self.Update_Action_Clicked)
        self.refresh_combo_boxes_with_new_data()
        #self.get_and_fill_listview_with_data(Pass = 'True')
        LatestBuild = DataBase_Manager.get_latest_controller_build()
        self.get_and_fill_listview_with_data(Controller_Build = LatestBuild)
        index = self.ui.comboBox_2.findText(LatestBuild, QtCore.Qt.MatchFixedString)
        if index >= 0:
            self.ui.comboBox_2.setCurrentIndex(index)


        self.ui.progressBar.hide()
        #self.ui.showFullScreen()
        #self.ui.show()
        self.get_and_update_missing_scripts()
        self.ui.showMaximized()
        self.ui.listView.selectionModel().selectionChanged.connect(self.list_view_selection_changed)
        self.ui.textEdit.verticalScrollBar().setValue(0)
        self.ui.textEdit_2.verticalScrollBar().setValue(0)
        self.ui.textEdit.horizontalScrollBar().setValue(0)
        self.ui.textEdit_2.horizontalScrollBar().setValue(0)
        self.change_pull_date_label()
        self.change_refresh_date_label()


    def init_missing_scripts_build_combo(self):
        pass
        '''
        print(15)
        #self.ui.comboBox_5.se
        List_of_Controller_Builds = DataBase_Manager.get_list_of_controller_builds()
        # self.ui.comboBox_2.clear()
        #currentText = str(self.ui.comboBox_5.currentText())
        self.ui.comboBox_5.clear()
        for Controller_Build in List_of_Controller_Builds:
            self.ui.comboBox_5.addItem(Controller_Build)
        index = self.ui.comboBox_5.findText(currentText, QtCore.Qt.MatchFixedString)
        if index >= 0:
            self.ui.comboBox_5.setCurrentIndex(index)
        else:
            self.ui.comboBox_5.setCurrentIndex(0)
        '''






    def change_pull_date_label(self):
        #(16)
        from datetime import datetime
        now = datetime.now()
        self.ui.label_18.setText(str(now.strftime("%m/%d     %H:%M")))


    def change_refresh_date_label(self):
        #print(17)
        from datetime import datetime
        now = datetime.now()
        self.ui. label_28.setText(str(now.strftime("%m/%d     %H:%M")))




    def pull_database(self):
        #print(18)
        self.change_pull_date_label()


        ##Database_Folder = Variable_File_Getter.getVariableFromFile('Database_Folder')
        from paths import Database_Folder
        Database_Folder = Database_Folder
        DataBase_Manager.pull_databases_local_and_return_path(Database_Folder)
        self.refresh_button_was_clicked()


    def combo_station_selected_has_changed(self):
        #print(19)
        #print('Combo HAS CHANGED')
        ################################Scripts#####################################
        Station_Name = self.ui.comboBox_4.currentText()
        if Station_Name == 'All':
            Station_Name = '%'
        List_of_Scripts = DataBase_Manager.get_list_of_all_scripts(Station_Name = Station_Name)


        ######################################################
        currentText = str(self.ui.comboBox_3.currentText())
        #self.ui.comboBox_3.clear()
        self.ui.comboBox_3.addItem('All')
        for i in List_of_Scripts:
            self.ui.comboBox_3.addItem(i)
        ######################################################################
        index = self.ui.comboBox_3.findText(currentText,QtCore.Qt.MatchFixedString)
        if index >= 0:
            #print('YEsssssssssssssssssssss ->',index)
            #print(currentText)
            self.ui.comboBox_3.setCurrentIndex(index)
        else:
            #print('No')
            #print(currentText)
            self.ui.comboBox_3.setCurrentIndex(0)




    def fail_and_play_video_button_clicked(self):
        #print(20)
        import subprocess
        # print("Update_Action_Clicked")
        # os.system(r"C:\ImageScripter_2\Scripts\dist\Reset_Image_Scripter_2.exe")
        subprocess.Popen(r"C:\ImageScripter_3\python.exe C:\ImageScripter_3\Lib\site-packages\imagescripter\core\Duel_Video_Player.py", shell=True)
        # from imagescripter.core.Duel_Video_Player import Duel_Video_Player_Class
        #fail_video = r'C:\Elan_Tools\Cloud_Drive\Videos_For_Database\FrankPC_Station__16_PC_IR__8.3.499.215__Fail__21752x.avi'
        #pass_video = r"C:\Elan_Tools\Cloud_Drive\Videos_For_Database\FrankPC_Station__16_PC_IR__8.3.499.216__Pass__x.avi"
        #player = Duel_Video_Player_Class(fail_video, pass_video)
        #player.resize(640, 480)
        #player.show()
        #player.showMaximized()




    def ignore_was_clicked(self):
        #print(21)
        #print('Ignore Clicked')
        try:
            quit_msg = "Are you sure you want to ignore this error until its next occurrence?\n\n" + self.Fail_Video
            reply = QMessageBox.question(self, 'Message',
                                               quit_msg, QMessageBox.Yes, QMessageBox.No)
            if reply == QMessageBox.Yes:
                #print('Yes was Clicked')
                #if not self.Fail_Video.endswith('.avi'):
                #self.Fail_Video = self.Fail_Video + '.avi'
                #self.Fail_Video = self.Fail_Video.replace(' ', '')
                #print('Fail Video = ',self.Fail_Video)
                #Failerr = """C:\Elan_Tools\Cloud_Drive\Videos_For_Database\Quick_Tests__43___aTV_Media_Script__8.3.502.1__Fail__2192216963072821924310622662738x.avi"""
                #print('Fail Video = ',self.Fail_Video)
                #print('#############')
                #self.Fail_Video = Failerr
                #print('#############')



                #self.Fail_Video2 = """C:\Elan_Tools\Cloud_Drive\Videos_For_Database\FrankPC_Station__31_PC_DVR__8.3.502.1__Fail__21912831451292x.avi"""
                #print("Fail2Video = ",self.Fail_Video2)
                DataBase_Manager.Set_Entry_To_Ignore(self.Fail_Video)

                #if not self.Fail_Video.endswith('.avi'):
                #    self.Fail_Video = self.Fail_Video + '.avi'
                #self.Fail_Video = self.Fail_Video.replace(' ', '')
            else:
                print('Not Clicked ',reply)
        except Exception as e:
            print(e)



    def remove_ignore_was_clicked(self):
        #print(22)
        #print('Ignore Clicked')
        try:
            quit_msg = "Are you sure you want to remove ignore flag?\n\n" + self.Fail_Video
            reply = QMessageBox.question(self, 'Message',
                                               quit_msg, QMessageBox.Yes, QMessageBox.No)
            if reply == QMessageBox.Yes:
                #print('Yes was Clicked')
                #if not self.Fail_Video.endswith('.avi'):
                #self.Fail_Video = self.Fail_Video + '.avi'
                #self.Fail_Video = self.Fail_Video.replace(' ', '')
                #print('Fail Video = ',self.Fail_Video)
                #self.Fail_Video2 = """C:\Elan_Tools\Cloud_Drive\Videos_For_Database\FrankPC_Station__31_PC_DVR__8.3.502.1__Fail__21912831451292x.avi"""
                #print("Fail2Video = ",self.Fail_Video2)
                DataBase_Manager.Remove_Ignore_From_Entry(self.Fail_Video)
            else:
                print('Not Clicked ',reply)
        except Exception as e:
            print(e)











    def Delete_Past_Fail_Video(self):
        #print(23)
        try:
            quit_msg = "Are you sure you want to delete the last past fail video?"
            reply = QMessageBox.question(self, 'Message',
                                               quit_msg, QMessageBox.Yes, QMessageBox.No)

            if reply == QMessageBox.Yes:
                print("Deleting_Past_Fail_Video")
                if not self.Fail_Video.endswith('.avi'):
                    self.Fail_Video = self.Fail_Video + '.avi'
                    self.Fail_Video = self.Fail_Video.replace(' ', '')
                Video_Name = os.path.basename(self.Fail_Video)
                print('Deleting File')
                os.remove(self.Fail_Video)
                print('File Deleted -> ',self.Fail_Video)
        except Exception as e:
            print(e)


    def Export_ScreenShot_To_Desktop(self):
        #print(24)
        try:
            quit_msg = "Are you sure you want to export the screenshot to your desktop? \n This will overwrite the last image"
            reply = QMessageBox.question(self, 'Question',
                                               quit_msg, QMessageBox.Yes, QMessageBox.No)
            if reply == QMessageBox.Yes:
                print("Exporting Screen Shot To Desktop")
                Desktop_Path = os.path.join(os.environ["HOMEPATH"], "Desktop") + '\\'
                imgdata = base64.b64decode(self.screen_shot)
                with open(Desktop_Path + 'Screenshot.png', 'wb') as f:
                    f.write(imgdata)
        except Exception as e:
            print(e)




    def Export_Fail_Video_To_Desktop(self):
        #print(25)
        try:
            quit_msg = "Are you sure you want to export fail video to your desktop?"
            reply = QMessageBox.question(self, 'Message',
                                               quit_msg, QMessageBox.Yes, QMessageBox.No)
            if reply == QMessageBox.Yes:
                print("Exporting Fail Video To Desktop")
                Desktop_Path = os.path.join(os.environ["HOMEPATH"], "Desktop") + '\\'

                if not self.Fail_Video.endswith('.avi'):
                    self.Fail_Video = self.Fail_Video + '.avi'
                    self.Fail_Video = self.Fail_Video.replace(' ', '')
                Video_Name = os.path.basename(self.Fail_Video)
                print('Copying File')
                shutil.copyfile(self.Fail_Video,Desktop_Path + Video_Name)
                print('File Copied -> ',Desktop_Path + Video_Name)
        except Exception as e:
            print(e)








    def Update_Action_Clicked(self):
        #print(26)
        import subprocess
        ##Reset_Image_Scripter_2exe = r"C:\ImageScripter_2\Scripts\dist\Reset_Image_Scripter_2.exe"
        ##subprocess.Popen(r"C:\ImageScripter_2\Scripts\dist\Reset_Image_Scripter_2.exe", shell=True)
        subprocess.Popen(Reset_Image_Scripter_2exe, shell=True)

    def Browse_for_database_folder(self):
        #print(27)
        print('needs work')

        '''
        print('Browse for database folder')
        lastdir = os.getcwd()
        txt = ''
        ##os.chdir(Variable_File_Getter.getVariableFromFile('Database_Folder'))
        os.chdir(Database_Folder)
        txt = QFileDialog.getExistingDirectory(self, 'Select directory')
        if txt != '':
            Variable_File_Getter.setFileFromVariable('Database_Folder',txt)
            self.ui.lineEdit.setText(txt)
        os.chdir(lastdir)
        '''


    def get_and_update_missing_scripts(self):
        #print(28)
        self.ui.textEdit.verticalScrollBar().setValue(0)
        #print(1)
        self.ui.textEdit_2.verticalScrollBar().setValue(0)
        #print(2)
        self.ui.textEdit.horizontalScrollBar().setValue(0)
        #print(3)
        self.ui.textEdit_2.horizontalScrollBar().setValue(0)
        #print(4)
        ################################################################################Normal Missing

        self.ui.textEdit.setText('')
        self.ui.textEdit_2.setText('')
        #self.ui.textEdit_3.setText('')
        selected_Build = self.ui.comboBox_2.currentText()
        #print(5)
        if selected_Build == 'Any':
            selected_Build = '%'
        #print(6)
        Scripts = DataBase_Manager.get_missing_scripts(Controller_Build=selected_Build)
        #print(7)
        Scripts_Count = str(len(Scripts))
        #print(8)
        Completed_Scripts = DataBase_Manager.get_completed_scripts(Controller_Build=selected_Build)
        #print(9)
        Completed_Scripts_Count = str(len(Completed_Scripts))

        #print(10)

        String = 'Missing Scripts (' + Scripts_Count + ')\n\n'
        #print(11)
        self.ui.textEdit.setAlignment(Qt.AlignLeft)
        #print(12)
        self.ui.textEdit.append(String)
        #print(13)
        for i in sorted(Scripts):
            #print(14)
            self.ui.textEdit.setAlignment(Qt.AlignLeft)
            #print(i)
            self.ui.textEdit.append(i)
            #print(15)
        ###################################################Completed Scripts###################################
        String = 'Completed Scripts (' + Completed_Scripts_Count + ')\n\n'
        #print(16)
        self.ui.textEdit_2.setAlignment(Qt.AlignLeft)
        #print(17)
        self.ui.textEdit_2.append(String)
        #print(18)
        for i in sorted(Completed_Scripts):
            #print(19)
            self.ui.textEdit_2.setAlignment(Qt.AlignLeft)
            #print(20)
            self.ui.textEdit_2.append(i)
            #print(21)
        ######################################################Missing compared to last build
        #######################################################################################

        #selected_Build = self.ui.comboBox_2.currentText()
        #if selected_Build == 'Any':
        #    selected_Build = '%'
        Scripts = DataBase_Manager.get_missing_scripts_compared_to_last_build(Controller_Build=selected_Build)
        #print(22)
        Scripts_Count = str(len(Scripts))
        #print(23)
        Completed_Scripts = DataBase_Manager.get_completed_scripts(Controller_Build=selected_Build)
        print(selected_Build)
        #print(24)
        Completed_Scripts_Count = str(len(Completed_Scripts))
        #print(25)
        String = 'Missing Scripts Compared To last Build (' + Scripts_Count + ')\n\n'
        #print(26)
        #self.ui.textEdit_3.setAlignment(Qt.AlignLeft)
        #print(27)
        #self.ui.textEdit_3.append(String)
        #print(28)
        #for i in sorted(Scripts):
            #print(29)
            #self.ui.textEdit_3.setAlignment(Qt.AlignLeft)
            #self.ui.textEdit_3.append(i)
            #print(30)














        self.ui.textEdit.verticalScrollBar().setValue(0)
        #print(31)
        self.ui.textEdit_2.verticalScrollBar().setValue(0)
        self.ui.textEdit.horizontalScrollBar().setValue(0)
        #print(32)
        self.ui.textEdit_2.horizontalScrollBar().setValue(0)
        #print(33)





    def missing_scripts_was_clicked(self):
        #print(29)
        self.get_and_update_missing_scripts()
        self.ui.stackedWidget.setCurrentIndex(1)
        self.ui.stackedWidget_2.setCurrentIndex(1)


    def fail_video_button_was_clicked(self):
        #print(30)
        print("fail_video_button_was_clicked -> ",self.Fail_Video)
        try:
            if not self.Fail_Video.endswith('.avi'):
                self.Fail_Video = self.Fail_Video + '.avi'
                self.Fail_Video = self.Fail_Video.replace(' ', '')
            print(self.Fail_Video)
            os.system(self.Fail_Video)
        except Exception as e:
            print(e)


    def open_script_button_was_clicked(self):
        #print(31)
        print(self.Script_Name)
        #os.system()




        #pass
        #print("fail_video_button_was_clicked -> ",self.Fail_Video)
        ##    if not self.Fail_Video.endswith('.avi'):
        #        self.Fail_Video = self.Fail_Video + '.avi'
        #        self.Fail_Video = self.Fail_Video.replace(' ', '')
        #    os.system(self.Fail_Video)
        #except Exception as e:
         #   print(e)



    def Pass_Only_Entry_Pass_Video_Was_Clicked(self):
        #print(32)
        print("pass_Video_button_was_clicked -> ", self.Pass_Video)
        os.system(self.Pass_Video)




    def pass_video_button_was_clicked(self):
        #print(33)
        try:
            if self.Was_a_fail == False:
                print("pass_Video_button_was_clicked -> ", self.Pass_Video)
                os.system(self.Pass_Video)
            elif self.Was_a_fail == True:
                Pass_Video_List = self.Fail_Video.split('__Fail__')
                pass_Video = Pass_Video_List[0]
                pass_Video = pass_Video + '__Pass__'
                print("pass_Video_button_was_clicked -> ",pass_Video)
                try:
                    if not pass_Video.endswith('.avi'):
                        pass_Video = pass_Video + 'x.avi'
                        pass_Video = pass_Video.replace(' ', '')
                    #print(pass_Video)
                    print(pass_Video)
                    os.system(pass_Video)

                except Exception as e:
                    try:
                        if not pass_Video.endswith('.avi'):
                            pass_Video = pass_Video + '.avi'
                            pass_Video = pass_Video.replace(' ', '')
                        #print(pass_Video)
                        os.system(pass_Video)
                    except Exception as e:
                        print(e)
        except Exception as e:
            print(e)



    def refresh_combo_boxes_with_new_data(self):
        #print(34)



        ################################BUILDS#####################################
        List_of_Controller_Builds = DataBase_Manager.get_list_of_controller_builds()
        #self.ui.comboBox_2.clear()
        currentText = str(self.ui.comboBox_2.currentText())
        self.ui.comboBox_2.clear()
        self.ui.comboBox_2.addItem('Any')
        for Controller_Build in List_of_Controller_Builds:
            self.ui.comboBox_2.addItem(Controller_Build)
        index = self.ui.comboBox_2.findText(currentText,QtCore.Qt.MatchFixedString)
        if index >= 0:
            self.ui.comboBox_2.setCurrentIndex(index)
        else:
            self.ui.comboBox_2.setCurrentIndex(0)





        ################################Stations#####################################
        List_of_Stations = DataBase_Manager.get_list_of_all_stations()
        #self.ui.comboBox_4.clear()
        currentText = str(self.ui.comboBox_4.currentText())
        self.ui.comboBox_4.clear()
        self.ui.comboBox_4.addItem('All')
        for i in List_of_Stations:
            self.ui.comboBox_4.addItem(i)
        ######################################################################
        index = self.ui.comboBox_4.findText(currentText,QtCore.Qt.MatchFixedString)
        if index >= 0:
            self.ui.comboBox_4.setCurrentIndex(index)
        else:
            self.ui.comboBox_4.setCurrentIndex(0)


        ################################Scripts#####################################
        Station_Name = self.ui.comboBox_4.currentText()
        if Station_Name == 'All':
            Station_Name = '%'
        List_of_Scripts = DataBase_Manager.get_list_of_all_scripts(Station_Name = Station_Name)
        currentText = str(self.ui.comboBox_3.currentText())
        self.ui.comboBox_3.clear()
        self.ui.comboBox_3.addItem('All')
        for i in List_of_Scripts:
            self.ui.comboBox_3.addItem(i)
        ######################################################################
        index = self.ui.comboBox_3.findText(currentText,QtCore.Qt.MatchFixedString)
        if index >= 0:
            self.ui.comboBox_3.setCurrentIndex(index)
        else:
            self.ui.comboBox_3.setCurrentIndex(0)










    def refresh_button_was_clicked(self):
        #print(35)
        #print("refresh_button_was_clicked")
        try:
            self.change_refresh_date_label()
            self.ui.progressBar.show()
            self.ui.progressBar.setValue(1)
            self.refresh_combo_boxes_with_new_data()
            self.get_and_update_missing_scripts()
            #####################################
            self.ui.stackedWidget.setCurrentIndex(1)
            self.ui.stackedWidget_2.setCurrentIndex(1)
            ###################PASS OR FAIL#############################
            Pass_Fail_All_Selection = self.ui.comboBox.currentText()
            if Pass_Fail_All_Selection == 'Fail':
                DidPass = 'False'
            elif Pass_Fail_All_Selection == 'Pass':
                DidPass = 'True'
            elif Pass_Fail_All_Selection == 'All':
                DidPass = '%'



            ###################Build#############################
            Controller_Build_Selection = self.ui.comboBox_2.currentText()
            if Controller_Build_Selection == 'Any':
                Controller_Build_Selection = '%'


            ###################Station_Name#######################
            Station_Name = self.ui.comboBox_4.currentText()
            if  Station_Name == 'All':
                Station_Name = '%'

            ###################Script_Name#######################
            Script_Name = self.ui.comboBox_3.currentText()
            if  Script_Name == 'All':
                Script_Name = '%'

            self.get_and_fill_listview_with_data(Pass = DidPass,Controller_Build = Controller_Build_Selection,Station_Name = Station_Name,Script_Name = Script_Name)

            self.ui.listView.selectionModel().selectionChanged.connect(self.list_view_selection_changed)
        except Exception as e:
            print(e)


    def Get_And_Diplay_Drive_Space(self):
        #print(36)
        import os
        import math

        ##Elan_ToolsCloud_Drive = r"C:\Elan_Tools\Cloud_Drive"

        path = REPORTS_LOCATION
        def convert_size(size_bytes):
            #print(37)
            if size_bytes == 0:
                return "0B"
            size_name = ("B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB")
            i = int(math.floor(math.log(size_bytes, 1024)))
            p = math.pow(1024, i)
            s = round(size_bytes / p, 2)
            # return "%s %s" % (s, size_name[i])
            return s
        def get_size(start_path=path):
            raise ValueError('Broken')
            #print(38)
            total_size = 0
            for dirpath, dirnames, filenames in os.walk(start_path):
                for f in filenames:
                    fp = os.path.join(dirpath, f)
                    total_size += os.path.getsize(fp)
            return convert_size(total_size)
        #s = get_size()
        self.ui.label_36.setText('')
        #self.ui.label_36.setText(str(s) + ' / 465 GB')












    def get_and_fill_listview_with_data(self,Pass = "False",Controller_Build = '%',Station_Name = '%',Script_Name = '%'):
        #print(39)
        #print(1)
        self.Get_And_Diplay_Drive_Space()




        #print("Station Name ",Station_Name)
        #print("Script ",Script_Name)
        #print("get_and_fill_listview_with_data")





        self.get_and_update_missing_scripts()
        #####################################
        self.ui.stackedWidget.setCurrentIndex(1)
        self.ui.stackedWidget_2.setCurrentIndex(1)
        #print('get_and_fill_listview_with_data')

        #Data = DataBase_Manager.get_data_from_databases(Target='Index_Time,Index_Time_String,Pass,Script_End_Time,Date,Station_Name,Script_Name,Controller_Build',Pass = Pass,Controller_Build = Controller_Build)


        Data = DataBase_Manager.get_data_from_databases(Target='Index_Time,Index_Time_String,Ignore,Fail_Video,Pass,Station_Name,Script_Name,Controller_Build',Pass = Pass,Controller_Build = Controller_Build,Station_Name = Station_Name,Script_Name = Script_Name)
        self.model = QStandardItemModel()
        List_OF_List = []

        #if self.ui.radioButton_2.isChecked():
        if self.ui.checkBox_2.isChecked():
            for entry in Data:
                entry = list(entry)
                #print('Entry ', entry)
                List_OF_List.append(entry)
        else:
            for entry in Data:
                entry = list(entry)
                should_ignore = entry[2]
                if should_ignore != 'True':
                    List_OF_List.append(entry)







        List_OF_List.sort(key=lambda x: x[0])
        Length_of_list = len(List_OF_List)

        ProgressIndex = 1
        self.ui.progressBar.setValue(1)
        self.ui.progressBar.setMaximum(Length_of_list)
        self.ui.progressBar.setMinimum(1)
        List_to_see_if_already_added = []
        for display_entry in reversed(List_OF_List):
            self.ui.progressBar.setValue(ProgressIndex)
            ProgressIndex += 1
            Custom_Standard_Item = Custom_StandardItem_Class()
            Custom_Standard_Item.Index_Time_String = display_entry[1]
            display_entry.pop(0)
            display_entry.pop(0)
            display_entry.pop(0)#Ignore
            Fail_Video = str(display_entry[0])
            import re
            Fail_Video = re.sub("[^0-9]", "",Fail_Video)
            display_entry.pop(0)#Fail_Video
            display_entry.append(Fail_Video)
            display_entry_string = str(display_entry)
            display_entry_string = display_entry_string.replace('True',' PASS ')
            display_entry_string = display_entry_string.replace('False','-FAIL-')
            display_entry_string = display_entry_string.replace("'",'')
            display_entry_string = display_entry_string.replace('[','')
            display_entry_string = display_entry_string.replace(']','')
            display_entry_string = display_entry_string.replace(',',' ')
            Custom_Standard_Item.setText(display_entry_string)
            #if self.ui.radioButton.isChecked():#UNIQUE IS ENAbled so hide repeat
            if self.ui.checkBox.isChecked():#UNIQUE
                if display_entry not in List_to_see_if_already_added:
                    List_to_see_if_already_added.append(display_entry)
                    self.model.appendRow(Custom_Standard_Item)
                pass
            else:
                self.model.appendRow(Custom_Standard_Item)

        self.ui.label_29.setText("Total = " + str(self.model.rowCount() ))

        for i in range(30):
            Custom_Standard_Item = Custom_StandardItem_Class()
            Custom_Standard_Item.setText('')
            self.model.appendRow(Custom_Standard_Item)




        self.ui.progressBar.hide()
        self.ui.listView.setModel(self.model)
        self.ui.progressBar.setValue(0)

    def set_Station_Name_Label(self,str):
        #print(2)
        self.ui.label.setText(str)

    def set_Script_Name_Label(self,str):
        #print(3)
        self.ui.label_2.setText(str)

    def set_Client_Type_Label(self,str):
        #print(4)
        #if str == 'None':
        #    self.ui.label_3.setText(str)
        #else:
        self.ui.label_3.setText('PC')

    def set_Build_Label(self,str):
        #print(5)
        self.ui.label_4.setText(str)

    def set_Templet_Img_Label(self,templet_image):
        #print(6)
        try:
            ##Failure_images_Folder = Variable_File_Getter.getVariableFromFile("Error_Images_Folder_Location")
            Failure_images_Folder = Error_Images_Folder_Location
            curdur = os.getcwd()
            os.chdir(Failure_images_Folder)
            try:
                pixmap_of_templet = QPixmap(templet_image)
            except TypeError as e:
                imgdata = base64.b64decode(templet_image)
                with open('temp.png', 'wb') as f:
                    f.write(imgdata)
                pixmap_of_templet = QPixmap('temp.png')
            #pixmap_of_templet = pixmap_of_templet.scaled(300 / 2, 200 / 2, QtCore.Qt.KeepAspectRatio,QtCore.Qt.FastTransformation)

            Width = GetSystemMetrics(0)
            Height = GetSystemMetrics(1)
            pixmap_of_templet = pixmap_of_templet.scaled(Width / 2, Height / 2, QtCore.Qt.KeepAspectRatio)
            self.ui.label_6.setPixmap(pixmap_of_templet)


        except Exception as e:
            print(e)



    def set_Target_Img_Label(self,Target_image):
        #print(7)
        try:
            ##Failure_images_Folder = Variable_File_Getter.getVariableFromFile("Error_Images_Folder_Location")
            Failure_images_Folder = Error_Images_Folder_Location
            curdur = os.getcwd()
            os.chdir(Failure_images_Folder)
            try:
                pixmap_of_Target = QPixmap(Target_image)
            except TypeError as e:
                imgdata = base64.b64decode(Target_image)
                with open('temp.png', 'wb') as f:
                    f.write(imgdata)
                pixmap_of_Target = QPixmap('temp.png')
            #pixmap_of_Target = pixmap_of_Target.scaled(300 / 2, 200 / 2, QtCore.Qt.KeepAspectRatio,QtCore.Qt.FastTransformation)
            self.ui.label_5.setPixmap(pixmap_of_Target)
        except Exception as e:
            print(e)




    def Date_Note(self):
        from datetime import date
        today = self.get_date_and_time()
        notes_txt = self.ui.plainTextEdit.toPlainText()
        notes_txt = today + '\n' + notes_txt
        self.ui.plainTextEdit.setPlainText(notes_txt)

    def get_date_and_time(self):
        from datetime import datetime
        now = datetime.now()
        dt_string = now.strftime("%m/%d/%Y %H:%M:%S")
        return dt_string



    def Pass_Note(self):
        from datetime import date
        today = self.get_date_and_time()
        notes_txt = self.ui.plainTextEdit.toPlainText()
        notes_txt = 'PASSED -> ' + today + '\n' + notes_txt
        self.ui.plainTextEdit.setPlainText(notes_txt)


    def Fail_Note(self):
        from datetime import date
        today = self.get_date_and_time()
        notes_txt = self.ui.plainTextEdit.toPlainText()
        notes_txt = 'Failed, NEED TO FIX -> ' + today + '\n' + notes_txt
        self.ui.plainTextEdit.setPlainText(notes_txt)



    def Fixed_Note(self):
        from datetime import date
        today = self.get_date_and_time()
        notes_txt = self.ui.plainTextEdit.toPlainText()
        notes_txt = 'I Fixed This Script -> ' + today + '\n' + notes_txt
        self.ui.plainTextEdit.setPlainText(notes_txt)




    def Keep_An_Eye_On_Note(self):
        from datetime import date
        today = self.get_date_and_time()
        notes_txt = self.ui.plainTextEdit.toPlainText()
        notes_txt = 'Failed, NEED TO KEEP AN EYE ON -> ' + today + '\n' + notes_txt
        self.ui.plainTextEdit.setPlainText(notes_txt)



    def Save_Note(self):
        #print(8)
        try:
            quit_msg = "Are you sure you want to save the note?"
            reply = QMessageBox.question(self, 'Message',
                                               quit_msg, QMessageBox.Yes, QMessageBox.No)
            if reply == QMessageBox.Yes:
                print("Saveing Note")
                notes_txt = self.ui.plainTextEdit.toPlainText()
                error_id = self.Error_ID
                if error_id != 'None':
                    DataBase_Manager.Save_Note_Into_Database(notes_txt, error_id)
                print("Note Saved")
        except Exception as e:
            print(e)


    def list_view_selection_changed(self):
            #print(9)
            print("list_view_selection_changed(self)")
            try:
                self.ui.label_14.setText('This Error Count: ' + 'N/A')
                self.ui.label_15.setText('Script Pass Count: ' + str('N/A'))
                self.ui.label_26.setText('Script Fail Count: ' + str('N/A'))
                self.ui.label_27.setText('Total Runs: ' + str('N/A'))





                self.Was_a_fail = None
                selected_index = self.ui.listView.selectedIndexes()[0]
                selected_item_object = self.model.itemFromIndex(selected_index)
                index_time_string = selected_item_object.Index_Time_String
                entry = DataBase_Manager.get_entry_fron_Index_Time_String(index_time_string)
                #Index_Time = entry[0]
                Date = entry[1]
                self.ui.label_16.setText(Date)
                Script_Start_Time = entry[2]
                List = Script_Start_Time.split(':')
                Script_Start_Time = ''
                for i in List:
                    if len(i) == 1:
                        i = '0' + i
                    Script_Start_Time =  Script_Start_Time + i + ':'
                Script_Start_Time = Script_Start_Time.strip(':')
                self.ui.label_8.setText(Script_Start_Time)
                Script_End_Time = entry[3]
                List = Script_End_Time.split(':')
                Script_End_Time = ''
                for i in List:
                    if len(i) == 1:
                        i = '0' + i
                    Script_End_Time = Script_End_Time + i + ':'
                Script_End_Time = Script_End_Time.strip(':')
                self.ui.label_9.setText(Script_End_Time)
                Run_Time = get_run_time(entry[2],entry[3])
                self.ui.label_3.setText(str(Run_Time))
                self.Script_Name = entry[6]
                self.set_Station_Name_Label(entry[4])
                Controller_Name = entry[5]
                self.set_Script_Name_Label(entry[6])
                self.set_Build_Label(entry[7])
                self.Pass = entry[8]
                Fail = entry[9]
                Skip = entry[10]
                Error = entry[11]
                self.Error_ID = entry[15]

                Memory_In_Use_Start = entry[22]
                List = Memory_In_Use_Start.split('.')

                try:
                    afterdot = List[1][0]
                    #Memory_In_Use_Start = List[0] + '.' + afterdot + '%' + Memory_In_Use_Start
                    Memory_In_Use_Start = List[0] + '.' + afterdot + '%'
                    self.ui.label_32.setText(Memory_In_Use_Start)
                except:
                    self.ui.label_32.setText('Couldnt get memory')




                Memory_In_Use_End = entry[23]
                List = Memory_In_Use_End.split('.')
                try:
                    afterdot = List[1][0]

                    #Memory_In_Use_End = List[0] + '.' + afterdot + '%' + Memory_In_Use_End
                    Memory_In_Use_End = List[0] + '.' + afterdot + '%'
                    self.ui.label_35.setText(Memory_In_Use_End)
                except:
                    self.ui.label_35.setText('Couldnt get memory')







                self.Error_ID = self.Error_ID.replace("'", '')
                self.Error_ID = self.Error_ID.replace('"', '')
                Ignore = entry[17]
                self.Fail_Video = entry[18]
                Steps = entry[14]


                if self.Pass == 'True':
                    self.Was_a_fail = False
                    self.ui.label_17.setText('PASS')
                    self.Pass_Video = entry[19]
                    self.Pass_Video = self.Pass_Video.replace(' ', '')
                    self.ui.stackedWidget.setCurrentIndex(2)
                    #self.ui.stackedWidget_2.setCurrentIndex(2)
                    #self.ui.stackedWidget.setCurrentIndex(0)
                    #self.ui.stackedWidget_2.setCurrentIndex(2)
                    self.ui.stackedWidget_2.setCurrentIndex(0)
                    #self.ui.label_14.hide()
                    #self.ui.label_15.hide()
                    #self.ui.label_18.hide()
                    self.ui.pushButton.setDisabled(True)
                    self.ui.pushButton_16.setDisabled(True)
                    self.ui.pushButton_8.setDisabled(True)
                    self.ui.pushButton_9.setDisabled(True)
                    self.ui.pushButton_7.setDisabled(True)
                    self.ui.pushButton_12.setDisabled(True)
                    self.ui.pushButton_3.setDisabled(True)
                    self.ui.plainTextEdit.setDisabled(True)
                    self.ui.plainTextEdit.setPlainText('')
                    Fail_Error_Amount = DataBase_Manager.Count(self.Fail_Video)
                    Pass_Amount = DataBase_Manager.get_count_of_passes_with_script_for_specific_build(entry[7],
                                                                                                      entry[6])
                    Fail_Amount = DataBase_Manager.get_count_of_failure_with_script_for_specific_build(entry[7],
                                                                                                       entry[6])
                    total = Fail_Amount + Pass_Amount
                    # Average_Fail = round((Fail_Error_Amount / total) * 100)
                    Average_Fail = '    (' + str(round((Fail_Amount / total) * 100)) + '%) '
                    Average_Pass = '    (' + str(round((Pass_Amount / total) * 100)) + '%) '
                    Average_This_Error = '    (N/A)'
                    # self.ui.label_18.setText(str(Average_Fail) + '% Fail')
                    self.ui.label_14.setText('This Error Count: ' + Average_This_Error)
                    self.ui.label_15.setText('Script Pass Count: ' + str(Pass_Amount) + Average_Pass)
                    self.ui.label_26.setText('Script Fail Count: ' + str(Fail_Amount) + Average_Fail)
                    self.ui.label_27.setText('Total Runs: ' + str(total))
                    self.Fail_Video = self.Fail_Video.replace(' ', '')
                    self.Pass_Video = entry[19]
                    self.Pass_Video = self.Pass_Video.replace(' ', '')
                    Client = entry[20]
                    # self.set_Client_Type_Label(Client)

                else:
                    self.Was_a_fail = True
                    #self.ui.label_14.show()
                    #self.ui.label_15.show()
                    #self.ui.label_18.show()
                    self.ui.pushButton.setDisabled(False)
                    self.ui.pushButton_16.setDisabled(False)
                    self.ui.pushButton_8.setDisabled(False)
                    self.ui.pushButton_9.setDisabled(False)
                    self.ui.pushButton_7.setDisabled(False)
                    self.ui.pushButton_12.setDisabled(False)
                    self.ui.pushButton_3.setDisabled(False)
                    self.ui.plainTextEdit.setDisabled(False)
                    self.ui.label_17.setText('FAIL')
                    self.ui.stackedWidget.setCurrentIndex(0)
                    self.ui.stackedWidget_2.setCurrentIndex(0)
                    self.ui.plainTextEdit_4.setPlainText(Error)
                    self.set_Target_Img_Label(entry[12])
                    self.set_Templet_Img_Label(entry[13])
                    self.screen_shot = entry[13]
                    self.ui.plainTextEdit_2.setPlainText(Steps)
                    Notes = DataBase_Manager.Get_Notes_For_An_Error_From_Notes_Database(self.Error_ID)
                    self.ui.plainTextEdit.setPlainText(Notes)
                    # print(self.Fail_Video)
                    Fail_Error_Amount = DataBase_Manager.Count(self.Fail_Video)
                    Pass_Amount = DataBase_Manager.get_count_of_passes_with_script_for_specific_build(entry[7],entry[6])
                    Fail_Amount = DataBase_Manager.get_count_of_failure_with_script_for_specific_build(entry[7],entry[6])
                    total = Fail_Amount + Pass_Amount
                    #Average_Fail = round((Fail_Error_Amount / total) * 100)
                    Average_Fail = '    (' + str(round((Fail_Amount / total) * 100)) + '%) '
                    Average_Pass = '    (' + str(round((Pass_Amount / total) * 100)) + '%) '
                    Average_This_Error = '  (' + str(round((Fail_Error_Amount / total) * 100)) + '%) '
                    #self.ui.label_18.setText(str(Average_Fail) + '% Fail')
                    self.ui.label_14.setText('This Error Count: ' + str(Fail_Error_Amount) + Average_This_Error)
                    self.ui.label_15.setText('Script Pass Count: ' + str(Pass_Amount) + Average_Pass)
                    self.ui.label_26.setText('Script Fail Count: ' + str(Fail_Amount) + Average_Fail)
                    self.ui.label_27.setText('Total Runs: ' + str(total))
                    self.Fail_Video = self.Fail_Video.replace(' ', '')
                    self.Pass_Video = entry[19]
                    self.Pass_Video = self.Pass_Video.replace(' ', '')
                    Client = entry[20]
                    # self.set_Client_Type_Label(Client)









                    


            except:
                error_message = traceback.format_exc()
                print(error_message)








if __name__ == '__main__':
    try:
        app = QApplication(sys.argv)
        Database_Viewer = Database_Viewer_Class()
        sys.exit(app.exec_())
    except Exception as e:
        raise
        e = str(e)
        import ctypes
        ctypes.windll.user32.MessageBoxW(0, e, 'Error', 0)
