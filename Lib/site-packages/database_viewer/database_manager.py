import sqlite3
import os
from variable_file_getter import Variable_File_Getter
import os
from glob import glob
from datetime import date
import calendar
import datetime
import time
import re


def natural_keys(text):
    return [atoi(c) for c in re.split('(\d+)', text)]


def atoi(text):
    return int(text) if text.isdigit() else text


class DataBase_Manager_Class():
    def __init__(self,database_folder):
        self.DatabasseFoler = database_folder


    def get_names_of_all_databases_list(self):
        names_of_all_databases = os.listdir(self.DatabasseFoler)
        return names_of_all_databases



    def get_entry_fron_Index_Time_String(self,Index_Time_String):
        entries = self.get_data_from_databases(Index_Time_String = Index_Time_String)
        print('###########')
        print(Index_Time_String)
        print('############')
        entryTup = entries[0]
        entry = list(entryTup)
        return entry


























    def get_entry_fron_Error_ID(self,error_id):
        entries = self.get_data_from_databases(Error_ID = error_id)
        entryTup = entries[0]
        entry = list(entryTup)
        return entry


    def get_list_of_controller_builds(self):
        print('get_list_of_controller_builds')
        Data = DataBase_Manager.get_data_from_databases(Target='Controller_Build')
        Data = [i[0] for i in Data]
        aList = list(set(Data))
        return aList

    def get_latest_controller_build(self):
        print('get_list_of_controller_builds')
        Data = DataBase_Manager.get_data_from_databases(Target='Controller_Build')
        Data = [i[0] for i in Data]
        aList = list(set(Data))
        #aList = ['8.5.499.1','8.5.499.2','8.5.499.5','8.5.22.205','8.5.499.55']
        #aList = [i.replace('.','') for i in aList]
        #print(aList)
        aList.sort(key=natural_keys)
        return aList[-1]






    def get_list_of_all_availble_scripts(self):
        All_Script_Folder_Path = Variable_File_Getter.getVariableFromFile('All_Scripts_Folder_Location')
        lista = []
        list_of_scripts = []
        last_dur = os.getcwd()
        result = [y for x in os.walk(All_Script_Folder_Path) for y in glob(os.path.join(x[0], '*.py'))]
        for i in result:
            list_split_on_pools = i.split('Scripts')
            b = list_split_on_pools[-1]
            Application = b.split('\\')
            # Application = filter(None, Application)
            Application = Application[1]
            lista = i.split('\\')
            i = lista[-1]
            #i = i + '*' + Application
            list_of_scripts.append(i)
        return list_of_scripts




    def get_list_of_scripts_with_entries(self,Controller_Build):
        print('get_list_of_scripts_with_entries')
        Data = DataBase_Manager.get_data_from_databases(Target='Script_Name',Controller_Build = Controller_Build)
        Data = [i[0] for i in Data]
        aList = list(set(Data))
        return aList


    def get_missing_scripts(self,Controller_Build):
        print("Get Missing Scripts")
        Scripts_run = list(set(DataBase_Manager.get_list_of_scripts_with_entries(Controller_Build)))
        Scripts_run = [x.strip(' ') for x in Scripts_run]
        Scripts_run = [x.strip('.py') for x in Scripts_run]
        All_scipts = list(set(DataBase_Manager.get_list_of_all_availble_scripts()))
        All_scipts = [x.strip(' ') for x in All_scipts]
        All_scipts = [x.strip('.py') for x in All_scipts]
        Missing_Scripts = []
        for i in All_scipts:
            if i in Scripts_run:
                pass
                #print('In -> ',i)
            else:
                #print('Out -> ', i)
                Missing_Scripts.append(i)
        return Missing_Scripts










    def Get_Notes_For_An_Error_From_Notes_Database(self, error):
        NotesDatabasePath = Variable_File_Getter.getVariableFromFile('Notes_Database_Path')
        Notes = ''
        sqlite_file = NotesDatabasePath
        conn = sqlite3.connect(sqlite_file)
        c = conn.cursor()
        # command = "SELECT Notes FROM Reports WHERE Controller_Build like '" + self.Build + "' AND Error_ID = '" + error + "' AND Fail = '" + True1 + "'"
        command = "SELECT Notes FROM Reports WHERE Error_ID = '" + error + "'"
        # command = "SELECT Error FROM Reports WHERE Controller_Build = '" + self.Latest_Build + "' AND Error = '" + error + "'"
        #print(command)
        c.execute(command)
        rows = c.fetchall()
        # for row in rows:
        #   print(row)
        try:
            row = rows[-1]
        except:
            row = ' '
        return str(row[0])
        # return (str(Notes))


    def Save_Note_Into_Database(self,notes_txt,Error_ID):
        NotesDatabasePath = Variable_File_Getter.getVariableFromFile('Notes_Database_Path')
        now = datetime.datetime.now()
        DayOfMonth = now.strftime("%Y-%m-%d %H:%M")
        Index_Time = time.time()
        #Notes = self.ui.textEdit_3.toPlainText()

        def Enter_Note(Error_ID, Notes, Build,Index_Time):
            sqlite_file = NotesDatabasePath
            # Connecting to the dNtNbNse file
            conn = sqlite3.connect(sqlite_file)
            c = conn.cursor()
            N = 'N/A'
            c.execute('''INSERT INTO Reports(Index_Time,Error_ID, Notes, Build)
                                  VALUES(?,?,?,?)''',
                      (Index_Time,Error_ID, Notes, Build))
            # Committing chNnges Nnd closing the connection to the dNtNbNse file
            conn.commit()
            conn.close()

        Build = "N/A"
        Enter_Note(Error_ID, notes_txt, Build,Index_Time)



    def Count(self,Fail_Video = '%'):
        os.chdir(self.DatabasseFoler)
        all_databases_list = self.get_names_of_all_databases_list()
        Data_List = []
        for database in all_databases_list:
            if database.endswith('.db'):
                #print(database)
                sqlite_file = database
                print(sqlite_file)
                conn = sqlite3.connect(sqlite_file)
                c = conn.cursor()
                command = "SELECT COUNT(Fail_Video) FROM Reports WHERE Fail_Video like '" + Fail_Video + "'"
                c.execute(command)
                rows = c.fetchall()
                for row in rows:
                    Data_List.append(int(row[0]))
        Count = 0
        for number in Data_List:
            Count += number
        return Count









    def get_data_from_databases(self,Target = '*',Index_Time = "%",Date = "%",Script_Start_Time = "%",Script_End_Time = "%",Station_Name = "%",Controller_Name = "%",Script_Name = "%",Controller_Build = "%",Pass = "%",Fail = "%",Skip = "%",Error = "%",Target_Img = "%",Templet_Img = "%",Steps = "%",Error_ID = "%",Notes = "%",Ignore = "%",Fail_Video = "%",Pass_Video = "%",Client = "%",Index_Time_String = "%"):
        os.chdir(self.DatabasseFoler)
        all_databases_list = self.get_names_of_all_databases_list()
        Data_List = []
        for database in all_databases_list:
            if database.endswith('.db'):
                #print(database)
                sqlite_file = database
                print(sqlite_file)
                conn = sqlite3.connect(sqlite_file)
                c = conn.cursor()
                # + " AND Pass like '" + Pass + "'"

                command = "SELECT " + Target + ' ' + "FROM Reports WHERE Index_Time like '" + Index_Time + "'" + " AND Index_Time_String like '" + Index_Time_String + "'" + " AND Date like '" + Date + "'" + " AND Script_Start_Time like '" + Script_Start_Time + "'" + " AND Script_End_Time like '" + Script_End_Time + "'" + " AND Station_Name like '" + Station_Name + "'" + " AND Controller_Name like '" + Controller_Name + "'" + " AND Script_Name like '" + Script_Name + "'" + " AND Controller_Build like '" + Controller_Build + "'" + " AND Pass like '" + Pass + "'" + " AND Fail like '" + Fail + "'" + " AND Skip like '" + Skip + "'" + " AND Error like '" + Error + "'" + " AND Target_Img like '" + Target_Img + "'" + " AND Templet_Img like '" + Templet_Img + "'" + " AND Steps like '" + Steps + "'" + " AND Error_ID like '" + Error_ID + "'" + " AND Pass_Video like '" + Pass_Video + "'" + " AND Client like '" + Client + "'" + " AND Fail_Video like '" + Fail_Video + "'"
                command = "SELECT " + Target + ' ' + "FROM Reports WHERE Index_Time like '" + Index_Time + "'" + " AND Index_Time_String like '" + Index_Time_String + "'" + " AND Date like '" + Date + "'" + " AND Script_Start_Time like '" + Script_Start_Time + "'" + " AND Script_End_Time like '" + Script_End_Time + "'" + " AND Station_Name like '" + Station_Name + "'" + " AND Controller_Name like '" + Controller_Name + "'" + " AND Script_Name like '" + Script_Name + "'" + " AND Controller_Build like '" + Controller_Build + "'" + " AND Pass like '" + Pass + "'" + " AND Fail like '" + Fail + "'" + " AND Skip like '" + Skip + "'" + " AND Error like '" + Error + "'" + " AND Target_Img like '" + Target_Img + "'" + " AND Templet_Img like '" + Templet_Img + "'" + " AND Steps like '" + Steps + "'" + " AND Error_ID like '" + Error_ID + "'" + " AND Pass_Video like '" + Pass_Video + "'" + " AND Client like '" + Client + "'"
                try:
                    try:
                        c.execute(command)
                    except sqlite3.OperationalError as e:
                        print(e)
                        command = "SELECT " + Target + ' ' + "FROM Reports WHERE Index_Time like '" + Index_Time + "'" + " AND Index_Time_String like '" + Index_Time_String + "'" + " AND Date like '" + Date + "'" + " AND Script_Start_Time like '" + Script_Start_Time + "'" + " AND Script_End_Time like '" + Script_End_Time + "'" + " AND Station_Name like '" + Station_Name + "'" + " AND Controller_Name like '" + Controller_Name + "'" + " AND Script_Name like '" + Script_Name + "'" + " AND Controller_Build like '" + Controller_Build + "'" + " AND Pass like '" + Pass + "'" + " AND Fail like '" + Fail + "'" + " AND Skip like '" + Skip + "'" + " AND Error like '" + Error + "'" + " AND Target_Img like '" + Target_Img + "'" + " AND Templet_Img like '" + Templet_Img + "'" + " AND Steps like '" + Steps + "'" + " AND Error_ID like '" + Error_ID + "'"
                        command = "SELECT " + Target + ' ' + "FROM Reports WHERE Index_Time like '" + Index_Time + "'" + " AND Index_Time_String like '" + Index_Time_String + "'" + " AND Date like '" + Date + "'" + " AND Script_Start_Time like '" + Script_Start_Time + "'" + " AND Script_End_Time like '" + Script_End_Time + "'" + " AND Station_Name like '" + Station_Name + "'" + " AND Controller_Name like '" + Controller_Name + "'" + " AND Script_Name like '" + Script_Name + "'" + " AND Controller_Build like '" + Controller_Build + "'" + " AND Pass like '" + Pass + "'" + " AND Fail like '" + Fail + "'" + " AND Skip like '" + Skip + "'" + " AND Error like '" + Error + "'" + " AND Target_Img like '" + Target_Img + "'" + " AND Templet_Img like '" + Templet_Img + "'" + " AND Steps like '" + Steps + "'" + " AND Error_ID like '" + Error_ID + "'"

                        c.execute(command)
                    rows = c.fetchall()
                    for row in rows:
                        Data_List.append(row)
                except sqlite3.OperationalError as e:
                    print(e)
                    pass
        return Data_List

#Database_Folder = r"C:\Users\Automation3\Desktop\Database"
Database_Folder = Variable_File_Getter.getVariableFromFile('Database_Folder')
print(Database_Folder)
DataBase_Manager = DataBase_Manager_Class(Database_Folder)

if __name__ == '__main__':
    #entry = DataBase_Manager.get_entry_fron_Index_Time(1548424438.91)
    #entry = DataBase_Manager.get_entry_fron_Index_Time(1548449188.74078)
    #entry = DataBase_Manager.get_entry_fron_Index_Time(1548449188.74078)
    #entry = DataBase_Manager.get_entry_fron_Index_Time(1548449188.7407818)
    #entry = DataBase_Manager.get_entry_fron_Index_Time(1548448916.7787971)
    #entry = DataBase_Manager.get_entry_fron_Index_Time(1548448250.2832263)


    #entry = DataBase_Manager.get_entry_fron_Index_Time(1548449188.7407818)
    #entry = DataBase_Manager.get_entry_fron_Index_Time(1548449188.7407818)
    #entry = DataBase_Manager.get_entry_fron_Index_Time(1548448964.568388)
    #entry = DataBase_Manager.get_entry_fron_Index_Time(1548448723.3696573)

    #print(entry)

    #Data = DataBase_Manager.get_data_from_databases()
    #print('Done')
    #Scripts = DataBase_Manager.get_missing_scripts(Controller_Build = '%')
    #print('##################')
    #for i in Scripts:
    #    print(i)



    #print('Done')
    #Data = DataBase_Manager.get_data_from_databases()

    #error_id = """C:\Elan_Tools\Cloud_Drive\Videos_For_Database\Itp8_Station__17_PC_speakercraft_lms__8.3.499.187__Fail__CImageScripter2libsitepackagesimagescriptercoreimagepyline174inWaitraiseValueErrorImagenotFoundselfpathofim.avi"""
    #notes_txt = 'test3'
    #DataBase_Manager.Save_Note_Into_Database(notes_txt,error_id)
    #Data = DataBase_Manager.Get_Notes_For_An_Error_From_Notes_Database(error_id)
    #Data = DataBase_Manager.get_list_of_all_availble_scripts()
    Data = DataBase_Manager.get_latest_controller_build()
    print(Data)