import sqlite3
import os
from variable_file_getter import Variable_File_Getter
import os
from glob import glob
from datetime import date
import calendar
import datetime
import time
import re
import datetime
from paths import *
import itertools
import operator
from distutils.dir_util import copy_tree
import shutil


def natural_keys(text):
    return [atoi(c) for c in re.split('(\d+)', text)]


def atoi(text):
    return int(text) if text.isdigit() else text

def get_run_time(s1,s2):




    from datetime import datetime
    #s1 = '7:20:3'
    #s2 = '7:30:1' # for example
    FMT = '%H:%M:%S'
    tdelta = datetime.strptime(s2, FMT) - datetime.strptime(s1, FMT)
    return tdelta



def most_common_item_in_list(L):
      # get an iterable of (item, iterable) pairs
      SL = sorted((x, i) for i, x in enumerate(L))
      # print 'SL:', SL
      groups = itertools.groupby(SL, key=operator.itemgetter(0))
      # auxiliary function to get "quality" for an item
      def _auxfun(g):
        item, iterable = g
        count = 0
        min_index = len(L)
        for _, where in iterable:
          count += 1
          min_index = min(min_index, where)
        # print 'item %r, count %r, minind %r' % (item, count, min_index)
        return count, -min_index
      # pick the highest-count/earliest item
      return max(groups, key=_auxfun)[0]

















class DataBase_Manager_Class():
    def __init__(self,database_folder):
        self.DatabasseFoler = self.pull_databases_local_and_return_path(database_folder)


    def pull_databases_local_and_return_path(self,database_folder):
        print("Pulling Database Please Wait")
        ##Cached_Database_Location = r"C:\Settings\Cached_Database"

        try:
            shutil.rmtree(Cached_Database_Location)
        except Exception as e:
            print(e)
        copy_tree(database_folder,Cached_Database_Location)
        print("Succesfully pulled database")
        return Cached_Database_Location



    def get_names_of_all_databases_list(self):
        names_of_all_databases = os.listdir(self.DatabasseFoler)
        return names_of_all_databases



    def get_entry_fron_Index_Time_String(self,Index_Time_String):
        entries = self.get_data_from_databases(Index_Time_String = Index_Time_String)
        #print('###########')
        #print(Index_Time_String)
        #print('############')
        entryTup = entries[0]
        entry = list(entryTup)
        return entry


























    def get_entry_fron_Error_ID(self,error_id):
        entries = self.get_data_from_databases(Error_ID = error_id)
        entryTup = entries[0]
        entry = list(entryTup)
        return entry


    def get_list_of_controller_builds(self):
        #print('get_list_of_controller_builds')
        Data = DataBase_Manager.get_data_from_databases(Target='Controller_Build')
        Data = [i[0] for i in Data]
        aList = list(set(Data))
        aList.sort(key=natural_keys)
        return reversed(aList)


    def get_list_of_controller_names(self):
        #print('get_list_of_controller_builds')
        Data = DataBase_Manager.get_data_from_databases(Target='Controller_Name')
        Data = [i[0] for i in Data]
        aList = list(set(Data))
        aList.sort(key=natural_keys)
        return reversed(aList)



    def get_list_of_all_stations(self):
        #print('get_list_of_controller_builds')
        Data = DataBase_Manager.get_data_from_databases(Target='Station_Name')
        #print(Data)
        Data = [i[0] for i in Data]
        Data = set(Data)
        Data = list(Data)
        #print(Data)
        #aList = list(set(Data))
        #aList = ['8.5.499.1','8.5.499.2','8.5.499.5','8.5.22.205','8.5.499.55']
        #aList = [i.replace('.','') for i in aList]
        #print(aList)
        Data.sort(key=natural_keys)
        return Data


    def get_list_of_all_scripts(self,Station_Name='%'):
        #print('get_list_of_controller_builds')
        Data = DataBase_Manager.get_data_from_databases(Target='Script_Name',Station_Name=Station_Name)
        #print(Data)
        Data = [i[0] for i in Data]
        Data = set(Data)
        Data = list(Data)
        #print(Data)
        #aList = list(set(Data))
        #aList = ['8.5.499.1','8.5.499.2','8.5.499.5','8.5.22.205','8.5.499.55']
        #aList = [i.replace('.','') for i in aList]
        #print(aList)
        Data.sort(key=natural_keys)
        return Data


    def get_list_of_all_script_times(self,Script_Name='%'):
        try:
            def remove_prefix(text, prefix):
                return text[text.startswith(prefix) and len(prefix):]
            from itertools import chain
            List_of_Times = []
            Data = DataBase_Manager.get_data_from_databases(Target='Script_Start_Time,Script_End_Time',Script_Name=Script_Name)
            Data = str(Data)
            Data = Data.replace('[','')
            Data = Data.replace(']','')
            #Data = Data.replace('(','')
            #Data = Data.replace(')','')
            Data = Data.replace("'",'')
            Data = Data.replace('"','')
            Data = Data.split(')')
            for i in Data:
                try:
                    i = remove_prefix(i,', ')
                    i = i.replace('(', '')
                    i = i.replace(')', '')
                    i = i.replace(' ', '')
                    List = i.split(',')
                    start = List[0]
                    end  = List[1]
                    Run_Time = str(get_run_time(start, end))
                    List_of_Times.append(Run_Time)
                except:
                    pass
            most_common = most_common_item_in_list(List_of_Times)
            print(most_common)
            return most_common
        except Exception as e:
            print(e)
            return 0






    def get_latest_controller_build(self):
        #print('get_list_of_controller_builds')
        Data = DataBase_Manager.get_data_from_databases(Target='Controller_Build')
        Data = [i[0] for i in Data]
        aList = list(set(Data))
        #aList = ['8.5.499.1','8.5.499.2','8.5.499.5','8.5.22.205','8.5.499.55']
        #aList = [i.replace('.','') for i in aList]
        #print(aList)
        aList.sort(key=natural_keys)
        return aList[-1]


    def get_second_to_last_controller_build(self):
        #print('get_list_of_controller_builds')
        Data = DataBase_Manager.get_data_from_databases(Target='Controller_Build')
        Data = [i[0] for i in Data]
        aList = list(set(Data))
        #aList = ['8.5.499.1','8.5.499.2','8.5.499.5','8.5.22.205','8.5.499.55']
        #aList = [i.replace('.','') for i in aList]
        #print(aList)
        aList.sort(key=natural_keys)
        try:
            return aList[-2]
        except:
            return aList[-1]


    def get_list_of_all_availble_scripts(self):
        import os
        All_Script_Folder_Path = All_Scripts_Folder_Location
        list_of_scripts = []
        extensions = ('.py')  # extinctions want to search
        exclude_directories = set(['TimeCheck-Two-SC100','TimeCheck-All_Controllers','TimeCheck','Paul_Scripts','Add_All','Long_Tests','Jeffs on Hold DoorStation','Jeffs_On_Hold','Video','Test','Test_Station','Tonys_Scripts','Victors_Scrips','Video_Intercom_Loop'])  # directory (only names) want to exclude
        for dname, dirs, files in os.walk(All_Script_Folder_Path):  # this loop though directies recursively
            dirs[:] = [d for d in dirs if d not in exclude_directories]  # exclude directory if in exclude list
            for fname in files:
                if (fname.lower().endswith(extensions)):  # check for extension
                    fpath = os.path.join(dname, fname)  # this generate full directory path for file
                    fpath = os.path.basename(fpath)
                    dirname = dname.split('Scripts\\')[1]
                    list_of_scripts.append('[' + dirname + '] ' + fpath)

        return list_of_scripts


        '''

        ###############################################################
        ##All_Script_Folder_Path = Variable_File_Getter.getVariableFromFile('All_Scripts_Folder_Location')
        All_Script_Folder_Path = All_Scripts_Folder_Location
        print(All_Script_Folder_Path)
        lista = []
        list_of_scripts = []
        last_dur = os.getcwd()
        result = [y for x in os.walk(All_Script_Folder_Path) for y in glob(os.path.join(x[0], '*.py'))]
        for i in result:
            list_split_on_pools = i.split('Scripts')
            b = list_split_on_pools[-1]
            Application = b.split('\\')
            # Application = filter(None, Application)
            Application = Application[1]
            lista = i.split('\\')
            i = lista[-1]
            #i = i + '*' + Application
            list_of_scripts.append(i)
        return list_of_scripts
        '''



    def get_list_of_scripts_with_entries(self,Controller_Build):
        #print('get_list_of_scripts_with_entries')
        Data = DataBase_Manager.get_data_from_databases(Target='Script_Name',Controller_Build = Controller_Build)
        Data = [i[0] for i in Data]
        aList = list(set(Data))
        return aList






    def get_count_of_passes_with_script_for_specific_build(self,Controller_Build,Script_Name):
        #print('get_list_of_scripts_with_entries')
        Data = DataBase_Manager.get_data_from_databases(Target='Script_Name',Script_Name = Script_Name,Controller_Build = Controller_Build,Pass = 'True')
        Data = [i[0] for i in Data]
        #aList = list(set(Data))
        return len(Data)


    def get_count_of_failure_with_script_for_specific_build(self,Controller_Build,Script_Name):
        #print('get_list_of_scripts_with_entries')
        Data = DataBase_Manager.get_data_from_databases(Target='Script_Name',Script_Name = Script_Name,Controller_Build = Controller_Build,Pass = 'False')
        Data = [i[0] for i in Data]
        #aList = list(set(Data))
        return len(Data)







    def get_missing_scripts(self,Controller_Build):
        #print("Get Missing Scripts")
        Scripts_run = list(set(DataBase_Manager.get_list_of_scripts_with_entries(Controller_Build)))
        Scripts_run = [x.strip(' ') for x in Scripts_run]
        Scripts_run = [x.strip('.py') for x in Scripts_run]
        All_scipts = list(set(DataBase_Manager.get_list_of_all_availble_scripts()))
        All_scipts = [x.strip(' ') for x in All_scipts]
        All_scipts = [x.strip('.py') for x in All_scipts]






        Missing_Scripts = []
        for i in All_scipts:
            name_only = i.split('] ')[1]
            name_only = name_only.replace('.py','')


            if name_only in Scripts_run:
                pass

            else:

                Missing_Scripts.append(i)
        return Missing_Scripts



    def get_missing_scripts_compared_to_last_build(self,Controller_Build):
        #print("Get Missing Scripts")
        second_to_last_build = DataBase_Manager.get_second_to_last_controller_build()
        All_scipts = list(set(DataBase_Manager.get_list_of_scripts_with_entries(second_to_last_build)))
        All_scipts = [x.strip(' ') for x in All_scipts]
        All_scipts = [x.strip('.py') for x in All_scipts]



        Scripts_run = list(set(DataBase_Manager.get_list_of_scripts_with_entries(Controller_Build)))
        Scripts_run = [x.strip(' ') for x in Scripts_run]
        Scripts_run = [x.strip('.py') for x in Scripts_run]


        Missing_Scripts = []
        for i in All_scipts:
            if i in Scripts_run:
                pass
                #print('In -> ',i)
            else:
                #print('Out -> ', i)
                Missing_Scripts.append(i)
        return Missing_Scripts







    def get_completed_scripts(self,Controller_Build):
        #print("Get Missing Scripts")
        Scripts_run = list(set(DataBase_Manager.get_list_of_scripts_with_entries(Controller_Build)))
        Scripts_run = [x.strip(' ') for x in Scripts_run]
        Scripts_run = [x.strip('.py') for x in Scripts_run]
        All_scipts = list(set(DataBase_Manager.get_list_of_all_availble_scripts()))
        #print(All_scipts)
        All_scipts = [x.strip(' ') for x in All_scipts]
        All_scipts = [x.strip('.py') for x in All_scipts]
        Completed_Scripts = []
        for i in All_scipts:
            name = i.split('] ')[1]
            name = name.replace('.py','')

            if name in Scripts_run:
                Completed_Scripts.append(i)
            else:
                pass
        return Completed_Scripts



    def Get_Notes_For_An_Error_From_Notes_Database(self, error):
        ##NotesDatabasePath = Variable_File_Getter.getVariableFromFile('Notes_Database_Path')
        NotesDatabasePath = Notes_Database_Path
        Notes = ''
        sqlite_file = NotesDatabasePath
        conn = sqlite3.connect(sqlite_file)
        c = conn.cursor()
        # command = "SELECT Notes FROM Reports WHERE Controller_Build like '" + self.Build + "' AND Error_ID = '" + error + "' AND Fail = '" + True1 + "'"
        command = "SELECT Notes FROM Reports WHERE Error_ID = '" + error + "'"
        # command = "SELECT Error FROM Reports WHERE Controller_Build = '" + self.Latest_Build + "' AND Error = '" + error + "'"
        #print(command)
        c.execute(command)
        rows = c.fetchall()
        # for row in rows:
        #   print(row)
        try:
            row = rows[-1]
        except:
            row = ' '
        return str(row[0])
        # return (str(Notes))





























    def Save_Note_Into_Database(self,notes_txt,Error_ID):
        ##NotesDatabasePath = Variable_File_Getter.getVariableFromFile('Notes_Database_Path')
        NotesDatabasePath = Notes_Database_Path
        now = datetime.datetime.now()
        DayOfMonth = now.strftime("%Y-%m-%d %H:%M")
        Index_Time = time.time()
        #Notes = self.ui.textEdit_3.toPlainText()

        def Enter_Note(Error_ID, Notes, Build,Index_Time):
            sqlite_file = NotesDatabasePath
            # Connecting to the dNtNbNse file
            conn = sqlite3.connect(sqlite_file)
            c = conn.cursor()
            N = 'N/A'
            c.execute('''INSERT INTO Reports(Index_Time,Error_ID, Notes, Build)
                                  VALUES(?,?,?,?)''',
                      (Index_Time,Error_ID, Notes, Build))
            # Committing chNnges Nnd closing the connection to the dNtNbNse file
            conn.commit()
            conn.close()

        Build = "N/A"
        Enter_Note(Error_ID, notes_txt, Build,Index_Time)



    def Count(self,Fail_Video = '%'):
        os.chdir(self.DatabasseFoler)
        all_databases_list = self.get_names_of_all_databases_list()
        Data_List = []
        for database in all_databases_list:
            if database.endswith('.db'):
                #print(database)
                sqlite_file = database
                #print(sqlite_file)
                conn = sqlite3.connect(sqlite_file)
                c = conn.cursor()
                command = "SELECT COUNT(Fail_Video) FROM Reports WHERE Fail_Video like '" + Fail_Video + "'"
                c.execute(command)
                rows = c.fetchall()
                for row in rows:
                    Data_List.append(int(row[0]))
        Count = 0
        for number in Data_List:
            Count += number
        return Count


    def Set_Entry_To_Ignore(self,Fail_Video):
        os.chdir(self.DatabasseFoler)
        #print("DataBaseFolder -> ",self.DatabasseFoler)
        all_databases_list = self.get_names_of_all_databases_list()
        #print("all_databases_list -> ",all_databases_list)

        for DatabasePath in all_databases_list:
            #print("DATABASE IS ",DatabasePath)
            if DatabasePath.endswith('.db'):
                #DatabasePath = r"C:\Users\Automation3\Desktop\test.db"
                sqlite_file = DatabasePath
                conn = sqlite3.connect(sqlite_file)
                c = conn.cursor()
                command = "UPDATE Reports SET Ignore = 'True' WHERE Fail_Video like '" + Fail_Video + "'"
                #print(command)
                c.execute(command)
                conn.commit()
                rows = c.fetchall()
        return rows



    def Remove_Ignore_From_Entry(self,Fail_Video):
        os.chdir(self.DatabasseFoler)
        all_databases_list = self.get_names_of_all_databases_list()
        for DatabasePath in all_databases_list:
            if DatabasePath.endswith('.db'):
                #DatabasePath = r"C:\Users\Automation3\Desktop\test.db"
                sqlite_file = DatabasePath
                conn = sqlite3.connect(sqlite_file)
                c = conn.cursor()
                command = "UPDATE Reports SET Ignore = 'None' WHERE Fail_Video like '" + Fail_Video + "'"
                print(command)
                c.execute(command)
                conn.commit()
                rows = c.fetchall()
        return rows













    def get_data_from_databases(self,Target = '*',Index_Time = "%",Date = "%",Script_Start_Time = "%",Script_End_Time = "%",Station_Name = "%",Controller_Name = "%",Script_Name = "%",Controller_Build = "%",Pass = "%",Fail = "%",Skip = "%",Error = "%",Target_Img = "%",Templet_Img = "%",Steps = "%",Error_ID = "%",Notes = "%",Ignore = "%",Fail_Video = "%",Pass_Video = "%",Client = "%",Index_Time_String = "%"):
        os.chdir(self.DatabasseFoler)
        all_databases_list = self.get_names_of_all_databases_list()
        Data_List = []
        for database in all_databases_list:
            if database.endswith('.db'):
                #print(database)
                sqlite_file = database
                #print(sqlite_file)
                conn = sqlite3.connect(sqlite_file)
                c = conn.cursor()
                # + " AND Pass like '" + Pass + "'"

                #command = "SELECT " + Target + ' ' + "FROM Reports WHERE Index_Time like '" + Index_Time + "'" + " AND Index_Time_String like '" + Index_Time_String + "'" + " AND Date like '" + Date + "'" + " AND Script_Start_Time like '" + Script_Start_Time + "'" + " AND Script_End_Time like '" + Script_End_Time + "'" + " AND Station_Name like '" + Station_Name + "'" + " AND Controller_Name like '" + Controller_Name + "'" + " AND Script_Name like '" + Script_Name + "'" + " AND Controller_Build like '" + Controller_Build + "'" + " AND Pass like '" + Pass + "'" + " AND Fail like '" + Fail + "'" + " AND Skip like '" + Skip + "'" + " AND Error like '" + Error + "'" + " AND Target_Img like '" + Target_Img + "'" + " AND Templet_Img like '" + Templet_Img + "'" + " AND Steps like '" + Steps + "'" + " AND Error_ID like '" + Error_ID + "'" + " AND Pass_Video like '" + Pass_Video + "'" + " AND Client like '" + Client + "'" + " AND Fail_Video like '" + Fail_Video + "'"
                command = "SELECT " + Target + ' ' + "FROM Reports WHERE Index_Time like '" + Index_Time + "'" + " AND Index_Time_String like '" + Index_Time_String + "'" + " AND Date like '" + Date + "'" + " AND Script_Start_Time like '" + Script_Start_Time + "'" + " AND Script_End_Time like '" + Script_End_Time + "'" + " AND Station_Name like '" + Station_Name + "'" + " AND Controller_Name like '" + Controller_Name + "'" + " AND Script_Name like '" + Script_Name + "'" + " AND Controller_Build like '" + Controller_Build + "'" + " AND Pass like '" + Pass + "'" + " AND Fail like '" + Fail + "'" + " AND Skip like '" + Skip + "'" + " AND Error like '" + Error + "'" + " AND Target_Img like '" + Target_Img + "'" + " AND Templet_Img like '" + Templet_Img + "'" + " AND Steps like '" + Steps + "'" + " AND Error_ID like '" + Error_ID + "'" + " AND Pass_Video like '" + Pass_Video + "'" + " AND Client like '" + Client + "'"


                try:
                    try:
                        c.execute(command)
                    except sqlite3.OperationalError as e:
                        print(e)
                        #command = "SELECT " + Target + ' ' + "FROM Reports WHERE Index_Time like '" + Index_Time + "'" + " AND Index_Time_String like '" + Index_Time_String + "'" + " AND Date like '" + Date + "'" + " AND Script_Start_Time like '" + Script_Start_Time + "'" + " AND Script_End_Time like '" + Script_End_Time + "'" + " AND Station_Name like '" + Station_Name + "'" + " AND Controller_Name like '" + Controller_Name + "'" + " AND Script_Name like '" + Script_Name + "'" + " AND Controller_Build like '" + Controller_Build + "'" + " AND Pass like '" + Pass + "'" + " AND Fail like '" + Fail + "'" + " AND Skip like '" + Skip + "'" + " AND Error like '" + Error + "'" + " AND Target_Img like '" + Target_Img + "'" + " AND Templet_Img like '" + Templet_Img + "'" + " AND Steps like '" + Steps + "'" + " AND Error_ID like '" + Error_ID + "'"
                        command = "SELECT " + Target + ' ' + "FROM Reports WHERE Index_Time like '" + Index_Time + "'" + " AND Index_Time_String like '" + Index_Time_String + "'" + " AND Date like '" + Date + "'" + " AND Script_Start_Time like '" + Script_Start_Time + "'" + " AND Script_End_Time like '" + Script_End_Time + "'" + " AND Station_Name like '" + Station_Name + "'" + " AND Controller_Name like '" + Controller_Name + "'" + " AND Script_Name like '" + Script_Name + "'" + " AND Controller_Build like '" + Controller_Build + "'" + " AND Pass like '" + Pass + "'" + " AND Fail like '" + Fail + "'" + " AND Skip like '" + Skip + "'" + " AND Error like '" + Error + "'" + " AND Target_Img like '" + Target_Img + "'" + " AND Templet_Img like '" + Templet_Img + "'" + " AND Steps like '" + Steps + "'" + " AND Error_ID like '" + Error_ID + "'"

                        c.execute(command)
                    rows = c.fetchall()
                    for row in rows:
                        Data_List.append(row)
                except sqlite3.OperationalError as e:
                    print(e)
                    pass
        return Data_List


##Database_Folder = Variable_File_Getter.getVariableFromFile('Database_Folder')
Database_Folder = Database_Folder
#Database_Folder = r'\\172.16.42.105\Public\Database2'





print("#####################")
print(Database_Folder)
print("#####################")
DataBase_Manager = DataBase_Manager_Class(Database_Folder)

if __name__ == '__main__':
    #entry = DataBase_Manager.get_entry_fron_Index_Time(1548424438.91)
    #entry = DataBase_Manager.get_entry_fron_Index_Time(1548449188.74078)
    #entry = DataBase_Manager.get_entry_fron_Index_Time(1548449188.74078)
    #entry = DataBase_Manager.get_entry_fron_Index_Time(1548449188.7407818)
    #entry = DataBase_Manager.get_entry_fron_Index_Time(1548448916.7787971)
    #entry = DataBase_Manager.get_entry_fron_Index_Time(1548448250.2832263)


    #entry = DataBase_Manager.get_entry_fron_Index_Time(1548449188.7407818)
    #entry = DataBase_Manager.get_entry_fron_Index_Time(1548449188.7407818)
    #entry = DataBase_Manager.get_entry_fron_Index_Time(1548448964.568388)
    #entry = DataBase_Manager.get_entry_fron_Index_Time(1548448723.3696573)

    #print(entry)

    #Data = DataBase_Manager.get_data_from_databases()
    #print('Done')
    #Scripts = DataBase_Manager.get_missing_scripts(Controller_Build = '%')
    #print('##################')
    #for i in Scripts:
    #    print(i)



    #print('Done')
    #Data = DataBase_Manager.get_data_from_databases()

    #error_id = """C:\Elan_Tools\Cloud_Drive\Videos_For_Database\Itp8_Station__17_PC_speakercraft_lms__8.3.499.187__Fail__CImageScripter2libsitepackagesimagescriptercoreimagepyline174inWaitraiseValueErrorImagenotFoundselfpathofim.avi"""
    #notes_txt = 'test3'
    #DataBase_Manager.Save_Note_Into_Database(notes_txt,error_id)
    #Data = DataBase_Manager.Get_Notes_For_An_Error_From_Notes_Database(error_id)
    #Data = DataBase_Manager.get_list_of_all_availble_scripts()
    #Controller_Build = '8.3.500.0'
    #Script_Name = '10_ITP8_Check_Facial_Recognition'
    #Data = DataBase_Manager.get_count_of_passes_with_script_for_specific_build(Controller_Build,Script_Name)
    #Data = DataBase_Manager.get_list_of_all_stations()
    #Fail_Video = """C:\Elan_Tools\Cloud_Drive\Videos_For_Database\Quick_Tests__43___aTV_Media_Script__8.3.502.1__Fail__2192216963072821924310622662738x.avi"""
    #Data = DataBase_Manager.get_completed_scripts('8.3.762.0')
    Data = DataBase_Manager.get_list_of_all_availble_scripts()
    for i in Data:
        print(i)
    #os.chdir(r"C:\ImageScripter_2\Lib\site-packages\elan\Scripts\Frank_ITP8_PC")
