from paths import *
from PyQt5.QtWidgets import QApplication, QWidget
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QMessageBox
from PyQt5 import QtGui, uic, Qt
from PyQt5.QtGui import QStandardItemModel,QStandardItem
from paths import *
from PyQt5.QtGui import QIcon, QPixmap
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from paths import *
import PyQt5
from PyQt5 import QtCore
import subprocess
import time
import os
import platform


class Wizard_Class(QWidget):
    def __init__(self,parent):
        super().__init__()
        #self.ui = uic.loadUi(Wizard_Ui)
        self.ui = uic.loadUi(Wizard_Ui)
        #self.ui.showMaximized()
        self.partent = parent
        self.ui.setWindowTitle('New Project Wizard')
        self.ui.lineEdit_3.setText(platform.node())
        self.ui.lineEdit_2.setText(r"C:\Ellumination\System\ImageScripter\Default\_default_\default\Scripts\default")
        self.ui.lineEdit_6.setText(r"C:\Ellumination\System\ImageScripter\Default\_default_\Reports")
        self.ui.pushButton.clicked.connect(self.save_was_clicked)
        self.ui.show()

    def save_was_clicked(self):
        self.ui.close()
        self.close()



if __name__ == '__main__':
    try:
        app = QApplication(sys.argv)
        Wizard = Wizard_Class()
        sys.exit(app.exec_())
    except Exception as e:
        raise
        e = str(e)
        import ctypes
        ctypes.windll.user32.MessageBoxW(0, e, 'Error', 0)
