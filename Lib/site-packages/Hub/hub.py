import os
LAUNCH_PATH = os.getcwd()

with open(r'C:\\Launch', 'w') as f:
    f.write(LAUNCH_PATH)
from Hub.functions import *
########################################################################################### FIRST ABOVE NEED
from paths import *
from PyQt5.QtWidgets import QApplication, QWidget
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QMessageBox
from PyQt5 import QtGui, uic, Qt
from PyQt5.QtGui import QStandardItemModel,QStandardItem
from paths import *
from PyQt5.QtGui import QIcon, QPixmap
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from paths import *
import PyQt5
from PyQt5 import QtCore
import subprocess
import time
import os
from Wizard.wizard import Wizard_Class
import shutil, errno
import ctypes
import time
import threading
from shutil import copyfile
from distutils.dir_util import copy_tree









class QPushButton_Custom_Class(QPushButton):
    def __init__(self,text,path):
        super().__init__()
        self.setText(text)
        self.path = path

    def Was_Clicked(self):
        try:
            os.startfile(self.path)
        except Exception as e:
            print(e)






class Hub_Class(QWidget):
    def __init__(self):
        super().__init__()
        self.ui = uic.loadUi(Hub_Ui)
        #self.ui.showMaximized()
        self.ui.resize(400, 600)
        self.ui.show()
        LAUNCH_PATH = os.getcwd()
        #self.ui.label_4.setText(LAUNCH_PATH)
        self.ui.actionReset_Sytem_And_Project.triggered.connect(self.Reset_Sytem_And_Project)
        self.ui.actionReset_Sytem.triggered.connect(self.Reset_Sytem)
        self.ui.actionReset_Project.triggered.connect(self.Reset_Project)


        self.ui.actionSave_System_And_Project.triggered.connect(self.Save_Sytem_And_Project)
        self.ui.actionSave_System.triggered.connect(self.Save_Sytem)
        self.ui.actionSave_Project.triggered.connect(self.Save_Project)

        self.ui.actionConfiguration.triggered.connect(self.Configuration_Menu)

        self.init_Tools()

        self.ui.pushButton_3.clicked.connect(self.script_writer_clicked)
        self.ui.pushButton_7.clicked.connect(self.delete_project)
        self.ui.pushButton_6.clicked.connect(self.clone_project)
        self.ui.pushButton_5.clicked.connect(self.new_clicked)
        self.ui.pushButton_8.clicked.connect(self.apps_clicked)
        self.ui.pushButton.clicked.connect(self.import_for_project)
        self.ui.pushButton_2.clicked.connect(self.database_viewer_clicked)
        self.ui.lineEdit.setText(Full_Project_Path)
        self.ui.setWindowTitle(Full_Project_Path)
        pixmap = QPixmap(loading_eyepng)
        self.ui.label_2.setPixmap(pixmap)
        self.ui.label_2.setScaledContents(True)

        self.Update_Projects()

        #index = self.ui.comboBox.(textToFind)
        #self.ui.comboBox.setCurrentIndex(index)


    def apps_clicked(self):
        class Apps_Class(QWidget):
            def __init__(self):
                super().__init__()
                self.ui = uic.loadUi(Apps_Ui)
                self.ui.show()
        self.App_window = Apps_Class()
        try:
            old_path = os.getcwd()
            os.chdir(ElanExeLocation)
            aList = os.listdir()
            for i in aList:
                if i.endswith('.exe'):
                    path = os.path.abspath(i)
                    Button = QPushButton_Custom_Class(i, path)
                    Button.setStyleSheet('background-color: rgb(171, 171, 171);')
                    Button.clicked.connect(Button.Was_Clicked)
                    self.App_window.ui.gridLayout.addWidget(Button)
            os.chdir(old_path)
        except Exception as e:
            print(e)




    def init_Tools(self):
        pass
        '''
        if The_NAME == 'elan':
            try:
                #Label = QLabel('Elan Tools')
                #self.ui.verticalLayout_3.addWidget(Label)
                old_path = os.getcwd()
                os.chdir(ElanExeLocation)
                aList = os.listdir()
                for i in aList:
                    if i.endswith('.exe'):
                        path = os.path.abspath(i)
                        Button = QPushButton_Custom_Class(i,path)
                        Button.setStyleSheet('background-color: rgb(171, 171, 171);')
                        Button.clicked.connect(Button.Was_Clicked)
                        self.ui.verticalLayout_3.addWidget(Button)
                os.chdir(old_path)
            except Exception as e:
                print(e)

        '''




    def Update_Projects(self):
        self.ui.comboBox.clear()
        List = os.listdir(Projects_Location)
        for i in List:
            i = i.replace('_','')
            #self.ui.comboBox.addItem(os.path.abspath(i))
            self.ui.comboBox.addItem(i)

    def delete_project(self):
        BOOL = Yes_Or_No_Message("Are you sure that you want to delete " + Full_Project_Path + ' ?','Alert')
        if BOOL == True:
            print(Full_Project_Path)
            #os.remove(Full_Project_Path)
        else:
            pass


        #Mbox('Notice', 'Please Wait For Finished Message.', 1)
        #Full_Project_Path


    def Configuration_Menu(self):
        print("Config")
        try:
            import subprocess
            apath = settings_pagepy
            subprocess.Popen(apath, shell=True)
            print(apath)
            ##subprocess.Popen(r"C:\ImageScripter_2\python.exe C:\ImageScripter_2\Lib\site-packages\Script_Writer\settings_page.py", shell=True)

        except Exception as e:
            print(e)


    def get_windows_version(self):
        import platform
        ver = platform.platform()
        return ver




    def Save_Sytem_And_Project(self):
        print('Save System And Project')
        self.Save_Sytem()
        self.Save_Project()
        #from sys import executable
        #from subprocess import Popen, CREATE_NEW_CONSOLE
        #executable = Python_Exe_Location
        #script = smart_export_to_deskoppy
        #Popen([executable, script], creationflags=CREATE_NEW_CONSOLE)
        ###############
        #from reset import Reset_System_Files
        #from reset import Reset_Project_Files

    def Save_Sytem(self):
        try:
            with open(r"C:\root",'r') as f:
                print('Save System')
                from sys import executable
                from subprocess import Popen, CREATE_NEW_CONSOLE
                executable = Python_Exe_Location
                script = Save_Systempy
                Popen([executable, script], creationflags=CREATE_NEW_CONSOLE)
                ##############
                #from reset import Reset_System_Files
        except:
            print('Does not have root')

    def Save_Project(self):
        try:
            with open(r"C:\root",'r') as f:
                print('Save')
                from sys import executable
                from subprocess import Popen, CREATE_NEW_CONSOLE
                executable = Python_Exe_Location
                script = Save_Projectpy
                Popen([executable, script], creationflags=CREATE_NEW_CONSOLE)
                ##############
                #from reset import Reset_Project_Files
        except:
            print('Does not have root')





##########################

    def Reset_Sytem_And_Project(self):
                print('Reset System And Project')
                self.Reset_Sytem()
                self.Reset_Project()
                #from sys import executable
                #from subprocess import Popen, CREATE_NEW_CONSOLE
                #executable = Python_Exe_Location
                #script = smart_export_to_deskoppy
                #Popen([executable, script], creationflags=CREATE_NEW_CONSOLE)
                ###############
                #from reset import Reset_System_Files
                #from reset import Reset_Project_Files

    def Reset_Sytem(self):
        print('Reset System')
        from sys import executable
        from subprocess import Popen, CREATE_NEW_CONSOLE
        executable = Python_Exe_Location
        script = Reset_Systempy
        Popen([executable, script], creationflags=CREATE_NEW_CONSOLE)
        ##############
        #from reset import Reset_System_Files


    def Reset_Project(self):
        print('Project')
        from sys import executable
        from subprocess import Popen, CREATE_NEW_CONSOLE
        executable = Python_Exe_Location
        script = Reset_Projectpy
        Popen([executable, script], creationflags=CREATE_NEW_CONSOLE)
        ##############
        #from reset import Reset_Project_Files

    def clone_project(self):
        from Hub.clone import Clone_Class
        self.Clone_Window = Clone_Class()

        '''
        try:
            os.chdir(Projects_Location)
            txt1 = ''
            file_name = ''
            if 'Windows-7' not in self.get_windows_version():
                file_name = QFileDialog.getExistingDirectory(self, 'Select directory', directory=Projects_Location)
            else:
                os.chdir(r'C:\\')
                os.chdir(Projects_Location)
                file_name = QFileDialog.getExistingDirectory(self, 'Select directory',
                                                             options=QFileDialog.DontUseNativeDialog, directory=Projects_Location)
            if file_name != '':
                #self.ui.lineEdit_2.setText(file_name)
                short_file_name = os.path.basename(file_name)
                new_location = Projects_Location + '\\' + short_file_name
                if not os.path.isdir(new_location):
                    Mbox('Notice', 'Please Wait For Finished Message.', 1)
                    copyanything(file_name,new_location)
                    Mbox('Notice', 'Finished.', 1)
                else:
                    Mbox('Notice', 'This project already exists, aborting.', 1)

        except Exception as e:
            print(e)
        '''






    def import_for_project(self):
        try:
            os.chdir(Projects_Location)
            txt1 = ''
            file_name = ''
            if 'Windows-7' not in self.get_windows_version():
                file_name = QFileDialog.getExistingDirectory(self, 'Select directory', directory=Projects_Location)
            else:
                os.chdir(r'C:\\')
                os.chdir(Projects_Location)
                file_name = QFileDialog.getExistingDirectory(self, 'Select directory',
                                                             options=QFileDialog.DontUseNativeDialog, directory=Projects_Location)
            if file_name != '':
                #self.ui.lineEdit_2.setText(file_name)
                short_file_name = os.path.basename(file_name)
                new_location = Projects_Location + '\\' + short_file_name
                if not os.path.isdir(new_location):
                    Mbox('Notice', 'Please Wait For Finished Message.', 1)
                    copyanything(file_name,new_location)
                    Mbox('Notice', 'Finished.', 1)
                else:
                    Mbox('Notice', 'This project already exists, aborting.', 1)



        except Exception as e:
            print(e)


    def save_project_clicked(self):
        print('Save')
    def new_clicked(self):
        try:
            self.Wizard_Window = Wizard_Class(self.ui)
            self.Wizard_Window.ui.show()
        except Exception as e:
            print(e)
    def on_combobox_changed(self):
        currentText = str(self.ui.comboBox.currentText())
        self.ui.lineEdit.setText(currentText)

    def script_writer_clicked(self):
        path = Python_Exe_Location + ' ' + ImageScripter_Location + "Lib\site-packages\Script_Writer\script_writer.py"
        proc = subprocess.Popen(path, shell=True)


    def database_viewer_clicked(self):
        path = Python_Exe_Location + ' ' + ImageScripter_Location + "Lib\site-packages\database_viewer\database_viewer.py"
        proc = subprocess.Popen(path, shell=True)

    def script_runner_clicked(self):
        pass
        path = Python_Exe_Location + ' ' + ImageScripter_Location + "Lib\site-packages\Script_Writer\script_writer.py"
        proc = subprocess.Popen(path, shell=True)


if __name__ == '__main__':
    try:
        app = QApplication(sys.argv)
        Hub = Hub_Class()
        sys.exit(app.exec_())
    except Exception as e:
        raise
        e = str(e)
        import ctypes
        ctypes.windll.user32.MessageBoxW(0, e, 'Error', 0)
