from paths import *
from PyQt5.QtWidgets import QApplication, QWidget
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QMessageBox
from PyQt5 import QtGui, uic, Qt
from PyQt5.QtGui import QStandardItemModel,QStandardItem
from paths import *
from PyQt5.QtGui import QIcon, QPixmap
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from paths import *
import PyQt5
from PyQt5 import QtCore
import subprocess
import time
import os
from Wizard.wizard import Wizard_Class
import shutil, errno
import ctypes
import time
import threading
from shutil import copyfile
from distutils.dir_util import copy_tree
from Hub.functions import *







class QRadioButton_Custom_Class(QRadioButton):
    def __init__(self,text,path):
        super().__init__()
        self.setText(text)
        self.path = path



class Name_Clone_Window_Class(QWidget):
    def __init__(self,old_path):
        super().__init__()
        self.ui = uic.loadUi(Name_Clone_Ui)
        self.old_path = old_path
        print('$$$$$$$$$$$$$$$$$$$$$$')
        print(old_path)
        self.ui.label_2.setText(self.old_path)
        self.ui.pushButton.clicked.connect(self.save)
        self.ui.show()

    def save(self):
        try:
            Mbox('Notice', 'Please Wait For Finished Message.', 1)
            Text = str(self.ui.lineEdit.text())
            copyanything(self.old_path,Text)
            Mbox('Notice', 'Finished.', 1)
            self.ui.close()
            self.close()
        except Exception as e:
            print(e)






class Clone_Class(QWidget):
    def __init__(self):
        super().__init__()
        self.List_of_radio_buttons = []
        print(Clone_Ui)
        self.ui = uic.loadUi(Clone_Ui)
        self.ui.pushButton.clicked.connect(self.submit)

        #self.show()
        self.generateList()
        self.ui.show()

    def radio_button_was_clicked(self):
        pass

    def submit(self):
        try:
            self.selected_path = False
            self.selected_path = self.get_checked_radio_button()
            print('##############')
            self.selected_path
            if self.selected_path != False:
                self.Name_Clone_Window = Name_Clone_Window_Class(self.selected_path)
                self.ui.close()
                self.close()
        except Exception as e:
            print(e)



    def get_checked_radio_button(self):
        if self.List_of_radio_buttons != []:
            for i in self.List_of_radio_buttons:
                if i.isChecked():
                    return i.path
            return False





    def generateList(self):
        self.List_of_radio_buttons = []




        newfont = QFont("Times", 18, QtGui.QFont.Bold)
        os.chdir(Projects_Location)
        List = os.listdir()








        for i in List:
          path = os.path.abspath(i)
          self.b1 = QRadioButton_Custom_Class(i,path)
          self.b1.toggled.connect(self.radio_button_was_clicked)
          self.b1.setFont(newfont)
          self.ui.verticalLayout_2.addWidget(self.b1)
          self.List_of_radio_buttons.append(self.b1)
        #self.ui.horizontalLayout.show()


if __name__ == '__main__':
    try:
        app = QApplication(sys.argv)
        Clone = Clone_Class()
        sys.exit(app.exec_())
    except Exception as e:
        raise
        e = str(e)
        import ctypes
        ctypes.windll.user32.MessageBoxW(0, e, 'Error', 0)
