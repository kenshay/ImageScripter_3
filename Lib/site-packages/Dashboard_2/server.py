import socket
from PyQt5 import QtGui,uic,QtCore
from win32api import GetSystemMetrics
import sys
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog,QTextEdit,QMainWindow
import cv2
import win32api
from datetime import datetime as datetime1
import pickle
import cv2
from win32api import GetSystemMetrics
import traceback
import win32api
import ctypes
from time import sleep
from datetime import datetime
import PyQt5
import time
from PyQt5.QtGui import QStandardItemModel,QStandardItem
import os
from paths import *
import re
from PyQt5.QtCore    import *
from PyQt5.QtWidgets import *
import sys
import socket
import sys
from _thread import start_new_thread
from paths import Dashboard_Server_IP,Dashboard_Server_PORT
import os
import traceback


def client_thread(Info):
    try:
        print('Creating Thread')
        conn, addr = Info
        #conn.send(b"Welcome to the Server. Type messages and press enter to send.\n")
        IP = str(addr[0])
        PORT = str(addr[1])
        print('Thread Created With ',IP,' : ',PORT)
        while True:
            data = conn.recv(1024)
            data = str(data.decode())
            print(data)
    except Exception as e:
        traceback.print_exc()
        conn.close()







class Listener_Thread_Class(QThread):
    def __init__(self,parent):
        QThread.__init__(self)
        self.parent = parent

    def run(self):
        try:
            while True:
                print('Starting Server')
                HOST = Dashboard_Server_IP
                socket_connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                socket_connection.bind((HOST, Dashboard_Server_PORT))
                print('Created Socket ', HOST, ' : ', Dashboard_Server_PORT)
                socket_connection.listen(10)
                while True:
                    conn, addr = socket_connection.accept()
                    IP,Port = addr
                    Info_Dictionary = dict([('ip',IP),('port',Port)])
                    Info = [conn, addr]
                    self.parent.emit_add_client_signal(Info_Dictionary)
                    start_new_thread(client_thread, (Info,))
                socket_connection.close()
        except Exception as e:
            traceback.print_exc()



class Client_Widget_Class(QWidget):
  def __init__( self, parent,Selected_Connection_Info_Dictionary):
      super(Client_Widget_Class, self).__init__(parent)
      self.pushButton = QPushButton('I am in Test widget')
      layout = QHBoxLayout()
      layout.addWidget(self.pushButton)
      self.setLayout(layout)

class Dashboard_Class(QWidget):
    def __init__(self):
            QWidget.__init__(self)
            self.ui = uic.loadUi(r"C:\Eluminate\System\ImageScripter\Lib\site-packages\Dashboard_2\dashboard.ui")
            Listener_Thread = Listener_Thread_Class(self)
            Listener_Thread.start()
            self.Selected_Connection_Info_Dictionary = None
            self.init_hidden_new_client_trigger_button()
            self.ui.show()

    def init_hidden_new_client_trigger_button(self):
        try:
            self.hidden_add_new_client_trigger = QPushButton('add new client')
            self.hidden_add_new_client_trigger.clicked.connect(self.add_new_client_connection_with_emit_signal)
            self.hidden_add_new_client_trigger.hide()
        except Exception as e:
            traceback.print_exc()



    def emit_add_client_signal(self,Info_Dictionary):
        try:
            self.Selected_Connection_Info_Dictionary = Info_Dictionary
            self.hidden_add_new_client_trigger.click()
        except Exception as e:
            traceback.print_exc()

    def add_new_client_connection_with_emit_signal(self):
        try:
            Selected_Connection_Info_Dictionary = self.Selected_Connection_Info_Dictionary
            self.Selected_Connection_Info_Dictionary = None
            self.New_Client_Widget = Client_Widget_Class(self,Selected_Connection_Info_Dictionary)
            self.ui.gridLayout.addWidget(self.New_Client_Widget)
        except Exception as e:
            traceback.print_exc()





app = QApplication(sys.argv)
ex = Dashboard_Class()
sys._excepthook = sys.excepthook
sys.exit(app.exec_())