import sys
from PyQt5.QtWidgets import QApplication, QWidget
from win32api import GetSystemMetrics
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QMessageBox,QLabel
from PyQt5 import QtGui, uic, Qt
from PyQt5.QtGui import QStandardItemModel,QStandardItem
import traceback
from variable_file_getter import Variable_File_Getter
import os
from PyQt5.QtGui import QIcon, QPixmap
import base64
import sys
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from Script_Writer.editor import Editor_Class
from Script_Writer.snipping_tool import Snipping_Tool_Class
from win32api import GetSystemMetrics
from tkinter import filedialog
from PyQt5 import QtCore
from tkinter import *
import shutil
import PyQt5
from win32api import GetSystemMetrics
from PyQt5 import QtCore
import shutil
from Script_Writer.information_getter import Information_Getter
from Script_Writer.variable_file_getter import Variable_File_Getter
import os



class Script_Converter_Setup_Class(QWidget):

    def __init__(self):
        super().__init__()
        #self.ui = uic.loadUi(r"database_viewer.ui")
        self.ui = uic.loadUi(r"C:\ImageScripter_2\Lib\site-packages\Script_Writer\Script_Converter_Setup.ui")
        self.ui.setWindowTitle("Script_Converter_Setup")
        self.All_Script_Folder = Variable_File_Getter.getVariableFromFile('All_Scripts_Folder_Location')
        self.ui.pushButton_6.clicked.connect(self.old_script_button_clicked)
        self.ui.pushButton_3.clicked.connect(self.new_script_button_clicked)
        self.ui.pushButton_8.clicked.connect(self.old_interface_clicked)
        self.ui.pushButton_4.clicked.connect(self.new_interface_clicked)
        self.ui.pushButton.clicked.connect(self.save_clicked)
        self.ui.pushButton_2.clicked.connect(self.cancel_clicked)
        self.active_file_name = None
        try:
            name = sys.argv[1]
            if name != '':
                self.active_file_name = name
                self.ui.lineEdit_6.setText(self.active_file_name)
            else:
                self.active_file_name = None
        except Exception as e:
            self.active_file_name = None
        self.ui.show()

    def old_script_button_clicked(self):
            if self.active_file_name != None:


                Directory = os.path.basename(self.active_file_name)
            else:
                Directory = self.All_Script_Folder

            os.chdir(Directory)

            if 'Windows-7' not in self.get_windows_version():

                name = QFileDialog.getOpenFileName(parent=self,directory = Directory,caption=self.tr("Select a file"),filter=self.tr('Image files (*.py)'),)
            else:
                name = QFileDialog.getOpenFileName(None, 'Open File', Directory, '*', '*', QFileDialog.DontUseNativeDialog)
            if name != '':
                file_name = name[0]
                self.ui.lineEdit_6.setText(file_name)

    def new_script_button_clicked(self):
        if self.active_file_name != None:

            Directory1 = os.path.basename(self.active_file_name)
            print("##################")
            print(Directory1)
        else:
            Directory1 = self.All_Script_Folder
        print('#####################')
        print(Directory1)
        os.chdir(Directory1)


        if 'Windows-7' not in self.get_windows_version():

            name = QFileDialog.getSaveFileName(parent=self, directory= Directory1,
                                               caption=self.tr("Select a file"), filter=self.tr('Image files (*.py)'), )
        else:
            name = QFileDialog.getSaveFileName(None, 'Open File',  Directory1, '*', '*',
                                               QFileDialog.DontUseNativeDialog)
        if name != '':
            file_name = name[0]
            self.ui.lineEdit_3.setText(file_name)



    def old_interface_clicked(self):
        pass

    def new_interface_clicked(self):
        pass


    def save_clicked(self):
        pass

    def cancel_clicked(self):
        pass


    def get_windows_version(self):
        import platform
        ver = platform.platform()
        return ver
        Windows - 7 - 6.1
        .7601 - SP1





if __name__ == '__main__':
    app = QApplication(sys.argv)
    Script_Converter_Setup = Script_Converter_Setup_Class()
    #Script_Writer.showMaximized()
    sys.exit(app.exec_())