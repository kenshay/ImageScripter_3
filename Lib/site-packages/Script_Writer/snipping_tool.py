import sys
from PyQt5 import QtWidgets, QtCore, QtGui
import tkinter as tk
from PIL import ImageGrab
import numpy as np
import cv2


class Snipping_Tool_Class(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        root = tk.Tk()
        self.Create_Default_Interface()
        self.Create_Default_Image_Name()


        screen_width = root.winfo_screenwidth()
        screen_height = root.winfo_screenheight()
        self.setGeometry(0, 0, screen_width, screen_height)
        self.setWindowTitle(' ')
        self.begin = QtCore.QPoint()
        self.end = QtCore.QPoint()
        self.setWindowOpacity(0.3)
        QtWidgets.QApplication.setOverrideCursor(
            QtGui.QCursor(QtCore.Qt.CrossCursor)
        )
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        print('Capture the screen...')
        self.show()



    def Create_Default_Interface(self):
        try:
            self.Default_Inteface = sys.argv[1]
            print(self.Default_Inteface)
        except:
            self.Default_Inteface = None

    def Create_Default_Image_Name(self):
        try:
            self.Default_Image_Name = sys.argv[2]
            print(self.Default_Image_Name)
        except:
            self.Default_Image_Name = None



    def paintEvent(self, event):
        qp = QtGui.QPainter(self)
        qp.setPen(QtGui.QPen(QtGui.QColor('black'), 3))
        qp.setBrush(QtGui.QColor(128, 128, 255, 128))
        qp.drawRect(QtCore.QRect(self.begin, self.end))

    def mousePressEvent(self, event):
        self.begin = event.pos()
        self.end = self.begin
        self.update()

    def mouseMoveEvent(self, event):
        self.end = event.pos()
        self.update()

    def mouseReleaseEvent(self, event):
        self.close()
        try:
            x1 = min(self.begin.x(), self.end.x())
            y1 = min(self.begin.y(), self.end.y())
            x2 = max(self.begin.x(), self.end.x())
            y2 = max(self.begin.y(), self.end.y())

            img = ImageGrab.grab(bbox=(x1, y1, x2, y2))
            img.save("C:\ImageScripter_2\Lib\site-packages\Script_Writer\capture.png")
            img = cv2.cvtColor(np.array(img), cv2.COLOR_BGR2RGB)
            self.start_image_display_window()
            #cv2.imshow('Captured Image', img)
            #cv2.waitKey(0)
            #cv2.destroyAllWindows()
        except Exception as e:
            print(e)

    def Close_A_Window_Bye_Title(self,title):
        import win32con,win32gui
        handle = win32gui.FindWindow(None,title)
        win32gui.PostMessage(handle, win32con.WM_CLOSE, 0, 0)




    def start_image_display_window(self):
        print('Start Display Window')
        import subprocess
        #subprocess.Popen(r"C:\ImageScripter_2\python.exe C:\ImageScripter_2\Lib\site-packages\Script_Writer\snipping_tool.py", shell=True)
        print('End')
        #import subprocess


        if self.Default_Inteface and self.Default_Image_Name:
            subprocess.Popen(
                r"C:\ImageScripter_2\python.exe C:\ImageScripter_2\Lib\site-packages\Script_Writer\image_display_for_save.py " + self.Default_Inteface + ' ' + self.Default_Image_Name,
                shell=True)
        elif self.Default_Inteface and not self.Default_Image_Name:
            subprocess.Popen(
                r"C:\ImageScripter_2\python.exe C:\ImageScripter_2\Lib\site-packages\Script_Writer\image_display_for_save.py " + self.Default_Inteface,
                shell=True)
        else:
            subprocess.Popen(
                r"C:\ImageScripter_2\python.exe C:\ImageScripter_2\Lib\site-packages\Script_Writer\image_display_for_save.py",
                shell=True)
        self.Close_A_Window_Bye_Title('Image Display For Capture')


        #subprocess.Popen(r"C:\ImageScripter_2\python.exe C:\ImageScripter_2\Lib\site-packages\Script_Writer\image_display_for_save.py",shell=True)
        ##subprocess.Popen(r"C:\ImageScripter_2\python.exe C:\ImageScripter_2\Lib\site-packages\Script_Writer\image_display_for_save.py",shell=True)
        print('End')

if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    window = Snipping_Tool_Class()
    window.show()
    app.aboutToQuit.connect(app.deleteLater)
    sys.exit(app.exec_())
