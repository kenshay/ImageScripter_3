import sys
from PyQt5.QtWidgets import QApplication, QWidget
from win32api import GetSystemMetrics
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QMessageBox
from PyQt5 import QtGui, uic, Qt
from PyQt5.QtGui import QStandardItemModel,QStandardItem
import traceback
from variable_file_getter import Variable_File_Getter
import os
from PyQt5.QtGui import QIcon, QPixmap
import base64
import sys
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from Script_Writer.editor import Editor_Class
from Script_Writer.snipping_tool import Snipping_Tool_Class
from win32api import GetSystemMetrics
from tkinter import filedialog
from PyQt5 import QtCore
from tkinter import *
import shutil
import PyQt5
from win32api import GetSystemMetrics
from PyQt5 import QtCore
import shutil
from Script_Writer.information_getter import Information_Getter
from variable_file_getter import Variable_File_Getter
import os

class Overwrite_Image_Class(QWidget):
    def __init__(self):
        super().__init__()
        #self.ui = uic.loadUi(r"database_viewer.ui")
        self.ui = uic.loadUi(r"C:\ImageScripter_2\Lib\site-packages\Script_Writer\overwrite_image.ui")

class Image_Display_Window_Class(QWidget):

    def __init__(self):
        super().__init__()
        #self.ui = uic.loadUi(r"database_viewer.ui")
        self.ui = uic.loadUi(r"C:\ImageScripter_2\Lib\site-packages\Script_Writer\image_display_for_save.ui")
        try:
            LastApp = Variable_File_Getter.getVariableFromFile('last_selected_app')
        except:
            Variable_File_Getter.setFileFromVariable('last_selected_app','Configurator')
        self.ui.comboBox.currentIndexChanged.connect(self.App_combo_selected_has_changed)

        Width = GetSystemMetrics(0)
        Height = GetSystemMetrics(1)
        self.ui.setGeometry(0, 0, Width, Height)
        self.Capture_Path = os.path.abspath(str('capture.png'))
        pixmap_of_templet = QPixmap('capture.png')
        pixmap_of_templet = pixmap_of_templet.scaled(Width / 2, Height / 2, QtCore.Qt.KeepAspectRatio)
        self.ui.label.setPixmap(pixmap_of_templet)
        self.ui.showMaximized()
        self.ui.pushButton.clicked.connect(self.Save_Clicked)
        ApplicationsList = Information_Getter.get_list_of_Applications()
        for app in ApplicationsList:
            self.ui.comboBox.addItem(app)
        index = self.ui.comboBox.findText(LastApp, QtCore.Qt.MatchFixedString)
        if index >= 0:
            self.ui.comboBox.setCurrentIndex(index)
        else:
            self.ui.comboBox.setCurrentIndex(0)


    def App_combo_selected_has_changed(self):
        App = self.ui.comboBox.currentText()
        Variable_File_Getter.setFileFromVariable('last_selected_app',App)

    def Save_Clicked(self):
        quit_msg = "Are you sure you want to save this image"
        reply = QMessageBox.question(self, 'Question',
                                     quit_msg, QMessageBox.Yes, QMessageBox.No)
        if reply == QMessageBox.Yes:
            Selected_App = self.ui.comboBox.currentText()
            Image_name = self.ui.lineEdit.text()
            Applications_Path = Variable_File_Getter.getVariableFromFile('Applications_Folder_Location')
            CurDir = os.getcwd()
            os.chdir(Applications_Path)
            os.chdir(Selected_App)
            Image_name = Image_name.replace('.png','')
            Image_name = Image_name.replace('.PNG','')
            Image_name = Image_name + '.png'
            exists = os.path.isfile(Image_name)
            if not exists:
                shutil.copyfile(self.Capture_Path,Image_name)
                self.ui.close()#goatsarecool
            else:
                Width = GetSystemMetrics(0)
                Height = GetSystemMetrics(1)
                pixmap_of_Image_name = QPixmap(Image_name)
                pixmap_of_Image_name = pixmap_of_Image_name.scaled(Width / 2, Height / 2, QtCore.Qt.KeepAspectRatio)
                self.ui.label_2.setPixmap(pixmap_of_Image_name)
                quit_msg = "This image already exists. Do you want to overwrite it?"
                MessageBox = QMessageBox()
                MessageBox.setIconPixmap(QPixmap(Image_name))
                reply = MessageBox.question(self, 'Question',
                                             quit_msg, QMessageBox.Yes, QMessageBox.No)
                if reply == MessageBox.Yes:
                    shutil.copyfile(self.Capture_Path,Image_name)
                    self.ui.close()



    def Browse_Save_Clicked(self):
        name = False
        Applications_Path = Variable_File_Getter.getVariableFromFile('Applications_Folder_Location')
        CurDir = os.getcwd()
        os.chdir(Applications_Path)
        name = QFileDialog.getSaveFileName(
            parent=self,
            caption=self.tr("Select a file"),
            filter=self.tr('Image files (*.png)'),
        )
        if name:
            name = name[0]
            path = os.path.dirname(os.path.abspath(str(name)))
            print('Name -> ',name)
            print('writing -> ',path)
            if not name.endswith('.png'):
                shutil.copyfile(self.Capture_Path,name + '.png')
                #Variable_File_Getter.setFileFromVariable('Last_Spot_Location_Image_Display', path)
            else:
                shutil.copyfile(self.Capture_Path, name)
                #Variable_File_Getter.setFileFromVariable('Last_Spot_Location_Image_Display', path)
        os.chdir(CurDir)





        '''
        newfilename = False
        print("Save Clicked")
        Applications_Path = Variable_File_Getter.getVariableFromFile('Applications_Folder_Location')
        root = Tk()
        root.withdraw()
        newfilename = filedialog.asksaveasfilename(initialdir=Applications_Path, title="Select file",
                                                   filetypes=(("png files", "*.png"), ("all files", "*.*")))
        root.destroy()
        if newfilename != False:
            if not newfilename.endswith('.png'):
                shutil.copyfile('capture.png',newfilename + '.png')
            else:
                shutil.copyfile('capture.png', newfilename)
        else:
            print("No new file")
        '''




if __name__ == '__main__':
    app = QApplication(sys.argv)
    Image_Display_Window = Image_Display_Window_Class()
    #Script_Writer.showMaximized()
    sys.exit(app.exec_())