import sys
from PyQt5.QtWidgets import QApplication, QWidget
from win32api import GetSystemMetrics
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QMessageBox,QLabel
from PyQt5 import QtGui, uic, Qt
from PyQt5.QtGui import QStandardItemModel,QStandardItem
import traceback
from variable_file_getter import Variable_File_Getter
import os
from PyQt5.QtGui import QIcon, QPixmap
import base64
import sys
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from Script_Writer.editor import Editor_Class
from Script_Writer.snipping_tool import Snipping_Tool_Class
from win32api import GetSystemMetrics
from tkinter import filedialog
from PyQt5 import QtCore
from tkinter import *
import shutil
import PyQt5
from win32api import GetSystemMetrics
from PyQt5 import QtCore
import shutil
from paths import *
from Script_Writer.information_getter import Information_Getter
from variable_file_getter import Variable_File_Getter
import os
try:
    from Tkinter import Tk
except ImportError:
    from tkinter import Tk


def copyToClickBoard(x):
    r = Tk()
    r.withdraw()
    r.clipboard_clear()
    r.clipboard_append(x)
    r.update()  # now it stays on the clipboard after the window is closed
    r.destroy()









class Overwrite_Image_Class(QWidget):
    def __init__(self):
        super().__init__()

        ##overwrite_imageui =  r"C:\ImageScripter_2\Lib\site-packages\Script_Writer\overwrite_image.ui"

        self.ui = uic.loadUi(overwrite_imageui)

class Image_Display_Window_Class(QWidget):

    def __init__(self):
        super().__init__()
        #self.ui = uic.loadUi(r"database_viewer.ui")

        ##image_display_for_saveui2 = r"C:\ImageScripter_2\Lib\site-packages\Script_Writer\image_display_for_save.ui"

        self.ui = uic.loadUi(image_display_for_saveui2)
        self.ui.setWindowTitle("Image Display For Save")
        self.Create_Default_Interface()
        self.Create_Default_Image_Name()
        self.ui.textEdit.hide()

        try:
            ##last_selected_apptxt33 =  r"C:\Settings\last_selected_app.txt"

            with open(last_selected_apptxt33,'r') as f:
                pass
        except:
            with open(last_selected_apptxt33,'w') as f:
                f.write('Configurator')

        try:
            LastApp = Variable_File_Getter.getVariableFromFile('last_selected_app')
        except:
            Variable_File_Getter.setFileFromVariable('last_selected_app','Configurator')

        if self.Default_Inteface != None:
             LastApp = self.Default_Inteface
        if self.Default_Image_Name != None:
            self.ui.lineEdit.setText(self.Default_Image_Name)






        self.ui.comboBox.currentIndexChanged.connect(self.App_combo_selected_has_changed)

        Width = GetSystemMetrics(0)
        Height = GetSystemMetrics(1)
        self.ui.setGeometry(0, 0, Width, Height)

        ##currentcapture22 = r"C:\ImageScripter_2\Lib\site-packages\Script_Writer\capture.png"

        self.Capture_Path = currentcapture22
        #pixmap_of_templet = QPixmap('capture.png')
        #pixmap_of_templet = QPixmap(r"C:\ImageScripter_2\Lib\site-packages\Script_Writer\capture.png")
        pixmap_of_templet = QPixmap(self.Capture_Path)
        pixmap_of_templet = pixmap_of_templet.scaled(Width / 2, Height / 2, QtCore.Qt.KeepAspectRatio)
        self.ui.label.setPixmap(pixmap_of_templet)
        self.ui.showMaximized()
        self.ui.pushButton.clicked.connect(self.Save_Clicked)
        self.ui.pushButton_2.clicked.connect(self.Find_Script_Image_uses)
        ApplicationsList = Information_Getter.get_list_of_Applications()
        for app in ApplicationsList:
            self.ui.comboBox.addItem(app)
        index = self.ui.comboBox.findText(LastApp, QtCore.Qt.MatchFixedString)
        if index >= 0:
            self.ui.comboBox.setCurrentIndex(index)
        else:
            self.ui.comboBox.setCurrentIndex(0)




    def Create_Default_Interface(self):
        try:
            self.Default_Inteface = sys.argv[1]
            print(self.Default_Inteface)
        except:
            self.Default_Inteface = None

    def Create_Default_Image_Name(self):
        try:
            self.Default_Image_Path = sys.argv[2]
            self.Default_Image_Name = os.path.basename(self.Default_Image_Path).replace('.png','')





            print(self.Default_Image_Name)
        except:
            self.Default_Image_Name = None
















    def Find_Script_Image_uses(self):
        self.ui.textEdit.show()
        from Script_Writer.variable_file_getter import Variable_File_Getter
        ##folder = Variable_File_Getter.getVariableFromFile('All_Scripts_Folder_Location')
        folder = All_Scripts_Folder_Location
        image = str(self.ui.lineEdit.text())
        App = str(self.ui.comboBox.currentText())
        look_for_image = App + '.' + image
        print('##############')
        print(look_for_image)
        print('##############')




        import os
        replacement = """some
        multi-line string"""
        for dname, dirs, files in os.walk(folder):
            for fname in files:
                fpath = os.path.join(dname, fname)
                if fpath.endswith('.py'):
                    with open(fpath) as f:
                        s = f.read()
                        if image != '':
                            if look_for_image in s:
                                self.ui.textEdit.append(fpath)
                                print(fpath)




    def App_combo_selected_has_changed(self):
        App = self.ui.comboBox.currentText()
        Variable_File_Getter.setFileFromVariable('last_selected_app',App)

    def Save_Clicked(self):

        self.Find_Script_Image_uses()
        Image_name_with_symbols = str(self.ui.lineEdit.text())
        Image_name_with_symbols = Image_name_with_symbols.lower()
        Image_name_with_symbols = ''.join(e for e in Image_name_with_symbols if e.isalnum())
        self.ui.lineEdit.setText(Image_name_with_symbols)




        quit_msg = 'Are you sure you want to save this image as "' + Image_name_with_symbols + '"'
        reply = QMessageBox.question(self, 'Question',
                                     quit_msg, QMessageBox.Yes, QMessageBox.No)
        if reply == QMessageBox.Yes:
            Selected_App = self.ui.comboBox.currentText()
            print('Selected App -> ',Selected_App)
            Image_name = self.ui.lineEdit.text()
            print('Image_name -> ', Image_name)
            ##Applications_Path = Variable_File_Getter.getVariableFromFile('Applications_Folder_Location')
            Applications_Path = Applications_Folder_Location
            print('Applications_Path -> ', Applications_Path)
            CurDir = os.getcwd()
            os.chdir(Applications_Path)
            os.chdir(Selected_App)
            Image_name = Image_name.replace('.png','')
            Image_name = Image_name.replace('.PNG','')
            Image_name_without_png = Image_name
            Image_name = Image_name + '.png'
            exists = os.path.isfile(Image_name)
            if not exists:
                shutil.copyfile(self.Capture_Path,Image_name)
                self.ui.hide()
                copyToClickBoard(Image_name_without_png)
            else:
                Width = GetSystemMetrics(0)
                Height = GetSystemMetrics(1)
                pixmap_of_Image_name = QPixmap(Image_name)
                pixmap_of_Image_name = pixmap_of_Image_name.scaled(Width / 2, Height / 2, QtCore.Qt.KeepAspectRatio)
                try:
                    self.ui.horizontalLayout_3.removeWidget(self.label_2)
                    self.self.label_2.deleteLater()
                    self.self.label_2 = None
                except Exception as e:
                    print(e)
                self.label_2 = QLabel()
                self.label_2.setPixmap(pixmap_of_Image_name)
                self.ui.horizontalLayout_3.addWidget(self.label_2)
                quit_msg = "This image already exists. Do you want to overwrite it?"
                MessageBox = QMessageBox()
                MessageBox.setIconPixmap(QPixmap(Image_name))
                reply = MessageBox.question(self, 'Question',
                                             quit_msg, QMessageBox.Yes, QMessageBox.No)
                if reply == MessageBox.Yes:
                    shutil.copyfile(self.Capture_Path,Image_name)
                    self.ui.hide()
                    copyToClickBoard(Image_name_without_png)

        ##update_Automcompletetxt = r"C:\ImageScripter_2\Lib\site-packages\Script_Writer\update_Automcomplete.txt"

        with open(update_Automcompletetxt,'w') as f:
            import time
            f.write(str(time.time()))


    def Browse_Save_Clicked(self):
        name = False
        ##Applications_Path = Variable_File_Getter.getVariableFromFile('Applications_Folder_Location')
        Applications_Path = Applications_Folder_Location
        CurDir = os.getcwd()
        os.chdir(Applications_Path)
        name = QFileDialog.getSaveFileName(
            parent=self,
            caption=self.tr("Select a file"),
            filter=self.tr('Image files (*.png)'),
        )
        if name:
            name = name[0]
            path = os.path.dirname(os.path.abspath(str(name)))
            print('Name -> ',name)
            print('writing -> ',path)
            if not name.endswith('.png'):
                shutil.copyfile(self.Capture_Path,name + '.png')
                #Variable_File_Getter.setFileFromVariable('Last_Spot_Location_Image_Display', path)
            else:
                shutil.copyfile(self.Capture_Path, name)
                #Variable_File_Getter.setFileFromVariable('Last_Spot_Location_Image_Display', path)
        os.chdir(CurDir)





        '''
        newfilename = False
        print("Save Clicked")
        Applications_Path = Variable_File_Getter.getVariableFromFile('Applications_Folder_Location')
        root = Tk()
        root.withdraw()
        newfilename = filedialog.asksaveasfilename(initialdir=Applications_Path, title="Select file",
                                                   filetypes=(("png files", "*.png"), ("all files", "*.*")))
        root.destroy()
        if newfilename != False:
            if not newfilename.endswith('.png'):
                shutil.copyfile('capture.png',newfilename + '.png')
            else:
                shutil.copyfile('capture.png', newfilename)
        else:
            print("No new file")
        '''




if __name__ == '__main__':
    app = QApplication(sys.argv)
    Image_Display_Window = Image_Display_Window_Class()
    #Script_Writer.showMaximized()
    sys.exit(app.exec_())