from paths import *
import sys
from PyQt5.QtWidgets import QApplication, QWidget
from win32api import GetSystemMetrics
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QMessageBox,QLabel
from PyQt5 import QtGui, uic, Qt

from PyQt5.QtGui import QStandardItemModel,QStandardItem
import traceback
from variable_file_getter import Variable_File_Getter
import os
from PyQt5.QtGui import QIcon, QPixmap
import base64
import sys
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from Script_Writer.editor import Editor_Class
from Script_Writer.snipping_tool import Snipping_Tool_Class
from win32api import GetSystemMetrics
from tkinter import filedialog
from PyQt5 import QtCore
from tkinter import *
import shutil
import PyQt5
from win32api import GetSystemMetrics
from PyQt5 import QtCore
import shutil
from Script_Writer.information_getter import Information_Getter
from variable_file_getter import Variable_File_Getter
import os
from Script_Writer.information_getter import Information_Getter

from win32api import GetSystemMetrics
import ctypes



class New_Application_Windo_Class(QWidget):

    def __init__(self):
        super().__init__()

        ##Script_Writernew_application_windowui = r"C:\ImageScripter_2\Lib\site-packages\Script_Writer\new_application_window.ui"

        self.ui = uic.loadUi(Script_Writernew_application_windowui)
        self.ui.pushButton.clicked.connect(self.save_button_clicked)
        self.ui.pushButton_2.clicked.connect(self.close_button_clicked)
        self.ui.comboBox_2.currentIndexChanged.connect(self.Tag_combo_selected_has_changed)
        Width = GetSystemMetrics(0)
        Height = GetSystemMetrics(1)
        self.ui.setGeometry(0, 0, Width, Height)
        Windows = self.get_list_of_all_opend_windows()
        for app in Windows:
            self.ui.comboBox_2.addItem(app)
        self.ui.showMaximized()

    def close_button_clicked(self):
        self.ui.hide()




    def save_button_clicked(self):
        try:
            Application_Name = self.ui.lineEdit.text()
            Tags = self.ui.lineEdit_2.text()
            Tags = Tags.split(',')
            TagList = []
            #['Add', 'New', 'Device']
            #TagList.append('[')
            for tag in Tags:
                #tag = "'" + tag + "',"
                TagList.append(tag)
            #TagList.append(']')
            Tags = str(TagList)
            print(Tags)
            Applications_Folder_Path = Information_Getter.get_full_applications_folder_path()
            CurDur = os.getcwd()
            os.chdir(Applications_Folder_Path)
            os.mkdir(Application_Name)
            os.chdir(Application_Name)
            with open('class_name.txt','w') as f:
                f.write("PC_Class")
            with open('ip_address.txt','w') as f:
                f.write("None")
            with open('list_of_tags.txt','w') as f:
                f.write(Tags)
            with open('password.txt','w') as f:
                f.write('None')
            with open('port.txt','w') as f:
                f.write('None')
            with open('user_name.txt','w') as f:
                f.write('None')
            os.chdir(CurDur)

            ##Script_Writerupdate_Automcompletetxt = r"C:\ImageScripter_2\Lib\site-packages\Script_Writer\update_Automcomplete.txt"

            with open(Script_Writerupdate_Automcompletetxt,'w') as f:
                import time
                f.write(str(time.time()))
            self.ui.hide()
        except Exception as e:
            print(e)


    def Tag_combo_selected_has_changed(self):
        App_Tags_String = self.ui.comboBox_2.currentText()
        App_Tags_String = App_Tags_String.replace('   ', ' ')
        App_Tags_String = App_Tags_String.replace('  ', ' ')
        App_Tags_String = App_Tags_String.replace(' ',',')
        self.ui.lineEdit_2.setText(str(App_Tags_String))
        App_Name = self.ui.comboBox_2.currentText()
        App_Name = ''.join(e for e in App_Name if e.isalnum())
        App_Name = App_Name.replace(' ', ',')
        self.ui.lineEdit.setText(str(App_Name))







    def get_list_of_all_opend_windows(self):
        EnumWindows = ctypes.windll.user32.EnumWindows
        EnumWindowsProc = ctypes.WINFUNCTYPE(ctypes.c_bool, ctypes.POINTER(ctypes.c_int), ctypes.POINTER(ctypes.c_int))
        GetWindowText = ctypes.windll.user32.GetWindowTextW
        GetWindowTextLength = ctypes.windll.user32.GetWindowTextLengthW
        IsWindowVisible = ctypes.windll.user32.IsWindowVisible
        titles = []
        def foreach_window(hwnd, lParam):
            if IsWindowVisible(hwnd):
                length = GetWindowTextLength(hwnd)
                buff = ctypes.create_unicode_buffer(length + 1)
                GetWindowText(hwnd, buff, length + 1)
                titles.append(buff.value)
            return True
        EnumWindows(EnumWindowsProc(foreach_window), 0)
        titles = [x for x in titles if x != '']
        Set = set(titles)
        titles = list(Set)

        return sorted(titles)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    New_Application_Windo = New_Application_Windo_Class()
    #Script_Writer.showMaximized()
    sys.exit(app.exec_())