from paths import *

from PyQt5.QtWidgets import (QWidget, QVBoxLayout,
                             QLabel, QApplication)
from PyQt5.QtGui import QPixmap
import sys
import sys
from PyQt5.QtWidgets import QApplication, QWidget
from win32api import GetSystemMetrics
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog,QScrollArea
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QMessageBox
from PyQt5 import QtGui, uic, Qt
from PyQt5.QtGui import QStandardItemModel,QStandardItem
import traceback
import os
from PyQt5.QtGui import QIcon, QPixmap
import base64
import sys
from imagescripter.core.variable_file_getter import Variable_File_Getter
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import shutil
from PyQt5.QtGui import QImage
from PyQt5 import QtWidgets
import cv2
import sys

try:
    from Tkinter import Tk
except ImportError:
    from tkinter import Tk
def copyToClickBoard(x):
    r = Tk()
    r.withdraw()
    r.clipboard_clear()
    r.clipboard_append(x)
    r.update()  # now it stays on the clipboard after the window is closed
    r.destroy()








class Example(QWidget):

    def __init__(self):
        super().__init__()

        self.initUI()

    def initUI(self):
        image = cv2.imread(Templet_Image_File)
        #cv2.circle(image, (970,545), 25, (0, 0, 255))
        xy = Variable_File_Getter.getVariableFromFile('last_x_y')
        List = xy.split(',')
        print(List)
        self.x1 = int(float(List[0]))
        self.y1 = int(float(List[1]))
        #img22 = cv2.cross(image, (self.x1,self.y1), 3, (0, 0, 255), 3)
        img22 = cv2.circle(image, (self.x1,self.y1), 10, (0, 0, 255), -1)
        #img22 = cv2.circle(image, (self.y1,self.x1,), 5, (0, 0, 255), 3)

        ##Last_Templet_Image_with_dotpng = r"C:\Settings\Last_Templet_Image_with_dot.png"


        cv2.imwrite(Last_Templet_Image_with_dotpng,img22)
        #cv2.imshow('Test image', image)
        #cv2.waitKey(0)
        #cv2.destroyAllWindows()
        self.img = QImage(Last_Templet_Image_with_dotpng,img22)

        self.ScrollArea = QScrollArea(self)



        pixmap = QPixmap(QPixmap.fromImage(self.img))
        self.img_label = QLabel()
        self.img_label.setPixmap(pixmap)
        self.img_label.mousePressEvent = self.getPixel
        self.ScrollArea.setWidget(self.img_label)
        self.hbox = QVBoxLayout(self)

        self.xy_label = QLabel()
        newfont = QtGui.QFont("Times", 18, QtGui.QFont.Bold)
        self.xy_label.setFont(newfont)
        self.xy_label.setText('')




        self.hbox.addWidget(self.xy_label)
        self.hbox.addWidget(self.ScrollArea)
        self.setLayout(self.hbox)
        self.move(0, 0)
        self.showMaximized()


    def do_calculations(self):
        x_offset = str(self.x2 - self.x1)
        y_offset = str(self.y2 - self.y1)
        print("xoffset = ", x_offset)
        print("yoffset = ", y_offset)
        data = "xoffset=" + x_offset + ',' + "yoffset=" + y_offset
        print(data)
        copyToClickBoard(data)
        self.xy_label.setText(data)




    def getPixel(self, event):
        try:
            self.x2 = event.pos().x()
            self.y2 = event.pos().y()
            c = self.img.pixel(self.x2,self.y2)  # color code (integer): 3235912
            print(self.x2,self.y2)
            self.do_calculations()
            #return x, y
        except Exception as e:
            print(e)



if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = Example()
    sys.exit(app.exec_())