from paths import *
import sys
from PyQt5.QtWidgets import QApplication, QWidget
from win32api import GetSystemMetrics
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QMessageBox
from PyQt5 import QtGui, uic, Qt
from PyQt5.QtGui import QStandardItemModel,QStandardItem
import traceback
from imagescripter.core.image_manager import Image_Manager
from variable_file_getter import Variable_File_Getter
import os
from PyQt5.QtGui import QIcon, QPixmap
import base64
import sys
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *

exec(Project_Import_Command)
#from elan import *
from Script_Writer.editor import Editor_Class
from Script_Writer.snipping_tool import Snipping_Tool_Class
from win32api import GetSystemMetrics
from tkinter import filedialog
from tkinter import *
import shutil
import PyQt5
from win32api import GetSystemMetrics
from PyQt5 import QtCore
import shutil
import sys
from PyQt5 import QtWidgets, QtCore, QtGui
import tkinter as tk
from PIL import ImageGrab
import numpy as np
import cv2




##Templet_Image_File = r"C:\Settings\Last_Templet_Image.png"
##Capture_Path = r"C:\ImageScripter_2\Lib\site-packages\Script_Writer\capture.png"



try:
    App = sys.argv[1]
except IndexError:
    App = 'Configurator'
    ##raise ValueError('You need App sys Arg in cmd command for this to work!')

try:
    old_image_path = sys.argv[2]
    Image_Name = os.path.basename(old_image_path).replace('.png','')
except IndexError:
    old_image_path = r"C:\Ellumination\Projects\_elan_\elan\Applications_And_Devices\Configurator\configurator_intdfgerface.png"
    Image_Name = os.path.basename(old_image_path).replace('.png', '')


    ##raise ValueError('You need Image Path Arg in cmd command for this to work!')




class Capture_Window_Class(QtWidgets.QWidget):
    def __init__(self,parent):
        super().__init__()
        root = tk.Tk()
        self.parent = parent

        screen_width = root.winfo_screenwidth()
        screen_height = root.winfo_screenheight()
        self.setGeometry(0, 0, screen_width, screen_height)
        self.setWindowTitle(' ')
        self.begin = QtCore.QPoint()
        self.end = QtCore.QPoint()
        self.setWindowOpacity(0.3)
        QtWidgets.QApplication.setOverrideCursor(
            QtGui.QCursor(QtCore.Qt.CrossCursor)
        )
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        print('Capture the screen...')
        self.show()






    def paintEvent(self, event):
        qp = QtGui.QPainter(self)
        qp.setPen(QtGui.QPen(QtGui.QColor('black'), 3))
        qp.setBrush(QtGui.QColor(128, 128, 255, 128))
        qp.drawRect(QtCore.QRect(self.begin, self.end))

    def mousePressEvent(self, event):
        self.begin = event.pos()
        self.end = self.begin
        self.update()

    def mouseMoveEvent(self, event):
        self.end = event.pos()
        self.update()

    def mouseReleaseEvent(self, event):
        QtWidgets.QApplication.setOverrideCursor(
            QtGui.QCursor(QtCore.Qt.ArrowCursor)
        )



        self.close()
        try:
            x1 = min(self.begin.x(), self.end.x())
            y1 = min(self.begin.y(), self.end.y())
            x2 = max(self.begin.x(), self.end.x())
            y2 = max(self.begin.y(), self.end.y())

            img = ImageGrab.grab(bbox=(x1, y1, x2, y2))
            ##sitepackagesScript_Writercapturepng = r"C:\ImageScripter_2\Lib\site-packages\Script_Writer\capture.png"

            img.save(capturepng)
            img = cv2.cvtColor(np.array(img), cv2.COLOR_BGR2RGB)
            self.save_image()
            #cv2.imshow('Captured Image', img)
            #cv2.waitKey(0)
            #cv2.destroyAllWindows()
        except Exception as e:
            print(e)

    def Close_A_Window_Bye_Title(self,title):
        import win32con,win32gui
        handle = win32gui.FindWindow(None,title)
        win32gui.PostMessage(handle, win32con.WM_CLOSE, 0, 0)



    def save_image(self):
        shutil.copyfile(capturepng,old_image_path)
        self.parent.close()
        #self.ui.close()
        #self.close()


class Image_Display_Window_Class(QWidget):
    def __init__(self):
        super().__init__()
        #self.ui = uic.loadUi(r"database_viewer.ui")

        ##sitepackagesScript_WriterImage_Converterui = r"C:\ImageScripter_2\Lib\site-packages\Script_Writer\Image_Converter.ui"


        self.ui = uic.loadUi(sitepackagesScript_WriterImage_Converterui)
        self.ui.pushButton_5.clicked.connect(self.capture_was_clicked)
        Width = GetSystemMetrics(0)
        Height = GetSystemMetrics(1)
        self.ui.setGeometry(0, 0, Width, Height)
        self.Load_image()
        self.Find_Script_Image_uses_And_Set_Text_Edit()
        self.ui.showMaximized()

    def capture_was_clicked(self):
           self.capture_window = Capture_Window_Class(self.ui)
           self.capture_window.show()



    def Load_image(self):
        print('Load Image')
        pixmap_ = QPixmap(Template_Path)
        self.ui.label.setPixmap(pixmap_)

        self.ui.lineEdit.setText(old_image_path)
        self.ui.lineEdit.setReadOnly(True)

        pixmap_ = QPixmap(old_image_path)
        self.ui.label_4.setPixmap(pixmap_)


    def Find_Script_Image_uses_And_Set_Text_Edit(self):
        self.ui.textEdit.show()
        from Script_Writer.variable_file_getter import Variable_File_Getter
        ##folder = Variable_File_Getter.getVariableFromFile('All_Scripts_Folder_Location')
        folder = All_Scripts_Folder_Location
        look_for_image = App + '.' + Image_Name
        print('##############')
        print(look_for_image)
        print('##############')
        import os
        replacement = """some
        multi-line string"""
        for dname, dirs, files in os.walk(folder):
            for fname in files:
                fpath = os.path.join(dname, fname)
                if fpath.endswith('.py'):
                    with open(fpath) as f:
                        s = f.read()
                        if look_for_image in s:
                                self.ui.textEdit.append(fpath)
                                print(fpath)









if __name__ == '__main__':
    app = QApplication(sys.argv)
    Image_Display_Window = Image_Display_Window_Class()
    #Image_Display_Window.showMaximized()
    sys.exit(app.exec_())