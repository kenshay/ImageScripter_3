import sys
from PyQt5.QtWidgets import QApplication, QWidget
from win32api import GetSystemMetrics
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QMessageBox
from PyQt5 import QtGui, uic, Qt
from PyQt5.QtGui import QStandardItemModel,QStandardItem
import traceback
from imagescripter.core.image_manager import Image_Manager
from variable_file_getter import Variable_File_Getter
import os
from PyQt5.QtGui import QIcon, QPixmap
import base64
import sys
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from elan import *
from Script_Writer.editor import Editor_Class
from Script_Writer.snipping_tool import Snipping_Tool_Class
from win32api import GetSystemMetrics
from tkinter import filedialog
from tkinter import *
import shutil
import PyQt5
from win32api import GetSystemMetrics
from PyQt5 import QtCore
import shutil
Templet_Image_File = r"C:\Settings\Last_Templet_Image.png"
class Image_Display_Window_Class(QWidget):

    def __init__(self):
        super().__init__()
        #self.ui = uic.loadUi(r"database_viewer.ui")
        self.ui = uic.loadUi(r"C:\ImageScripter_2\Lib\site-packages\Script_Writer\diplay_image_for_capture.ui")
        Width = GetSystemMetrics(0)
        Height = GetSystemMetrics(1)
        self.ui.setGeometry(0, 0, Width, Height)
        self.Load_image()
        self.ui.showMaximized()
        load_image_picture_changed_paths = [Templet_Image_File]
        self.picture_changed_watcher = QtCore.QFileSystemWatcher(load_image_picture_changed_paths)
        self.picture_changed_watcher.fileChanged.connect(self.Load_image)
        self.Create_Default_Interface()
        self.ui.actionRefresh.triggered.connect(self.get_new_image_and_load)




        ##############################################################################################


    def get_new_image_and_load(self):
            try:
                if self.Default_Inteface != None:
                    newimage = self.Default_Inteface._get_image_of_screen_()
                    Image_Manager.Update_Templet_With_Image_Path(newimage)
                else:
                    print('Default Device Is None')
            except Exception as e:
                print(e)
                print(522)



    def Create_Default_Interface(self):
        try:
            self.Default_Inteface = eval(sys.argv[1])
            print(self.Default_Inteface)
        except:
            self.Default_Inteface = None




    def Load_image(self):
        print('Load Image')
        pixmap_ = QPixmap(Templet_Image_File)
        self.ui.label.setPixmap(pixmap_)






if __name__ == '__main__':
    app = QApplication(sys.argv)
    Image_Display_Window = Image_Display_Window_Class()
    #Image_Display_Window.showMaximized()
    sys.exit(app.exec_())