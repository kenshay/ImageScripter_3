import sys
from PyQt5.QtWidgets import QApplication, QWidget
from win32api import GetSystemMetrics
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QMessageBox
from PyQt5 import QtGui, uic, Qt
from PyQt5.QtGui import QStandardItemModel,QStandardItem
import traceback
import subprocess
from variable_file_getter import Variable_File_Getter
import os
from PyQt5.QtGui import QIcon, QPixmap
import base64
import sys
from PIL import Image
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from Script_Writer.editor import Editor_Class
from Script_Writer.snipping_tool import Snipping_Tool_Class
import paramiko
from scp import SCPClient

import shutil
import PyQt5
from win32api import GetSystemMetrics
from PyQt5 import QtCore


class Script_Writer_Class(QWidget):

    def __init__(self):
        super().__init__()
        #self.ui = uic.loadUi(r"database_viewer.ui")
        self.ui = uic.loadUi(r"C:\ImageScripter_2\Lib\site-packages\Script_Writer\script_writer.ui")
        self.editor = Editor_Class()
        self.ui.setWindowTitle("Script Writer")
        self.ui.horizontalLayout.addWidget(self.editor)
        self.ui.pushButton_4.clicked.connect(self.capture_button_clicked)
        self.ui.pushButton_3.clicked.connect(self.getITP8_Image_was_clicked)
        self.ui.actionOpen.triggered.connect(self.open_clicked)
        self.ui.actionSave.triggered.connect(self.Save_clicked)
        self.ui.actionSave_As.triggered.connect(self.Save_As_clicked)
        self.ui.actionClose.triggered.connect(self.Close_clicked)
        #self.ui.show()
        self.ui.showMaximized()

    def open_clicked(self):
        print('open')

    def Save_clicked(self):
        print('save')

    def Save_As_clicked(self):
        print('save as')

    def Close_clicked(self):
        print('close')

    def getITP8_Image_was_clicked(self):
        self.get_image_from_itp8()
        subprocess.Popen(r"C:\ImageScripter_2\python.exe C:\ImageScripter_2\Lib\site-packages\Script_Writer\diplay_image_for_capture.py", shell=True)






    def capture_button_clicked(self):
        import subprocess
        subprocess.Popen(r"C:\ImageScripter_2\python.exe C:\ImageScripter_2\Lib\site-packages\Script_Writer\snipping_tool.py", shell=True)


    def get_image_from_itp8(self):
        print("Getting image from ITP")
        try:
            Main_Image_File = r"C:\ImageScripter_2\Lib\site-packages\Script_Writer\image_file.png"
            destination_File = r"screenshot.png"
            nbytes = 4096
            print('show_image_from_itp8')
            #hostname = '192.168.1.2'
            hostname = '192.168.0.37'
            port = 2199
            username = 'root'
            password = 'N0rt3k$C'
            command = 'scrot /tmp/test.png'
            def createSSHClient():
                client = paramiko.SSHClient()
                #client.load_system_host_keys()
                client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                client.connect(hostname, port, username, password)
                return client
            client = paramiko.Transport((hostname, port))
            client.connect(username=username, password=password)
            stdout_data = []
            stderr_data = []
            session = client.open_channel(kind='session')
            session.exec_command(command)
            while True:
                if session.recv_ready():
                    data = session.recv(nbytes)
                    print(data)
                    stdout_data.append(data)
                if session.recv_stderr_ready():
                    data = session.recv_stderr(nbytes)
                    print(data)
                    stderr_data.append(data)
                if session.exit_status_ready():
                    break
            session.close()
            client.close()
            ssh = createSSHClient()
            scp = SCPClient(ssh.get_transport())
            scp.get('/tmp/test.png', destination_File)
            scp.close()
            picture = Image.open(destination_File)
            picture = picture.rotate(90, expand=True)
            picture.save(Main_Image_File)
            print('done')
        except Exception as e:
            try:
                ssh.close()
            except:
                pass
            try:
                scp.close()
            except:
                pass
            try:
                client.close()
            except:
                pass
            print(e)
        print("Finsihed Getting image from ITP")





if __name__ == '__main__':
    app = QApplication(sys.argv)
    Script_Writer = Script_Writer_Class()
    #Script_Writer.get_image_from_itp8()
    #Script_Writer.showMaximized()
    sys.exit(app.exec_())