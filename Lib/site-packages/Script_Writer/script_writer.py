#C:\ImageScripter_2\python.exe C:\ImageScripter_2\Lib\site-packages\Script_Writer\script_writer.py C:\ImageScripter_2\Lib\site-packages\imagescripter\core\script_runner_class.py run

import sys
from PyQt5.QtWidgets import QApplication, QWidget
from win32api import GetSystemMetrics
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog,QTextEdit,QMainWindow
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QMessageBox,QHBoxLayout
from PyQt5 import QtGui, uic, Qt
from PyQt5.QtGui import QStandardItemModel,QStandardItem
from imagescripter.core.functions import Ping_Notify_If_Fail
import os
from paths import *
from tkinter import filedialog
from tkinter import *
import signal
import subprocess
import traceback
import subprocess
import subprocess
from Script_Writer.information_getter import Information_Getter
from variable_file_getter import Variable_File_Getter
from paths import *

import os
from PyQt5.QtGui import QIcon, QPixmap
import base64
import sys
from screeninfo import get_monitors
from PIL import Image
from paths import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from Script_Writer.editor import Editor_Class
from Script_Writer.snipping_tool import Snipping_Tool_Class
import paramiko
from scp import SCPClient
#from tkinter import *
import shutil
import PyQt5
from win32api import GetSystemMetrics
from PyQt5 import QtCore
import win32api
from paths import *
import cv2



##Templet_Image_File = r"C:\Settings\Last_Templet_Image.png"
##Templet_Image_File_With_Red_Box = r"C:\Settings\Last_Templet_Image_With_Red_Box.png"
##Image_Cordinates_location = r"C:\Settings\Current_Image_Cordinates.txt"
##Templet_Image_File = r"C:\Settings\Last_Templet_Image.png"
##Templet_Image_File_With_Red_Box = r"C:\Settings\Last_Templet_Image_With_Red_Box.png"
##Target_Image_File = r"C:\Settings\Last_Target_Image.png"



##Show_Image_Ui_Location = r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\show_image.ui"
Show_Image_Ui_Location = ImageScripter_Location + r"Lib\site-packages\imagescripter\core\show_image.ui"




##Image_Cordinates_location = r"C:\Settings\Current_Image_Cordinates.txt"
##Current_Running_Script_txt = r"C:\Settings\Current_Running_Script.txt"
##Current_Action_txt = r"C:\Settings\Current_Action.txt"
##Current_Thresh_Match_txt = r"C:\Settings\Current_Thresh_Match.txt"
def Create_Controller_List_File_If_Not_Exists():
    ##Run_Controller_List_Script_Runnertxt = r"C:\Settings\Run_Controller_List_Script_Runner.txt"
    File_Location = Run_Controller_List_Script_Runnertxt
    try:
        with open(File_Location,'r') as f:
            pass
    except:
        print('Creating Controller List FIle...')
        with open(File_Location,'w') as f:
            f.write('')
        print('Created Controller List FIle')
Create_Controller_List_File_If_Not_Exists()
def recursive_overwrite(src, dest, ignore=None):
    if os.path.isdir(src):
        if not os.path.isdir(dest):
            os.makedirs(dest)
        files = os.listdir(src)
        if ignore is not None:
            ignored = ignore(src, files)
        else:
            ignored = set()
        for f in files:
            if f not in ignored:
                print(os.path.join(src, f))
                print(os.path.join(dest, f))
                recursive_overwrite(os.path.join(src, f),
                                    os.path.join(dest, f),
                                    ignore)
    else:
        shutil.copyfile(src, dest)
def Set_Last_Opened_File(path):
    try:
        ##Lastopenedscript = r"C:\Settings\Last_Opened_Script.txt"

        with open(Lastopenedscript, 'r') as f:
            pass
    except FileNotFoundError:
        with open(Lastopenedscript, 'w') as f:
            f.write('')
    #print('Set_Last_Open_Path->',path)
    try:
        Variable_File_Getter.setFileFromVariable('Last_Opened_Script',path)
    except Exception as e:
        pass
        #print(e)
def Get_Last_Opened_File():
    #print('Get_Last_Opened_File')
    try:
        with open(Lastopenedscript, 'r') as f:
            pass
    except FileNotFoundError:
        with open(Lastopenedscript, 'w') as f:
            f.write('')
    try:
        path = Variable_File_Getter.getVariableFromFile('Last_Opened_Script')
        return path
    except Exception as e:
        #print(e)
        return ''
def GetSecondDisplyRect():
    secondMonort = None
    monitors = win32api.EnumDisplayMonitors()
    for i in monitors:
        a = win32api.GetMonitorInfo(i[0])
        if a['Flags'] == 0:
            x,y,w,h = a['Monitor']
            w = x - w
            h = y - h
            w = -w
            h = -h
            #print(x,y,w,h)
            return x,y,w,h
class Find_Window_Class_Old(QMainWindow):
    def __init__(self, parent):
        super(QMainWindow, self).__init__(parent)
        self.parent = parent
        self.TextEdit = QTextEdit(self)
        self.TextEdit.setFontPointSize(12)
        self.setCentralWidget(self.TextEdit)
        #self.ui.tabWidget.currentChanged.connect(self.onChange) #changed!
        text = self.parent.ui.tabWidget.currentWidget().text()
        self.TextEdit.setText(text)
        cursor = self.TextEdit.textCursor()
        # Setup the desired format for matches
        format = QtGui.QTextCharFormat()
        format.setBackground(QtGui.QBrush(QtGui.QColor("red")))
        # Setup the regex engine
        pattern = "word"
        regex = QtCore.QRegExp(pattern)
        # Process the displayed document
        pos = 0
        index = regex.indexIn(self.TextEdit.toPlainText(), pos)
        while (index != -1):
            # Select the matched text and apply the desired format
            cursor.setPosition(index)
            cursor.movePosition(QtGui.QTextCursor.EndOfWord, 1)
            cursor.mergeCharFormat(format)
            # Move to the next match
            pos = index + regex.matchedLength()
            index = regex.indexIn(self.TextEdit.toPlainText(), pos)
        self.TextEdit.showMaximized()
        self.showMaximized()
class Find_Window_Class(QMainWindow):
    def __init__(self,parent):
        super().__init__()
        #self.ui = uic.loadUi(r"database_viewer.ui")
        self.parent = parent
        ##self.ui = uic.loadUi(r"C:\ImageScripter_2\Lib\site-packages\Script_Writer\find_window.ui")
        self.ui = uic.loadUi(ImageScripter_Location + r"Lib\site-packages\Script_Writer\find_window.ui")
        self.ui.pushButton.clicked.connect(self.find_text)
        self.ui.pushButton_2.clicked.connect(self.keep_changes)
        #self.ui.tabWidget.tabBarClicked.connect(self.onChange1)  # changed!
        self.ui.pushButton_5.clicked.connect(self.undo_pressed)
        self.ui.pushButton_4.clicked.connect(self.cancel_pressed)
        self.ui.pushButton_6.clicked.connect(self.clear_text_of_color)
        self.ui.pushButton_3.clicked.connect(self.find_and_replace_pressed)
        self.set_original_text()
        self.ui.showMaximized()
        #self.checkThreadTimer = QtCore.QTimer(self)
        #self.checkThreadTimer.setInterval(500)  # .5 seconds
        #self.checkThreadTimer.timeout.connect(self.onChange1)
    def find_and_replace_pressed(self):
        self.clear_text_of_color()
        text = str(self.ui.textEdit.toPlainText())
        Replace_String = str(self.ui.lineEdit_2.text())
        pattern = str(self.ui.lineEdit.text())
        text = text.replace(pattern,Replace_String)
        self.ui.textEdit.setText(text)
        cursor = self.ui.textEdit.textCursor()
        # Setup the desired format for matches
        format = QtGui.QTextCharFormat()
        format.setBackground(QtGui.QBrush(QtGui.QColor("red")))
        # Setup the regex engine
        regex = QtCore.QRegExp(Replace_String)
        # Process the displayed document
        pos = 0
        index = regex.indexIn(self.ui.textEdit.toPlainText(), pos)
        while (index != -1):
            # Select the matched text and apply the desired format
            cursor.setPosition(index)
            cursor.movePosition(QtGui.QTextCursor.EndOfWord, 1)
            cursor.mergeCharFormat(format)
            # Move to the next match
            pos = index + regex.matchedLength()
            index = regex.indexIn(self.ui.textEdit.toPlainText(), pos)
    def undo_pressed(self):
        self.set_original_text()
    def cancel_pressed(self):
        self.ui.close()
        self.close()
    def set_original_text(self):
        text = self.parent.ui.tabWidget.currentWidget().text()
        self.ui.textEdit.setText(text)
    def keep_changes(self):
        text = str(self.ui.textEdit.toPlainText())
        self.parent.ui.tabWidget.currentWidget().setText(text)
        self.ui.close()
        self.close()
    def clear_text_of_color(self):
        text = str(self.ui.textEdit.toPlainText())
        self.ui.textEdit.setText(text)
    def find_text(self):
        self.clear_text_of_color()
        cursor = self.ui.textEdit.textCursor()
        # Setup the desired format for matches
        format = QtGui.QTextCharFormat()
        format.setBackground(QtGui.QBrush(QtGui.QColor("red")))
        # Setup the regex engine
        pattern = str(self.ui.lineEdit.text())
        regex = QtCore.QRegExp(pattern)
        # Process the displayed document
        pos = 0
        index = regex.indexIn(self.ui.textEdit.toPlainText(), pos)
        while (index != -1):
            # Select the matched text and apply the desired format
            cursor.setPosition(index)
            cursor.movePosition(QtGui.QTextCursor.EndOfWord, 1)
            cursor.mergeCharFormat(format)
            # Move to the next match
            pos = index + regex.matchedLength()
            index = regex.indexIn(self.ui.textEdit.toPlainText(), pos)
##    def __init__(self):
#        super().__init__()
#        self.ui = uic.loadUi(r"C:\ImageScripter_2\Lib\site-packages\Script_Writer\Script_Converter_Setup.ui", self)
class Script_Writer_Class(QWidget):
    def __init__(self,app):
        super().__init__()
        #self.ui = uic.loadUi(r"database_viewer.ui")
        self.args = sys.argv
        print('#############################')
        print(self.args)
        print('#############################')
        self.run_on_start = False
        try:
            self.arg_script = self.args[1]
        except:
            self.arg_script = ''
        try:
            command_arg = self.args[2]
            if command_arg == 'run':
                self.run_on_start = True
            else:
                self.run_on_start = False
        except:
            run_on_start = False
        self.app = app


        ##self.ui = uic.loadUi(r"C:\ImageScripter_2\Lib\site-packages\Script_Writer\script_writer.ui")
        self.ui = uic.loadUi(ImageScripter_Location + r"Lib\site-packages\Script_Writer\script_writer.ui")


        self.ui.closeEvent = self.closeEvent
        self.ui.stackedWidget.setCurrentIndex(0)
        #self.ui.pushButton_4.setEnabled(False)
        self.Opened_Tabs = []
        self.Tab_Index = 1
        self.Kill_Recorder_Process()
        path = Get_Last_Opened_File()
        if path == '':
            tab = Editor_Class(self,'')
            self.ui.tabWidget.addTab(tab, str(1))
            self.Tab_Index += 1
            self.Opened_Tabs.append(tab)
        self.ui.comboBox.currentIndexChanged.connect(self.on_combobox_changed)
        self.ui.tabWidget.setTabsClosable(True)
        self.ui.setWindowTitle("Script Writer")
        #self.ui.horizontalLayout.addWidget(self.editor)
        self.last_opened_file = None
        self.ui.label.setText('')
        #Set_Last_Opened_File('')

        with open(Capture_Mode, 'w') as f:
            f.write(r'False')

        ##Variable_File_Getter.setFileFromVariable('Capture_Mode', 'False')




        self.ui.checkBox_2.toggled.connect(self.capture_checkbox_was_toggled)
        self.ui.tabWidget.currentChanged.connect(self.tab_bar_clicked)  # changed!
        self.ui.tabWidget.tabCloseRequested.connect(self.removeTab)
        self.ui.pushButton_4.clicked.connect(self.capture_button_clicked)
        self.ui.pushButton.clicked.connect(self.print_screen_clicked)
        self.ui.pushButton_2.clicked.connect(self.Start_Last_Script_Video)
        self.ui.pushButton_3.clicked.connect(self.getITP8_Image_was_clicked)
        self.ui.pushButton_10.clicked.connect(self.getITP8_Portrait_Image_was_clicked)
        self.ui.pushButton_13.clicked.connect(self.convert_script_was_clicked)
        self.ui.pushButton_14.clicked.connect(self.run_with_video_was_clicked)
        self.ui.pushButton_12.clicked.connect(self.Run_With_Console)
        self.ui.pushButton_9.clicked.connect(self.getITP12_Image_was_clicked)
        self.ui.pushButton_6.clicked.connect(self.run_was_clicked)
        self.ui.pushButton_8.clicked.connect(self.Quick_run_was_clicked)
        self.ui.pushButton_7.clicked.connect(self.stop_was_clicked)
        ################################################################
        load_image_picture_changed_paths = [Templet_Image_File]
        self.picture_changed_watcher = QtCore.QFileSystemWatcher(load_image_picture_changed_paths)
        self.picture_changed_watcher.fileChanged.connect(self.Load_image_without_red)
        ##############################################################################################
        ################################################################
        RED_load_image_picture_changed_paths = [Image_Cordinates_location]
        self.RED_picture_changed_watcher = QtCore.QFileSystemWatcher(RED_load_image_picture_changed_paths)
        self.RED_picture_changed_watcher.fileChanged.connect(self.draw_red_box)
        ##############################################################################################
        App_path_folder = Information_Getter.get_full_applications_folder_path()
        Folder_watch_list = []
        Folder_watch_list.append(App_path_folder)
        #print(Folder_watch_list)


        ##AutoComplePath = r"C:\ImageScripter_2\Lib\site-packages\Script_Writer\update_Automcomplete.txt"
        AutoComplePath = ImageScripter_Location + r"Lib\site-packages\Script_Writer\update_Automcomplete.txt"




        self.Applications_And_Images_changed_watcher = QtCore.QFileSystemWatcher([AutoComplePath])
        self.Applications_And_Images_changed_watcher.fileChanged.connect(self.detected_application_change)
        ##############
        self.ui.tabWidget.setTabEnabled(1,False)  # enable/disable the tab
        # set the style sheet
        self.ui.tabWidget.setStyleSheet("QTabBar::tab::disabled {width: 0; height: 0; margin: 0; padding: 0; border: none;} ")
        #############################
        self.ui.pushButton_5.clicked.connect(self.new_application_clicked)
        self.ui.actionOpen.triggered.connect(self.open_clicked)
        self.ui.actionKill_Recorder_Process.triggered.connect(self.Kill_Recorder_Process)
        self.ui.actionOpen_Script_Runner.triggered.connect(self.Open_Script_Runner)
        self.ui.actionOpen_Multi_Script_Runner.triggered.connect(self.Open_Script_Runner_Multi)
        self.ui.actionOpen_Script_Runner_For_Testing.triggered.connect(self.Open_Script_Runner_For_Testing)
        self.ui.actionOpen_Scritp_Runner_Restart_On_Fail.triggered.connect(self.Open_Script_Runner_Restart_On_Fail)
        self.ui.actionOpen_Scripts_Folder.triggered.connect(self.Open_Scripts_Folder)
        self.ui.actionOpen_Elan_Folder.triggered.connect(self.Open_Elan_Folder)
        self.ui.actionOpen_NAS_Drive.triggered.connect(self.Open_NAS_Folder)
        self.ui.actionOpen_Applications_Folder.triggered.connect(self.Open_Applications_Folder)
        self.ui.actionOpen_Cloud_Directory.triggered.connect(self.Open_Cloud_Directory)
        self.ui.actionFind.triggered.connect(self.find_clicked)
        self.ui.actionConfig.triggered.connect(self.open_config)
        self.ui.actionOpen_Current.triggered.connect(self.open_current)
        self.ui.actionOpen_2.triggered.connect(self.open_clicked)
        self.ui.actionRemove_Selected_Tab.triggered.connect(self.Remove_Selected_Tab)
        #self.ui.actionAdd.triggered.connect(self.add_tab_clicked)
        self.ui.actionEverything_to_Desktop.triggered.connect(self.Export_Everything_to_Desktop)
        self.ui.actionExport_to_Cloud.triggered.connect(self.Export_TO_NAS_Drive)
        self.ui.actionDocument.triggered.connect(self.Help_Document_clicked)
        self.ui.actionSave_2.triggered.connect(self.Save_clicked)
        self.ui.actionSave_As.triggered.connect(self.Save_As_clicked)
        self.ui.actionNew.triggered.connect(self.New_was_clicked)
        self.ui.actionNew_2.triggered.connect(self.New_was_clicked)
        self.ui.actionRun_Script.triggered.connect(self.run_was_clicked)
        self.ui.actionRefresh_AutoComplete.triggered.connect(self.reset_automcompletion)
        self.ui.actionClose.triggered.connect(self.Close_clicked)
        self.ui.actionQuick_Run.triggered.connect(self.Quick_run_was_clicked)
        self.ui.actionSmart_Export_To_Cloud.triggered.connect(self.Smart_Export_To_Cloud)
        self.ui.actionSmart_Export_To_Desktop.triggered.connect(self.Smart_Export_To_Desktop)
        self.ui.actionImport_From_Computer.triggered.connect(self.Import_From_Computer)
        self.ui.actionImport_From_Cloud.triggered.connect(self.Import_From_Cloud)
        #self.ui.show()
        #self.ui.showMaximized()
        if PyQt5.QtWidgets.QDesktopWidget().screenCount() == 2:
            x, y, w, h = GetSecondDisplyRect()
            self.ui.setGeometry(x, y, w, h)
            self.ui.showMaximized()
        if PyQt5.QtWidgets.QDesktopWidget().screenCount() >= 3:
            x, y, w, h = GetSecondDisplyRect()
            self.ui.setGeometry(x, y, w, h)
            self.ui.showMaximized()
        else:
            self.ui.showMaximized()
        if self.arg_script != '':
            self.open_to_file(self.arg_script)
        else:
            path = Get_Last_Opened_File()
            if path != '':
                self.open_to_file(path)


        ##os.chdir(r"C:\ImageScripter_2\Lib\site-packages\elan\Scripts")
        os.chdir(PROJECT + r"\Scripts")


        if self.run_on_start:
            self.run_was_clicked()
    def convert_script_was_clicked(self):
        try:
            file_path = self.ui.tabWidget.currentWidget().file_path
            print('push')
            import subprocess
            #subprocess.Popen(r'C:\ImageScripter_2\python.exe C:\ImageScripter_2\Lib\site-packages\Script_Writer\Script_Converter_Setup.py ' + file_path,shell=False)

            apath = Python_Exe_Location + ' ' + ImageScripter_Location + r'Lib\site-packages\Script_Writer\Script_Converter_Setup.py ' + file_path
            ##os.system(r'C:\ImageScripter_2\python.exe C:\ImageScripter_2\Lib\site-packages\Script_Writer\Script_Converter_Setup.py ' + file_path)
            os.system(apath)





            New_File = Variable_File_Getter.getVariableFromFile('Converted_Script_Path')
            if New_File != 'None':
                self.open_to_file(New_File)
                self.ui.checkBox_2.setChecked(True)
                with open(Capture_Mode, 'w') as f:
                    f.write(r'True')


                ##Variable_File_Getter.setFileFromVariable('Capture_Mode', 'True')
            print('finish')
        except Exception as e:
            print(e)
    def capture_checkbox_was_toggled(self):
        try:
            if self.ui.checkBox_2.isChecked() == True:
                ##Variable_File_Getter.setFileFromVariable('Capture_Mode','True')
                with open(Capture_Mode,'w') as f:
                    f.write(r'True')
            else:
                if self.ui.checkBox_2.isChecked() == False:
                    with open(Capture_Mode, 'w') as f:
                        f.write(r'False')
                    ##Variable_File_Getter.setFileFromVariable('Capture_Mode', 'False')
        except Exception as e:
            print(e)
    def Import_Base(self,Path):
        try:
            import ctypes  # An included library with Python install.
            def Mbox(title, text, style):
                return ctypes.windll.user32.MessageBoxW(0, text, title, style)
            last_dir = os.getcwd()
            print('########')
            print(Path)
            print('########')
            os.chdir(Path)
            txt1 = ''
            file_name = ''
            if 'Windows-7' not in self.get_windows_version():
                os.chdir(Path)
                # name = QFileDialog.getOpenFolderName(parent=self,caption=self.tr("Select a file"),filter=self.tr('Image files (*.py)'),)
                file_name = QFileDialog.getExistingDirectory(self, 'Select directory',directory=Path)
            else:
                print(r'This is windows 7')
                os.chdir(r'C:\\')

                os.chdir(Path)
                #file_name = QFileDialog.getExistingDirectory(self, 'Select directory', QFileDialog.DontUseNativeDialog,directory=Path)
                file_name = QFileDialog.getExistingDirectory(self, 'Select directory',options = QFileDialog.DontUseNativeDialog,directory=Path)
                #root = Tk()
                #root.withdraw()
                #dirname = filedialog.askdirectory(parent=root, initialdir="/", title='Please select a directory')
                #if len(dirname) > 0:
                #   print("You chose %s" % dirname)



            if file_name != '':
                List = file_name.split('/')
                Last = List[-1]
                if file_name != '':
                    if 'Smart_Export' in Last:
                        src = file_name


                        dest = ImageScripter_Location + r"Lib\site-packages\elan"
                        ##dest = r"C:\ImageScripter_2\Lib\site-packages\elan"



                        print('################ Files Saved #######################')
                        files = []
                        for r, d, f in os.walk(src):
                            for file in f:
                                files.append(os.path.join(r, file))
                        if len(files) != 0:
                            ##Imported_Images_And_Scriptstxt = r"C:\Settings\Imported_Images_And_Scripts.txt"

                            TextFile = Imported_Images_And_Scriptstxt
                            with open(TextFile,'w') as Textf:
                                Textf.write('')
                            Textf = open(TextFile,'a')
                            for f in files:
                                if f.endswith('.png') or f.endswith('.py'):
                                    print(f)
                                    Textf.write('\n')
                                    Textf.write(f)
                            Textf.close()
                            os.system(TextFile)
                        print('####################################################')
                        recursive_overwrite(src, dest)
                        Mbox('Notice', 'Finished ' + file_name, 1)
                    else:
                        Mbox('Notice', 'Please Select Smart_Export ->' + Last, 1)
            else:
                Mbox('Notice', 'Import Canceled', 1)
            os.chdir(last_dir)
        except Exception as e:
            #raise
            print(e)
    def Import_From_Computer(self):
        print("Computer Import")
        try:
            self.Import_Base(os.path.join(os.environ["HOMEPATH"], "Desktop"))
        except Exception as e:
            raise
            print(e)
    def Import_From_Cloud(self):
        print("Cloud Import")
        try:
            ##writerbackups123123 = r"\\172.16.43.21\nas\Cloud_Drive\Writer_Backups"

            self.Import_Base(writerbackups123123)
        except Exception as e:
            raise
            print(e)
    def on_combobox_changed(self):
        try:
            currentText = str(self.ui.comboBox.currentText())
            if currentText != 'Links':
                if currentText != '':
                    if currentText != ' ':
                        self.open_to_file(currentText)
        except Exception as e:
            print(e)
    def open_config(self):
        try:
            import subprocess

            apath = Python_Exe_Location + ' ' + ImageScripter_Location + r'Lib\site-packages\Script_Writer\settings_page.py'

            subprocess.Popen(apath, shell=True)


            ##subprocess.Popen(r"C:\ImageScripter_2\python.exe C:\ImageScripter_2\Lib\site-packages\Script_Writer\settings_page.py", shell=True)



        except Exception as e:
            print(e)
    def tab_bar_clicked(self):
        try:
            file_path = self.ui.tabWidget.currentWidget().file_path
            self.ui.label.setText(file_path)
            Set_Last_Opened_File(file_path)
        except Exception as e:
            print(e)
    def find_clicked(self):
        try:
            self.Find_Window = Find_Window_Class(self)
        except Exception as e:
            print(e)
    def Open_Cloud_Directory(self):
        try:
            #os.system(r'\\172.16.43.21\nas\Cloud_Drive\Writer_Backups')
            #os.system(r'start "\\172.16.43.21\nas\Cloud_Drive\Writer_Backups"')
            import subprocess

            ##explorer_to_nas = r'explorer "\\172.16.43.21\nas\Cloud_Drive\Writer_Backups"'


            subprocess.Popen(explorer_to_nas)
        except Exception as e:
            print(e)
    def removeTab(self, index):
        try:
            if self.ui.tabWidget.count() != 1:
                #widget = self.tabs.widget(index)
                #if widget is not None:
                #    widget.deleteLater()
                self.ui.tabWidget.removeTab(index)
        except Exception as e:
            print(e)
    def Remove_Selected_Tab(self):
        try:
            index = self.ui.tabWidget.currentIndex()
            if index != 0:
                self.ui.tabWidget.removeTab(index)
        except Exception as e:
            print(e)
    def add_tab_clicked(self):
        try:
            tab = Editor_Class(self,'')
            #self.ui.tabWidget.addTab(tab,str(self.Tab_Index))
            self.ui.tabWidget.addTab(tab, str(self.ui.tabWidget.count() + 1))
            #self.ui.tabWidget.addTab(tab,str(self.Tab_Index))
            self.Tab_Index += 1
            self.Opened_Tabs.append(tab)
        except Exception as e:
            print(e)
    def Export_TO_NAS_Drive(self):
        try:
            import ctypes
            import time
            import threading
            from shutil import copyfile
            from distutils.dir_util import copy_tree
            def Mbox(title, text, style):
                return ctypes.windll.user32.MessageBoxW(0, text, title, style)
            Mbox('Notice', 'Started exporting, please wait for the finished message', 1)
            ##Exported_Scripttxt = r"C:\Settings\Exported_Script.txt"


            Exported_Script = Exported_Scripttxt
            with open(Exported_Script,'w') as f:
                text = self.ui.tabWidget.currentWidget().text()
                text = text.replace('\r\n', '\n')
                text = text.rstrip("\r\n")
                f.write(text)
                #f.write(self.editor.text())
            lastLoc = os.getcwd()



            os.chdir(writeback21312)
            timeString = str(time.time())
            os.mkdir(timeString)
            os.chdir(timeString)


            ##fromDirectory = r"C:\ImageScripter_2\Lib\site-packages\elan\Applications_And_Devices"
            fromDirectory = ImageScripter_Location + r"Lib\site-packages\elan\Applications_And_Devices"



            toDirectory = "Applications_And_Devices"
            copy_tree(fromDirectory, toDirectory)
            copy_tree(ImageScripter_Location + r"Lib\site-packages\elan\Scripts", "Scripts")
            ##copy_tree(r"C:\ImageScripter_2\Lib\site-packages\elan\Scripts", "Scripts")



            Doc = ImageScripter_Location + r"Lib\site-packages\Script_Writer\Help_Document.rtf"
            ##Doc = r"C:\ImageScripter_2\Lib\site-packages\Script_Writer\Help_Document.rtf"


            copyfile(Doc, 'Help_Document.rtf')
            ####################################
            ####################################
            with open(Exported_Script, 'r') as f:
                text = f.read()
            with open('Exported_Script.py', 'w') as f:
                f.write(text)
            #####################################
            #####################################
            import ctypes  # An included library with Python install.
            def Mbox(title, text, style):
                return ctypes.windll.user32.MessageBoxW(0, text, title, style)
            Mbox('Notice', 'Finished', 1)
        except Exception as e:
            print(e)
    def Export_Everything_to_Desktop(self):
        try:
            ##SettingsExported_Scripttxt = r"C:\Settings\Exported_Script.txt"


            Exported_Script = SettingsExported_Scripttxt
            #print('#################')
            #print(Exported_Script)
            with open(Exported_Script,'w') as f:
                try:
                    text = self.ui.tabWidget.currentWidget().text()
                except Exception as e:
                    print(e)
                    text = ''
                text = text.replace('\r\n', '\n')
                text = text.rstrip("\r\n")
                f.write(text)
                #f.write(self.editor.text())
            import threading
            from shutil import copyfile
            import time
            from distutils.dir_util import copy_tree
            class MyThread(threading.Thread):
                def run(self):
                    import time
                    File_Name_is = 'Export' + str(time.time())
                    import ctypes  # An included library with Python install.
                    def Mbox(title, text, style):
                        return ctypes.windll.user32.MessageBoxW(0, text, title, style)
                    Mbox('Notice', 'Started exporting, please wait for the finished message. The Name of the folder is ...' + File_Name_is, 1)
                    Desktop = os.path.join(os.environ["HOMEPATH"], "Desktop")
                    os.chdir(Desktop)
                    try:
                        shutil.rmtree(File_Name_is)
                    except Exception as e:
                        print(e)
                    Fail = True
                    for i in range(100):
                        try:
                            os.mkdir(File_Name_is)
                            os.chdir(File_Name_is)
                            Fail = False
                            break
                        except:
                            import time
                            time.sleep(2)
                    if False == True:
                        raise ValueError('Cant Delete Export')


                    fromDirectory = ImageScripter_Location + r"Lib\site-packages\elan\Applications_And_Devices"
                    ##fromDirectory = r"C:\ImageScripter_2\Lib\site-packages\elan\Applications_And_Devices"


                    toDirectory = "Applications_And_Devices"
                    copy_tree(fromDirectory, toDirectory)


                    copy_tree(ImageScripter_Location + r"Lib\site-packages\elan\Scripts","Scripts")
                    ##copy_tree(r"C:\ImageScripter_2\Lib\site-packages\elan\Scripts","Scripts")



                    ##Doc = r"C:\ImageScripter_2\Lib\site-packages\Script_Writer\Help_Document.rtf"
                    Doc = ImageScripter_Location + r"Lib\site-packages\Script_Writer\Help_Document.rtf"
                    copyfile(Doc,'Help_Document.rtf')
                    ####################################
                    ####################################
                    with open(Exported_Script, 'r') as f:
                        text = f.read()
                    with open('Exported_Script.py','w') as f:
                        f.write(text)
                    #####################################
                    #####################################
                    import ctypes  # An included library with Python install.
                    def Mbox(title, text, style):
                        return ctypes.windll.user32.MessageBoxW(0, text, title, style)
                    Mbox('Notice', 'Finished', 1)
            thread = MyThread()
            thread.daemon = True
            thread.start()
        except Exception as e:
            print(e)
            import ctypes  # An included library with Python install.
            def Mbox(title, text, style):
                return ctypes.windll.user32.MessageBoxW(0, text, title, style)
            Mbox('Notice', e, 1)
    def Help_Document_clicked(self):
        try:
            import threading
            class MyThread(threading.Thread):
                def run(self):
                    ##os.system("C:\ImageScripter_2\Lib\site-packages\Script_Writer\Help_Document.rtf")
                    os.system(ImageScripter_Location + r"Lib\site-packages\Script_Writer\Help_Document.rtf")
            thread = MyThread()
            thread.daemon = True
            thread.start()
            #try:
            #    os.system("C:\ImageScripter_2\Lib\site-packages\Script_Writer\Help_Document.rtf")
            #except Exception as e:
            #    print(e)
            #import subprocess
            #subprocess.call(["C:\ImageScripter_2\Lib\site-packages\Script_Writer\Help_Document.rtf"])
            #subprocess.call([r"C:\Program Files\Windows NT\Accessories\wordpad.exe",r"C:\ImageScripter_2\Lib\site-packages\Script_Writer\Help_Document.rtf"])
            #try:
            #    self.get_image_from_itp8()
            #    subprocess.Popen(r"C:\ImageScripter_2\Lib\site-packages\Script_Writer\Help_Document.rtf", shell=False)
            #except Exception as e:
            #    print(e)
        except Exception as e:
            print(e)
    def draw_red_box(self):
        try:
            with open(Image_Cordinates_location, 'r') as f:
                txt = f.read()
                List = txt.split(',')
                x1 = int(List[0])
                y1 = int(List[1])
                x2 = int(List[2])
                y2 = int(List[3])
            img = cv2.imread(Templet_Image_File, 3)
            cv2.rectangle(img, (x1, y1), (x2, y2), (0, 0, 255), 2)
            cv2.imwrite(Templet_Image_File_With_Red_Box, img)
            self.load_image_picture_changed(Templet_Image_File_With_Red_Box)
        except Exception as e:
            print(e)
    def Load_image_without_red(self):
        try:
            self.load_image_picture_changed(Templet_Image_File)
        except Exception as e:
            print(e)
    def load_image_picture_changed(self,Image_Path):
        try:
            #Width = GetSystemMetrics(1)
            #Height = GetSystemMetrics(0)
            #t = Tk()  # new window
            #t.update()
            #t.attributes("-alpha", 00)
            #t.state('zoomed')  # maximize the window
            #Height = t.winfo_height()  # ...
            #Width = t.winfo_width()
            if len(get_monitors()) == 2:
                monitors = get_monitors()
                seconds_monitor = monitors[1]
                Height = seconds_monitor.height
                Width = seconds_monitor.width
            else:
                Width = GetSystemMetrics(1)
                Height = GetSystemMetrics(0)
            Height = Height - 250
            Pixmap = QtGui.QPixmap(Image_Path)
            Pixmap = Pixmap.scaled(Width / 2,Height / 2,QtCore.Qt.KeepAspectRatio)
            self.ui.label_3.setPixmap(Pixmap)
            self.ui.label_3.resize(Pixmap.width() / 2, Pixmap.height() / 2)
            Pixmap2 = QtGui.QPixmap(Target_Image_File)
            Pixmap2 = Pixmap2.scaled(200, 100, QtCore.Qt.KeepAspectRatio)
            self.ui.label_2.setPixmap(Pixmap2)
            self.ui.label_2.resize(Pixmap2.width(), Pixmap2.height() - Pixmap.height())
            #try:
            #    with open(Current_Running_Script_txt,'r') as f:
            #        txt = f.read()
            #    self.ui.label_4.setText(txt)
            #except:
            #    self.ui.label_4.setText('')
            #try:
            #    with open(Current_Action_txt,'r') as f:
            #        txt = f.read()
            #    self.ui.label_5.setText(txt + '... ')
            #except:
            #    self.ui.label_5.setText('')
            #try:
            #   with open(Current_Thresh_Match_txt,'r') as f:
            #        txt = f.read()
            #    List = txt.split('.')
            #    PercentLong = List[1]
            #    txt = PercentLong[:2]
            #    if txt != '':
            #        self.ui.label_6.setText(txt + '% MATCH')
            #    else:
            #        self.ui.label_6.setText('')
            #except Exception as e:
            #    print(e)
            #    self.ui.label_6.setText('')
        except Exception as e:
                print(e)
    def detected_application_change(self):
        try:
            #print('Changed')
            self.reset_automcompletion()
        except Exception as e:
            print(e)
    def reset_automcompletion(self):
        try:
            #print('Reset Automation')
            self.editor.init_or_reset_automcompletion()
        except Exception as e:
            print(e)
    def doNothing(self,x):
        pass
    def p(self,x):
        try:
            #print(x)
            self.ui.stackedWidget.setCurrentIndex(1)
            self.ui.pushButton_7.setEnabled(True)
            #self.ui.pushButton_4.setEnabled(True)
            self.ui.pushButton_6.setEnabled(False)
            self.ui.pushButton_8.setEnabled(False)
        except Exception as e:
            print(e)
    def p1(self,x):
        try:
            #print(x)
            self.ui.pushButton_7.setChecked(False)
            self.ui.pushButton_7.setEnabled(False)
            #self.ui.pushButton_4.setChecked(False)
            #self.ui.pushButton_4.setEnabled(False)
            self.ui.pushButton_6.setEnabled(True)
            self.ui.pushButton_8.setEnabled(True)
            self.ui.stackedWidget.setCurrentIndex(0)
        except Exception as e:
            print(e)
    def p_(self,x):
        try:
            #print(x)
            #self.ui.stackedWidget.setCurrentIndex(1)
            self.ui.pushButton_7.setEnabled(True)
            #self.ui.pushButton_4.setEnabled(True)
            self.ui.pushButton_6.setEnabled(False)
            self.ui.pushButton_8.setEnabled(False)
        except Exception as e:
            print(e)
    def p1_(self,x):
        try:
            #print(x)
            self.ui.pushButton_7.setChecked(False)
            self.ui.pushButton_7.setEnabled(False)
            #self.ui.pushButton_4.setChecked(False)
            #self.ui.pushButton_4.setEnabled(False)
            self.ui.pushButton_6.setEnabled(True)
            self.ui.pushButton_8.setEnabled(True)
            #self.ui.stackedWidget.setCurrentIndex(0)
        except Exception as e:
            print(e)
    def New_was_clicked(self):
        try:
            tab = Editor_Class(self,'')
            self.ui.tabWidget.addTab(tab, str(self.ui.tabWidget.count() + 1))
            self.Tab_Index += 1
            index = self.ui.tabWidget.indexOf(tab)
            self.ui.tabWidget.setCurrentIndex(index)
            self.ui.tabWidget.currentWidget().setText('')
            self.ui.label.setText("")
            Set_Last_Opened_File('')
            self.last_opened_file = None
        except Exception as e:
            print(e)
    def stop_was_clicked(self):
        try:
            self.kil_console_process_external()
        except Exception as e:
            print(e)
        try:
            self.Kill_Recorder_Process()
            self.process.terminate()
            self.process.kill()
            self.process.close()
            self.append('Script Stopped')
        except Exception as e:
            self.append('Script Stopped')
            print(e)
        #self.process = QtCore.QProcess(self)
        #self.process.readyReadStandardOutput.connect(self.stdoutReady)
        #self.process.readyReadStandardError.connect(self.stderrReady)
        #self.process.started.connect(lambda: p('Started!'))
        #self.process.finished.connect(lambda: p('Finished!'))
        #print('Starting process')
        #self.process.start(r'C:\ImageScripter_2\python.exe', [r"C:\Users\Automation3\Desktop\test.py"])
    def keyPressEvent(self, ev):
        try:
            pass
            #print("key press")
        except Exception as e:
            print(e)
    def Smart_Export_To_Cloud(self):
        try:
            from sys import executable
            from subprocess import Popen, CREATE_NEW_CONSOLE
            ##executable = r"C:\ImageScripter_2\python.exe"
            executable = Python_Exe_Location


            ##script = r"C:\ImageScripter_2\Lib\site-packages\Script_Writer\rsync\smart_export_to_cloud.py"
            script = ImageScripter_Location + r"Lib\site-packages\Script_Writer\rsync\smart_export_to_cloud.py"




            Popen([executable, script], creationflags=CREATE_NEW_CONSOLE)
            #input('Enter to exit from this launcher script...')
            #import subprocess
            #subprocess.call(r"C:\ImageScripter_2\python.exe C:\ImageScripter_2\Lib\site-packages\Script_Writer\rsync\smart_export_to_cloud.py", shell=True)
            #"C:\ImageScripter_2\Lib\site-packages\Script_Writer\rsync\smart_export_to_cloud.py"
            #subprocess.Popen(r"C:\ImageScripter_2\python.exe C:\ImageScripter_2\Lib\site-packages\Script_Writer\rsync\smart_export_to_cloud.py", shell=True)
        except Exception as e:
            print(e)
    def Smart_Export_To_Desktop(self):
        try:
            from sys import executable
            from subprocess import Popen, CREATE_NEW_CONSOLE

            executable = Python_Exe_Location
            ##executable = r"C:\ImageScripter_2\python.exe"




            ##script = r"C:\ImageScripter_2\Lib\site-packages\Script_Writer\rsync\smart_export_to_deskop.py"
            script = ImageScripter_Location + r"Lib\site-packages\Script_Writer\rsync\smart_export_to_deskop.py"


            Popen([executable, script], creationflags=CREATE_NEW_CONSOLE)
            #input('Enter to exit from this launcher script...')
            #import subprocess
            #subprocess.call(r"C:\ImageScripter_2\python.exe C:\ImageScripter_2\Lib\site-packages\Script_Writer\rsync\smart_export_to_cloud.py", shell=True)
            #"C:\ImageScripter_2\Lib\site-packages\Script_Writer\rsync\smart_export_to_cloud.py"
            #subprocess.Popen(r"C:\ImageScripter_2\python.exe C:\ImageScripter_2\Lib\site-packages\Script_Writer\rsync\smart_export_to_cloud.py", shell=True)
        except Exception as e:
            print(e)
            input()
    def Quick_run_was_clicked(self):
        try:
            self.Kill_Recorder_Process()
            #print('Run was Clicked')
            self.ui.comboBox.clear()
            self.ui.textEdit.setStyleSheet('color: rgb(85, 255, 12);\nbackground-color: rgb(0, 0, 0);')
            self.ui.textEdit.setText('Running Script...\n')
            import time
            # time.sleep(5)
            #text = 'from imagescripter import *\n from elan import *\n'
            text = ''
            #text = text + self.editor.text()
            text = text + self.ui.tabWidget.currentWidget().text()
            text = text.replace('\r\n', '\n')
            text = text.rstrip("\r\n")



            ##with open(r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\run.py", 'w') as f:
            with open(ImageScripter_Location + r"Lib\site-packages\imagescripter\core\run.py", 'w') as f:
                f.write(text)



            # self.ui.textEdit.setText('')
            self.process = QtCore.QProcess(self)
            self.process.readyReadStandardOutput.connect(self.stdoutReady)
            self.process.readyReadStandardError.connect(self.stderrReady)
            self.process.started.connect(lambda: self.p_('Started!'))
            self.process.finished.connect(lambda: self.p1_('Finished!'))
            #print('Starting process')
            file_path = self.ui.tabWidget.currentWidget().file_path
            if file_path != '':
                self.Save_clicked()
                ##self.process.start(r'C:\ImageScripter_2\python.exe', ['-u',file_path])
                self.process.start(Python_Exe_Location, ['-u',file_path])
            else:
                ##self.process.start(r'C:\ImageScripter_2\python.exe', ['-u',r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\run.py"])
                self.process.start(Python_Exe_Location, ['-u',ImageScripter_Location + r"Lib\site-packages\imagescripter\core\run.py"])
            self.Comment_Out_Lines_If_True()
            ## filters output
            # import subprocess
            # proc = subprocess.Popen([r'C:\ImageScripter_2\python.exe',r"C:\Users\Automation3\Desktop\test.py"], stdout=subprocess.PIPE,shell=True)
            # while True:
            #    line = proc.stdout.readline()
            #    if line != '':
            #        # the real code does filtering here
            #        print("test:", line.rstrip())
            #        print(line)
            #    else:
            #        break
        except Exception as e:
            print(e)
    def Comment_Out_Lines_If_True(self):
        try:
            if self.ui.checkBox.isChecked():
                editor = self.ui.tabWidget.currentWidget()
                text = editor.text()
                List = text.split()
                NewList = []
                for i in List:
                    if not i.startswith('#'):
                        i = '#' + i + '\n'
                        NewList.append(i)
                    else:
                        NewList.append(i + '\n')
                # for i in NewList:
                #   #print(i)
                str1 = ''.join(NewList)
                editor.setText(str1)
        except Exception as e:
            print(e)
    def run_line_clicked(self,line_txt):
        try:
            self.ui.stackedWidget.setCurrentIndex(1)
            self.ui.comboBox.clear()
            self.ui.textEdit.setStyleSheet('color: rgb(85, 255, 12);\nbackground-color: rgb(0, 0, 0);')
            self.ui.textEdit.setText('Running Script...\n')
            import time
            #time.sleep(5)
            #text  = 'from imagescripter import *\n from elan import *\n'
            text = ''
            text = text + line_txt
            ##with open(r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\run.py",'w') as f:
            with open(ImageScripter_Location + r"Lib\site-packages\imagescripter\core\run.py",'w') as f:
                f.write(text)
            #self.ui.textEdit.setText('')
            self.process = QtCore.QProcess(self)
            self.process.readyReadStandardOutput.connect(self.stdoutReady)
            self.process.readyReadStandardError.connect(self.stderrReady)
            self.process.started.connect(lambda: self.p('Started!'))
            self.process.finished.connect(lambda: self.p1('Finished!'))
            #print('Starting process')
            self.process.start(Python_Exe_Location, ['-u',ImageScripter_Location + r"Lib\site-packages\imagescripter\core\run.py"])
            ##self.process.start(r'C:\ImageScripter_2\python.exe', ['-u',r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\run.py"])
            self.Comment_Out_Lines_If_True()
        except Exception as e:
            print(e)
    def Quick_run_line_clicked(self,line_txt):
        try:
            self.Kill_Recorder_Process()
            #print('Run was Clicked')
            self.ui.comboBox.clear()
            self.ui.textEdit.setStyleSheet('color: rgb(85, 255, 12);\nbackground-color: rgb(0, 0, 0);')
            self.ui.textEdit.setText('Running Script...\n')
            import time
            # time.sleep(5)
            #text = 'from imagescripter import *\n from elan import *\n'
            text = ''
            #text = text + self.editor.text()
            text = text + line_txt
            #text = text + self.ui.tabWidget.currentWidget().text()
            text = text.replace('\r\n', '\n')
            text = text.rstrip("\r\n")
            ##with open(r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\run.py", 'w') as f:
            with open(ImageScripter_Location + r"Lib\site-packages\imagescripter\core\run.py", 'w') as f:
                f.write(text)
            # self.ui.textEdit.setText('')
            self.process = QtCore.QProcess(self)
            self.process.readyReadStandardOutput.connect(self.stdoutReady)
            self.process.readyReadStandardError.connect(self.stderrReady)
            self.process.started.connect(lambda: self.p_('Started!'))
            self.process.finished.connect(lambda: self.p1_('Finished!'))
            #print('Starting process')




            ##self.process.start(r'C:\ImageScripter_2\python.exe', ['-u',r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\run.py"])
            self.process.start(Python_Exe_Location, ['-u',ImageScripter_Location + r"Lib\site-packages\imagescripter\core\run.py"])



            self.Comment_Out_Lines_If_True()
            ## filters output
            # import subprocess
            # proc = subprocess.Popen([r'C:\ImageScripter_2\python.exe',r"C:\Users\Automation3\Desktop\test.py"], stdout=subprocess.PIPE,shell=True)
            # while True:
            #    line = proc.stdout.readline()
            #    if line != '':
            #        # the real code does filtering here
            #        print("test:", line.rstrip())
            #        print(line)
            #    else:
            #        break
        except Exception as e:
            print(e)
        #try:
        #    #self.ui.stackedWidget.setCurrentIndex(1)
        #    self.ui.comboBox.clear()
        #    self.ui.textEdit.setStyleSheet('color: rgb(85, 255, 12);\nbackground-color: rgb(0, 0, 0);')
        #    self.ui.textEdit.setText('Running Script...\n')
        #    import time
        #    #time.sleep(5)
        #    text  = 'from elan import *\n'
        #    text = text + line_txt
        #    with open(r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\run.py",'w') as f:
        #        f.write(text)
        #    #self.ui.textEdit.setText('')
        #    self.process = QtCore.QProcess(self)
        #    self.process.readyReadStandardOutput.connect(self.stdoutReady)
        #    self.process.readyReadStandardError.connect(self.stderrReady)
        #    self.process.started.connect(lambda: self.p('Started!'))
        #    self.process.finished.connect(lambda: self.p1('Finished!'))
        #    #print('Starting process')
        #    self.process.start(r'C:\ImageScripter_2\python.exe', ['-u',r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\run.py"])
        #    self.Comment_Out_Lines_If_True()
        #except Exception as e:
        #    print(e)
    def run_for_offset(self,line_txt):
        try:
            #self.ui.stackedWidget.setCurrentIndex(1)
            #self.ui.textEdit.setText('Running Script...\n')
            #import time
            #time.sleep(5)
            #text  = 'from imagescripter import *\n from elan import *\n'
            text = ''
            text = text + line_txt
            ##with open(r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\run.py",'w') as f:
            with open(ImageScripter_Location + r"Lib\site-packages\imagescripter\core\run.py",'w') as f:
                f.write(text)
            #self.ui.textEdit.setText('')
            self.process = QtCore.QProcess(self)
            #self.process.readyReadStandardOutput.connect(self.stdoutReady)
            #self.process.readyReadStandardError.connect(self.stderrReady)
            #self.process.started.connect(lambda: self.p('Started!'))
            #self.process.finished.connect(lambda: self.p1('Finished!'))
            #print('Starting process')
            self.process.start(Python_Exe_Location, ['-u',ImageScripter_Location + r"Lib\site-packages\imagescripter\core\run.py"])
            ##self.process.start(r'C:\ImageScripter_2\python.exe', ['-u',r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\run.py"])
            #self.Comment_Out_Lines_If_True()
        except Exception as e:
            print(e)
    def Run_With_Console(self):
        try:

            #self.p(0)
            self.Kill_Recorder_Process()
            #self.ui.stackedWidget.setCurrentIndex(1)
            #self.ui.comboBox.clear()
            #self.ui.textEdit.setStyleSheet('color: rgb(85, 255, 12);\nbackground-color: rgb(0, 0, 0);')
            #self.ui.textEdit.setText('Running Script...\n')
            import time

            # time.sleep(5)
            text = 'try:\n'
            #text = text + 'from imagescripter import *\n from elan import *\n'
            text = ''
            text = text + self.ui.tabWidget.currentWidget().text()
            text = '\t'.join(text.splitlines(True))
            text = text.replace('\r\n', '\n')
            text = text.rstrip("\r\n")
            text = text + '\nexcept Exception as e:\n\t\t\tprint(e)\n\t\t\tinput()'
            ##with open(r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\run.py", 'w') as f:
            with open(ImageScripter_Location + r"Lib\site-packages\imagescripter\core\run.py", 'w') as f:
                f.write(text)
            from sys import executable
            from subprocess import Popen, CREATE_NEW_CONSOLE
            ##executable = r"C:\ImageScripter_2\python.exe"
            executable = Python_Exe_Location


            script = ImageScripter_Location + r"Lib\site-packages\imagescripter\core\run.py"
            ##script = r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\run.py"


            print(executable, ' ', script)
            self.console_process = Popen([executable,script], creationflags=CREATE_NEW_CONSOLE)



            #self.p1(0)
            #self.console_pid = os.getpid(self.console_process)
            #os.killpg(self.console_pid, signal.SIGTERM)
            self.Comment_Out_Lines_If_True()
        except Exception as e:
            print(e)
    def kil_console_process_external(self):
        os.kill(self.console_process.pid, signal.SIGTERM)
    def get_video_thumbnail(self):
        import subprocess
        curdir = os.getcwd()


        os.chdir(ImageScripter_Location + r"Lib\site-packages\imagescripter\exe")
        ##os.chdir(r"C:\ImageScripter_2\Lib\site-packages\imagescripter\exe")

        ##SettingsLast_Videoavi = r"C:\Settings\Last_Video.avi"
        ##SettingsLast_Videopng = r"C:\Settings\Last_Video.png"

        video_input_path = SettingsLast_Videoavi
        img_output_path = SettingsLast_Videopng
        subprocess.call(['ffmpeg', '-i', video_input_path, '-ss', '00:00:00.000', '-vframes', '1', img_output_path])
    def Start_Last_Script_Video(self):
        try:
            #subprocess.Popen(
            #    r"C:\ImageScripter_2\python.exe C:\ImageScripter_2\Lib\site-packages\Script_Writer\Video_Player_Script.py",
            #    shell=True)

            apath = Python_Exe_Location + ' ' + ImageScripter_Location + r'Lib\site-packages\Script_Writer\Video_Player_Script.py'
            subprocess.Popen(apath,shell=True)

        except Exception as e:
            print(e)
    def run_with_video_was_clicked(self):
        try:
            self.Kill_Recorder_Process()
            self.ui.stackedWidget.setCurrentIndex(1)
            # print('Run was Clicked')
            self.ui.comboBox.clear()
            self.ui.textEdit.setStyleSheet('color: rgb(85, 255, 12);\nbackground-color: rgb(0, 0, 0);')
            self.ui.textEdit.setText('Running Script...\n')
            import time
            # time.sleep(5)
            #text = 'from imagescripter import *\n from elan import *\n'
            text = ''
            text = text + self.ui.tabWidget.currentWidget().text()
            text = text.replace('\r\n', '\n')
            text = text.rstrip("\r\n")
            ##with open(r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\run.py", 'w') as f:
            with open(ImageScripter_Location + r"Lib\site-packages\imagescripter\core\run.py", 'w') as f:
                f.write(text)
            # self.ui.textEdit.setText('')
            self.process = QtCore.QProcess(self)
            self.process.readyReadStandardOutput.connect(self.stdoutReady)
            self.process.readyReadStandardError.connect(self.stderrReady)
            self.process.started.connect(lambda: self.p('Started!'))
            self.process.finished.connect(lambda: self.p1('Finished!'))
            # print('Starting process')
            file_path = self.ui.tabWidget.currentWidget().file_path
            if file_path != '':
                self.Save_clicked()
                ##Variable_File_Getter.setFileFromVariable('script_runner_script_path',file_path)
                with open(script_runner_script_path, 'w') as f:
                    f.write(file_path)




                self.process.start(Python_Exe_Location, ['-u',ImageScripter_Location + r'Lib\site-packages\imagescripter\core\imagescripter_script.py'])
                ##self.process.start(r'C:\ImageScripter_2\python.exe', ['-u',r'C:\ImageScripter_2\Lib\site-packages\imagescripter\core\imagescripter_script.py'])
            else:
                ##Variable_File_Getter.setFileFromVariable('script_runner_script_path',r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\run.py")
                with open(script_runner_script_path, 'w') as f:
                    f.write(ImageScripter_Location + r"Lib\site-packages\imagescripter\core\run.py")

                ##Variable_File_Getter.setFileFromVariable('script_runner_script_path',ImageScripter_Location + r"Lib\site-packages\imagescripter\core\run.py")





                ##self.process.start(r'C:\ImageScripter_2\python.exe',['-u', r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\imagescripter_script.py"])
                self.process.start(Python_Exe_Location,['-u', ImageScripter_Location + r"Lib\site-packages\imagescripter\core\imagescripter_script.py"])
            self.Comment_Out_Lines_If_True()
        except Exception as e:
            print(e)
    def run_was_clicked(self):
        try:

            self.Kill_Recorder_Process()

            self.ui.stackedWidget.setCurrentIndex(1)
            #print('Run was Clicked')
            self.ui.comboBox.clear()

            self.ui.textEdit.setStyleSheet('color: rgb(85, 255, 12);\nbackground-color: rgb(0, 0, 0);')
            self.ui.textEdit.setText('Running Script...\n')

            import time
            #time.sleep(5)
            #text  = 'from imagescripter import *\n from elan import *\n'
            text = ''

            text = text + self.ui.tabWidget.currentWidget().text()
            text = text.replace('\r\n', '\n')
            text = text.rstrip("\r\n")

            ##with open(r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\run.py",'w') as f:
            with open(ImageScripter_Location + r"Lib\site-packages\imagescripter\core\run.py",'w') as f:
                f.write(text)

            #self.ui.textEdit.setText('')
            self.process = QtCore.QProcess(self)
            self.process.readyReadStandardOutput.connect(self.stdoutReady)
            self.process.readyReadStandardError.connect(self.stderrReady)

            self.process.started.connect(lambda: self.p('Started!'))
            self.process.finished.connect(lambda: self.p1('Finished!'))
            #print('Starting process')
            file_path = self.ui.tabWidget.currentWidget().file_path

            if file_path != '':
                self.Save_clicked()
                ##self.process.start(r'C:\ImageScripter_2\python.exe', ['-u',file_path])
                self.process.start(Python_Exe_Location, ['-u',file_path])
            else:
                ##self.process.start(r'C:\ImageScripter_2\python.exe', ['-u',r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\run.py"])
                self.process.start(Python_Exe_Location, ['-u',ImageScripter_Location + r"Lib\site-packages\imagescripter\core\run.py"])
            self.Comment_Out_Lines_If_True()

        except Exception as e:
            print(e)
    def stdoutReady(self):
        try:
            text = str(self.process.readAllStandardOutput(),encoding = "utf-8")
            #self.ui.label_4.setText(text)
            self.ui.textEdit.setStyleSheet('color: rgb(85, 255, 12);\nbackground-color: rgb(0, 0, 0);')
            ##Variable_File_Getter.setFileFromVariable('Active_Script_Ouput',text)
            with open(Active_Script_Ouput,'w') as f:
                f.write(text)

            self.append(text)
        except Exception as e:
            print(e)
    def stderrReady(self):
        try:
            text = str(self.process.readAllStandardError(),encoding = "utf-8")
            self.ui.textEdit.setStyleSheet('color: rgb(255, 0, 0);\nbackground-color: rgb(0, 0, 0);')
            ##Variable_File_Getter.setFileFromVariable('Active_Script_Ouput', text)
            with open(Active_Script_Ouput, 'w') as f:
                f.write(text)
            self.append(text)
            import re
            text = str(text)
            list_of_links = re.findall('File "(.*)"', text)
            self.ui.comboBox.addItem('Links')
            for i in list_of_links:
                #print("link->",i)
                self.ui.comboBox.addItem(i)
        except Exception as e:
            print(e)
    def append(self, text):
        try:
            cursor = self.ui.textEdit.textCursor()
            cursor.movePosition(cursor.End)
            cursor.insertText(text)
            self.ui.textEdit.setTextCursor(cursor)
            #cursor.insertText('\n')
            #self.ui.textEdit.verticalScrollBar().setValue(self.ui.textEdit.verticalScrollBar().maximum())
            self.ui.textEdit.ensureCursorVisible()
        except Exception as e:
            print(e)
    def open_current(self):
        try:
            txt1 = ''
            name = ''
            if 'Windows-7' not in self.get_windows_version():
                name = QFileDialog.getOpenFileName(parent=self,caption=self.tr("Select a file"),filter=self.tr('Image files (*.py)'),)
            else:
                name = QFileDialog.getOpenFileName(None, 'Open File', '.', '*', '*', QFileDialog.DontUseNativeDialog)
            if name != '':
                file_name = name[0]
                if file_name != '':
                    with open(file_name,'r') as f:
                        txt1 = f.read()
                        self.last_opened_file = file_name
                        self.ui.label.setText(self.last_opened_file)
                        Set_Last_Opened_File(file_name)
                    txt1 = os.linesep.join([s for s in txt1.splitlines() if s])
                    #w = self.ui.tabWidget.currentWidget()
                    self.ui.tabWidget.currentWidget().setText(txt1)
        except Exception as e:
            print(e)
    def Open_Script_Runner_Restart_On_Fail(self):
        try:
            ##path = r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\script_runner_class_repeate_after_fail_start_over.py"
            path = ImageScripter_Location + r"Lib\site-packages\imagescripter\core\script_runner_class_repeate_after_fail_start_over.py"
            self.open_to_file(path)
            #with open(path,'r') as f:
            #    txt1 = f.read()
            #self.ui.tabWidget.currentWidget().setText(txt1)
            #self.ui.label.setText(path)
        except Exception as e:
            print(e)
    def Open_Script_Runner_For_Testing(self):
        try:
            ##path = r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\script_runner_for_testing.py"
            print('##################')
            print(ImageScripter_Location)
            path = ImageScripter_Location + r"Lib\site-packages\imagescripter\core\script_runner_for_testing.py"
            self.open_to_file(path)
            #with open(path,'r') as f:
            #    txt1 = f.read()
            #self.ui.tabWidget.currentWidget().setText(txt1)
            #self.ui.label.setText(path)
        except Exception as e:
            print(e)
    def Open_Scripts_Folder(self):
        try:
            ##self.open_to_directory(r"C:\ImageScripter_2\Lib\site-packages\elan\Scripts\\")
            self.open_to_directory(ImageScripter_Location + r"Lib\site-packages\elan\Scripts\\")
            #import subprocess
            #subprocess.Popen(r'explorer /select,"C:\ImageScripter_2\Lib\site-packages\elan\Scripts\Smoke_Station"')
        except Exception as e:
            print(e)
    def Open_Elan_Folder(self):
        try:
            #print("###################")
            ##self.open_to_directory(r"C:\ImageScripter_2\Lib\site-packages\elan")
            self.open_to_directory(ImageScripter_Location + r"Lib\site-packages\elan")
            #import subprocess
            #subprocess.Popen(r'explorer /select,"C:\ImageScripter_2\Lib\site-packages\elan\Scripts"')
        except Exception as e:
            print(e)
    def Open_NAS_Folder(self):
        try:
            ##Cloud_drive_ip = r"\\172.16.43.21\nas\Cloud_Drive\\"

            self.open_to_directory(Cloud_drive_ip)
            #import subprocess
            #subprocess.Popen(r'explorer /select,"\\172.16.43.21\nas\Cloud_Drive\Database2"')
        except Exception as e:
            print(e)
    def Open_Applications_Folder(self):
        try:
            ##self.open_to_directory(r'C:\ImageScripter_2\Lib\site-packages\elan\Applications_And_Devices')
            self.open_to_directory(ImageScripter_Location + r'Lib\site-packages\elan\Applications_And_Devices')
            #import subprocess
            #subprocess.Popen(r'explorer /select,"\\172.16.43.21\nas\Cloud_Drive\Database2"')
        except Exception as e:
            print(e)
    def Kill_Recorder_Process(self):
        try:
            print('Killing Camera Process')
            os.system(r'TaskKill /im ffmpeg.exe /F')
        except Exception as e:
            print(e)
    def Open_Script_Runner_Multi(self):
        try:
            path = ImageScripter_Location + r"Lib\site-packages\imagescripter\core\script_runner_class_multi.py"
            ##path = r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\script_runner_class_multi.py"
            self.open_to_file(path)
            #with open(path,'r') as f:
            #   txt1 = f.read()
            #self.ui.tabWidget.currentWidget().setText(txt1)
            #self.ui.label.setText(path)
        except Exception as e:
            print(e)
    def Open_Script_Runner(self):
        try:
            ##path = r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\script_runner_class.py"
            path = ImageScripter_Location + r"Lib\site-packages\imagescripter\core\script_runner_class.py"
            self.open_to_file(path)
            #with open(path,'r') as f:
            #   txt1 = f.read()
            #self.ui.tabWidget.currentWidget().setText(txt1)
            #self.ui.label.setText(path)
        except Exception as e:
            print(e)
    def open_to_file(self,path):
        try:
            file_name = path
            if file_name != '':
                with open(file_name,'r') as f:
                    txt1 = f.read()
                    self.last_opened_file = file_name
                    self.ui.label.setText(self.last_opened_file)
                    Set_Last_Opened_File(file_name)
                tab = Editor_Class(self,file_name)
                # self.ui.tabWidget.addTab(tab, str(self.Tab_Index))
                self.ui.tabWidget.addTab(tab, str(self.ui.tabWidget.count() + 1))
                self.Tab_Index += 1
                index = self.ui.tabWidget.indexOf(tab)
                self.ui.tabWidget.setCurrentIndex(index)
                txt1 = os.linesep.join([s for s in txt1.splitlines() if s])
                #w = self.ui.tabWidget.currentWidget()
                self.ui.tabWidget.currentWidget().setText(txt1)
        except Exception as e:
            print(e)
    def get_windows_version(self):
        import platform
        ver = platform.platform()
        return ver
        Windows - 7 - 6.1
        .7601 - SP1
    def open_clicked(self):
        try:
            txt1 = ''
            name = ''
            if 'Windows-7' not in self.get_windows_version():
                name = QFileDialog.getOpenFileName(parent=self,caption=self.tr("Select a file"),filter=self.tr('Image files (*.py)'),)
            else:
                name = QFileDialog.getOpenFileName(None, 'Open File', '.', '*', '*', QFileDialog.DontUseNativeDialog)
            if name != '':
                file_name = name[0]
                if file_name != '':
                    with open(file_name,'r') as f:
                        txt1 = f.read()
                        self.last_opened_file = file_name
                        self.ui.label.setText(self.last_opened_file)
                        Set_Last_Opened_File(file_name)
                    tab = Editor_Class(self,file_name)
                    # self.ui.tabWidget.addTab(tab, str(self.Tab_Index))
                    self.ui.tabWidget.addTab(tab, str(self.ui.tabWidget.count() + 1))
                    self.Tab_Index += 1
                    index = self.ui.tabWidget.indexOf(tab)
                    self.ui.tabWidget.setCurrentIndex(index)
                    txt1 = os.linesep.join([s for s in txt1.splitlines() if s])
                    #w = self.ui.tabWidget.currentWidget()
                    self.ui.tabWidget.currentWidget().setText(txt1)
        except Exception as e:
            print(e)
    def open_to_directory(self,Directory):
        try:
            last_dir = os.getcwd()
            os.chdir(Directory)
            txt1 = ''
            name = ''
            if 'Windows-7' not in self.get_windows_version():
                name = QFileDialog.getOpenFileName(parent=self,directory = Directory,caption=self.tr("Select a file"),filter=self.tr('Image files (*.py)'),)
            else:
                name = QFileDialog.getOpenFileName(None, 'Open File', Directory, '*', '*', QFileDialog.DontUseNativeDialog)
            if name != '':
                file_name = name[0]
                if file_name != '':
                    with open(file_name,'r') as f:
                        txt1 = f.read()
                        self.last_opened_file = file_name
                        self.ui.label.setText(self.last_opened_file)
                        Set_Last_Opened_File(file_name)
                    tab = Editor_Class(self,file_name)
                    # self.ui.tabWidget.addTab(tab, str(self.Tab_Index))
                    self.ui.tabWidget.addTab(tab, str(self.ui.tabWidget.count() + 1))
                    self.Tab_Index += 1
                    index = self.ui.tabWidget.indexOf(tab)
                    self.ui.tabWidget.setCurrentIndex(index)
                    txt1 = os.linesep.join([s for s in txt1.splitlines() if s])
                    #w = self.ui.tabWidget.currentWidget()
                    self.ui.tabWidget.currentWidget().setText(txt1)
            os.chdir(last_dir)
        except Exception as e:
            print(e)
    def Save_clicked(self):
        try:
                text = self.ui.tabWidget.currentWidget().text()
                text = text.replace('\r\n', '\n')
                text = text.rstrip("\r\n")
                file_path = self.ui.tabWidget.currentWidget().file_path
                if file_path == '':
                    self.Save_As_clicked()
                else:
                    with open(file_path, 'w') as f:
                        f.write(text)
                        #print(file_path)
        except Exception as e:
            print(e)



    def Save_As_clicked(self):
        #print('Save as')
        try:
                ##os.chdir(r'C:\ImageScripter_2\Lib\site-packages\elan\Scripts')
                os.chdir(ImageScripter_Location + r'Lib\site-packages\elan\Scripts')
                text = self.ui.tabWidget.currentWidget().text()
                text = text.replace('\r\n', '\n')
                text = text.rstrip("\r\n")
                #text = self.editor.text()
                name = ''
                if 'Windows-7' not in self.get_windows_version():
                                name = QFileDialog.getSaveFileName(
                                    parent=self,
                                    caption=self.tr("Select a file"),
                                    filter=self.tr('Image files (*.py)'),
                                )
                else:
                    name = QFileDialog.getSaveFileName(None, 'Save File', '.', '*', '*',
                                                       QFileDialog.DontUseNativeDialog)


                if name != '':
                    file_name = name[0]
                    if file_name != '':
                        if not file_name.endswith('.py'):
                            file_name = file_name + '.py'
                        with open(file_name,'w') as f:
                            f.write(text)
                        self.ui.tabWidget.currentWidget().file_path = file_name
                        self.ui.label.setText(file_name)
                        Set_Last_Opened_File(file_name)
                        #print(file_name)
        except Exception as e:
                print(e)
    def Close_clicked(self):
        try:
            self.app.quit()
        except Exception as e:
            print(e)
    def print_screen_clicked(self):
        try:
            Pass_or_Fale = self.get_image_from_pc()
            if Pass_or_Fale:
                ##subprocess.Popen(r"C:\ImageScripter_2\python.exe C:\ImageScripter_2\Lib\site-packages\Script_Writer\diplay_image_for_capture.py PC", shell=True)

                subprocess.Popen(Python_Exe_Location + ' ' + ImageScripter_Location + "Lib\site-packages\Script_Writer\diplay_image_for_capture.py PC", shell=True)
        except Exception as e:
            print(e)
    def getITP8_Image_was_clicked(self):
        try:
            Pass_or_Fale = self.get_image_from_itp8()
            if Pass_or_Fale:
                subprocess.Popen(Python_Exe_Location + ' ' + ImageScripter_Location + r"Lib\site-packages\Script_Writer\diplay_image_for_capture.py Itp8", shell=True)
                ##subprocess.Popen(r"C:\ImageScripter_2\python.exe C:\ImageScripter_2\Lib\site-packages\Script_Writer\diplay_image_for_capture.py Itp8", shell=True)
        except Exception as e:
            print(e)
    def getITP8_Portrait_Image_was_clicked(self):
        try:
            Pass_or_Fale = self.get_image_from_itp8_portrait()
            if Pass_or_Fale:
                ##subprocess.Popen(r"C:\ImageScripter_2\python.exe C:\ImageScripter_2\Lib\site-packages\Script_Writer\diplay_image_for_capture.py Itp8p", shell=True)
                subprocess.Popen(Python_Exe_Location + ' ' + ImageScripter_Location + r"Lib\site-packages\Script_Writer\diplay_image_for_capture.py Itp8p", shell=True)
        except Exception as e:
            print(e)
    def getITP12_Image_was_clicked(self):
        try:
            #print('12 was clicked')
            Pass_or_Fale = self.get_image_from_itp12()
            if Pass_or_Fale:
                ##subprocess.Popen(r"C:\ImageScripter_2\python.exe C:\ImageScripter_2\Lib\site-packages\Script_Writer\diplay_image_for_capture.py Itp12", shell=True)
                subprocess.Popen(Python_Exe_Location + ' ' + ImageScripter_Location + r"Lib\site-packages\Script_Writer\diplay_image_for_capture.py Itp12", shell=True)
        except Exception as e:
            print(e)
            print(e)
    def capture_button_clicked(self):
        try:
            import subprocess
            subprocess.Popen(Python_Exe_Location + ' ' + ImageScripter_Location + r"Lib\site-packages\Script_Writer\snipping_tool.py", shell=True)
            ##subprocess.Popen(r"C:\ImageScripter_2\python.exe C:\ImageScripter_2\Lib\site-packages\Script_Writer\snipping_tool.py", shell=True)
        except Exception as e:
            print(e)
    def new_application_clicked(self):
        try:
            #print('new_application_clicked')
            ##subprocess.Popen(r"C:\ImageScripter_2\python.exe C:\ImageScripter_2\Lib\site-packages\Script_Writer\new_application_window.py",shell=True)
            subprocess.Popen(Python_Exe_Location + ' ' + ImageScripter_Location + r"Lib\site-packages\Script_Writer\new_application_window.py",shell=True)
        except Exception as e:
            print(e)
    def get_image_from_itp12(self):
        Pass_or_Fail = False
        #print("Getting image from ITP")
        try:
            Main_Image_File = Templet_Image_File
            destination_File = r"screenshot.png"
            nbytes = 4096
            #print('show_image_from_itp8')
            #hostname = '192.168.1.2'
            #with open(r"C:\ImageScripter_2\Lib\site-packages\elan\Applications_And_Devices\Itp12\ip_address.txt",'r') as f:
            with open(ImageScripter_Location + r"Lib\site-packages\elan\Applications_And_Devices\Itp12\ip_address.txt",'r') as f:
                    hostname = f.read()
                    #print('Hostname -> ',hostname)
            Pass_or_Fail = Ping_Notify_If_Fail(hostname)
            if Pass_or_Fail == True:
                port = 2199
                username = 'root'
                password = 'N0rt3k$C'
                command = 'scrot /tmp/test.png'
                def createSSHClient():
                    client = paramiko.SSHClient()
                    #client.load_system_host_keys()
                    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                    client.connect(hostname, port, username, password)
                    return client
                client = paramiko.Transport((hostname, port))
                client.connect(username=username, password=password)
                stdout_data = []
                stderr_data = []
                session = client.open_channel(kind='session')
                session.exec_command(command)
                while True:
                    if session.recv_ready():
                        data = session.recv(nbytes)
                        #print(data)
                        stdout_data.append(data)
                    if session.recv_stderr_ready():
                        data = session.recv_stderr(nbytes)
                        #print(data)
                        stderr_data.append(data)
                    if session.exit_status_ready():
                        break
                session.close()
                client.close()
                ssh = createSSHClient()
                scp = SCPClient(ssh.get_transport())
                scp.get('/tmp/test.png', destination_File)
                scp.close()
                picture = Image.open(destination_File)
                picture = picture.rotate(360, expand=True)
                picture.save(Main_Image_File)
                #print('done')
        except Exception as e:
            try:
                ssh.close()
            except:
                pass
            try:
                scp.close()
            except:
                pass
            try:
                client.close()
            except:
                pass
            print(e)
        print("Finsihed Getting image from ITP")
        return Pass_or_Fail
    def get_image_from_itp8_portrait(self):
        print("Getting image from ITP")
        Pass_or_Fail = False
        try:
            ##Main_Image_File = r"C:\Settings\Last_Templet_Image.png"
            Main_Image_File = Templet_Image_File
            destination_File = r"screenshot.png"
            nbytes = 4096
            #print('show_image_from_itp8')
            #hostname = '192.168.1.2'
            ##with open(r"C:\ImageScripter_2\Lib\site-packages\elan\Applications_And_Devices\Itp8p\ip_address.txt",'r') as f:
            with open(ImageScripter_Location + r"Lib\site-packages\elan\Applications_And_Devices\Itp8p\ip_address.txt",'r') as f:
                hostname = f.read()
                #print('Hostname -> ',hostname)
            Pass_or_Fail = Ping_Notify_If_Fail(hostname)
            if Pass_or_Fail == True:
                port = 2199
                username = 'root'
                password = 'N0rt3k$C'
                command = 'scrot /tmp/test.png'
                def createSSHClient():
                    client = paramiko.SSHClient()
                    #client.load_system_host_keys()
                    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                    client.connect(hostname, port, username, password)
                    return client
                client = paramiko.Transport((hostname, port))
                client.connect(username=username, password=password)
                stdout_data = []
                stderr_data = []
                session = client.open_channel(kind='session')
                session.exec_command(command)
                while True:
                    if session.recv_ready():
                        data = session.recv(nbytes)
                        #print(data)
                        stdout_data.append(data)
                    if session.recv_stderr_ready():
                        data = session.recv_stderr(nbytes)
                        #print(data)
                        stderr_data.append(data)
                    if session.exit_status_ready():
                        break
                session.close()
                client.close()
                ssh = createSSHClient()
                scp = SCPClient(ssh.get_transport())
                scp.get('/tmp/test.png', destination_File)
                scp.close()
                picture = Image.open(destination_File)
                picture = picture.rotate(90, expand=True)
                picture.save(Main_Image_File)
                #print('done')
        except Exception as e:
            try:
                ssh.close()
            except:
                pass
            try:
                scp.close()
            except:
                pass
            try:
                client.close()
            except:
                pass
            print(e)
        print("Finsihed Getting image from ITP")
        return Pass_or_Fail
    def closeEvent(self, event):
        print("event")
        reply = QMessageBox.question(self, 'Message',
            "Are you sure to quit?", QMessageBox.Yes, QMessageBox.No)
        if reply == QMessageBox.Yes:
            event.accept()
        else:
            event.ignore()
    def get_image_from_itp8(self):
        print("Getting image from ITP")
        Pass_or_Fail = False
        try:
            ##Main_Image_File = r"C:\Settings\Last_Templet_Image.png"
            Main_Image_File = Templet_Image_File
            destination_File = r"screenshot.png"
            nbytes = 4096
            #print('show_image_from_itp8')
            #hostname = '192.168.1.2'
            ##with open(r"C:\ImageScripter_2\Lib\site-packages\elan\Applications_And_Devices\Itp8\ip_address.txt",'r') as f:
            with open(ImageScripter_Location + r"Lib\site-packages\elan\Applications_And_Devices\Itp8\ip_address.txt",'r') as f:
                hostname = f.read()
                #print('Hostname -> ',hostname)
            Pass_or_Fail = Ping_Notify_If_Fail(hostname)
            if Pass_or_Fail == True:
                port = 2199
                username = 'root'
                password = 'N0rt3k$C'
                command = 'scrot /tmp/test.png'
                def createSSHClient():
                    client = paramiko.SSHClient()
                    #client.load_system_host_keys()
                    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                    client.connect(hostname, port, username, password)
                    return client
                client = paramiko.Transport((hostname, port))
                client.connect(username=username, password=password)
                stdout_data = []
                stderr_data = []
                session = client.open_channel(kind='session')
                session.exec_command(command)
                while True:
                    if session.recv_ready():
                        data = session.recv(nbytes)
                        #print(data)
                        stdout_data.append(data)
                    if session.recv_stderr_ready():
                        data = session.recv_stderr(nbytes)
                        #print(data)
                        stderr_data.append(data)
                    if session.exit_status_ready():
                        break
                session.close()
                client.close()
                ssh = createSSHClient()
                scp = SCPClient(ssh.get_transport())
                scp.get('/tmp/test.png', destination_File)
                scp.close()
                picture = Image.open(destination_File)
                picture = picture.rotate(90, expand=True)
                picture.save(Main_Image_File)
                #print('done')
        except Exception as e:
            try:
                ssh.close()
            except:
                pass
            try:
                scp.close()
            except:
                pass
            try:
                client.close()
            except:
                pass
            print(e)
        print("Finsihed Getting image from ITP")
        return Pass_or_Fail
    def get_image_from_pc(self):
        Pass_or_Fail = False
        print("Getting image from PC")
        try:
            ##Main_Image_File = r"C:\Settings\Last_Templet_Image.png"
            Main_Image_File = Templet_Image_File
            import PIL.ImageGrab
            im = PIL.ImageGrab.grab()
            im.save(Main_Image_File)
            Pass_or_Fail = True
        except Exception as e:
            print(e)
            pass
        return Pass_or_Fail
def myExitHandler():
    app.quit()
    #import win32ui,win32con
    #
    #if win32ui.MessageBox("Are you sure that you want to quit?", "Question", win32con.MB_YESNOCANCEL) == win32con.IDYES:
    #    #win32ui.MessageBox("You pressed 'Yes'")
    #    app.quit()
    #else:
    #    pass
if __name__ == '__main__':
    try:
        app = QApplication(sys.argv)
        app.aboutToQuit.connect(myExitHandler)  #
        Script_Writer = Script_Writer_Class(app)
        #Script_Writer.get_image_from_itp8()
        #Script_Writer.showMaximized()
        sys.exit(app.exec_())
    except Exception as e:
        raise
        e = str(e)
        import ctypes
        ctypes.windll.user32.MessageBoxW(0, e,'Error', 0)