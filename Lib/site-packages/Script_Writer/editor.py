import sys
import sip
from PyQt5.QtWidgets import QMenu
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5 import Qsci
from PyQt5.Qsci import QsciScintilla, QsciLexerPython
import PyQt5
import sys
from PyQt5 import QtWidgets, Qsci
import keyword
import pkgutil
from Script_Writer.information_getter import Information_Getter

class Editor_Class(QsciScintilla):
    ARROW_MARKER_NUM = 8
    def __init__(self, parent=None):
        super(Editor_Class, self).__init__(parent)
        print('Reset Autocompetion')
        # Set the default font
        self.font = QFont()
        self.font.setFamily('Courier')
        self.font.setFixedPitch(True)
        self.font.setPointSize(12)
        self.setFont(self.font)
        self.setMarginsFont(self.font)
        # Margin 0 is used for line numbers
        fontmetrics = QFontMetrics(self.font)
        self.setMarginsFont(self.font)
        self.setMarginWidth(0, fontmetrics.width("00000") + 6)
        self.setMarginLineNumbers(0, True)
        self.setMarginsBackgroundColor(QColor("#cccccc"))
        # Clickable margin 1 for showing markers
        self.setMarginSensitivity(1, True)
        #        self.connect(self,
        #            SIGNAL('marginClicked(int, int, Qt::KeyboardModifiers)'),
        #            self.on_margin_clicked)
        self.markerDefine(QsciScintilla.RightArrow,
                          self.ARROW_MARKER_NUM)
        self.setMarkerBackgroundColor(QColor("#ee1111"),
                                      self.ARROW_MARKER_NUM)
        # Brace matching: enable for a brace immediately before or after
        # the current position
        self.setBraceMatching(QsciScintilla.SloppyBraceMatch)
        # Current line visible with special background color
        self.setCaretLineVisible(True)
        self.setCaretLineBackgroundColor(QColor("#ffe4e4"))
        # Set Python lexer
        # Set style for Python comments (style number 1) to a fixed-width
        # courier.
        self.init_or_reset_automcompletion()


    def init_or_reset_automcompletion(self):
        print('Resetting automation')
        self.lexer = QsciLexerPython()
        self.lexer.setDefaultFont(self.font)
        ########
        self.api = Qsci.QsciAPIs(self.lexer)
        ############ ###
        import os
        # import the desired api file
        # pyqt_path = os.path.dirname(PyQt5.__file__)
        # self.api.load(os.path.join(pyqt_path, "Qt/qsci/api/python/Python-3.6.api"))
        # for key in keyword.kwlist + dir(__builtins__):
        #    self.api.add(key)
        #
        # for importer, name, ispkg in pkgutil.iter_modules():
        #    self.api.add(name)
        for complete in Information_Getter.get_list_of_completes():
            self.api.add(complete)
        ## Add autocompletion strings
        # self.api.add("aLongerString")
        # self.api.add("aDifferentString")
        # self.api.add("sOmethingElse")
        ## Compile the api for use in the lexer
        self.api.prepare()
        #######
        self.setLexer(self.lexer)
        ## Set the length of the string before the editor tries to autocomplete
        ## In practise this would be higher than 1
        ## But its set lower here to make the autocompletion more obvious
        self.setAutoCompletionThreshold(1)
        # self.setAutoCompletionSource(QsciScintilla.AcsAPIs)
        ## ## ###
        self.setAutoCompletionCaseSensitivity(False)
        self.setAutoCompletionReplaceWord(False)
        # self.setAutoCompletionSource(PyQt5.Qsci.QsciScintilla.AcsDocument)
        self.setAutoCompletionSource(QsciScintilla.AcsAll)
        self.setAutoCompletionThreshold(1)
        text = bytearray(str.encode("Arial"))
        self.SendScintilla(QsciScintilla.SCI_STYLESETFONT, 1, text)
        # Don't want to see the horizontal scrollbar at all
        # Use raw message to Scintilla here (all messages are documented
        # here: http://www.scintilla.org/ScintillaDoc.html)
        self.SendScintilla(QsciScintilla.SCI_SETHSCROLLBAR, 0)
        # not too small
        self.setMinimumSize(600, 450)
        print('Finished')


    def contextMenuEvent(self, event):
        menu = QMenu(self)
        look_up_image_Action = menu.addAction("Look Up Image")
        look_up_image_Action.triggered.connect(self.look_up_image)
        action = menu.exec_(self.mapToGlobal(event.pos()))

    def get_highlighted_txt(self):
        #return self.wordAtLineIndex(self.getCursorPosition()[0], self.getCursorPosition()[1])
        return self.selectedText()

    def look_up_image(self):
        highlighted_txt = self.get_highlighted_txt()
        print(highlighted_txt)

    def on_margin_clicked(self, nmargin, nline, modifiers):
        # Toggle marker for the line the margin was clicked on
        if self.markersAtLine(nline) != 0:
            self.markerDelete(nline, self.ARROW_MARKER_NUM)
        else:
            self.markerAdd(nline, self.ARROW_MARKER_NUM)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    editor = Editor_Class()
    editor.showMaximized()
    editor.setText('')
    #editor.setText(open(sys.argv[0]).read())
    app.exec_()