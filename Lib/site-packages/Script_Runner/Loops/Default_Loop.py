
import os
from paths import *
import pickle
from PyQt5 import QtGui,QtCore
import subprocess
import re
import traceback
from imagescripter.core.functions import Clear_Directory_Contents,getListOfAllApplications,MinizeAllApplications,closeAllApplicationsNotInList

def atoi(text):
    return int(text) if text.isdigit() else text
def natural_keys(text):
    return [atoi(c) for c in re.split('(\d+)', text)]





class Default_ScripRunner_Loop_Class():
    def __init__(self):
        pass

    def get_list_of_all_folders(self):
        List_of_folders = []
        list_of_script_dict = self.get_list_of_script_dictionaries()
        for i in list_of_script_dict:
            directory_name = i['directory_name']
            List_of_folders.append(directory_name)
        set_of_folders = set(List_of_folders)
        List_of_folders = list(set_of_folders)
        return List_of_folders




    def get_list_of_script_dictionaries(self):
        List_of_Checked_Script_Dictionaries = []
        os.chdir(Script_Runner_Scripts_Folder)
        List_of_files = os.listdir()
        List_of_files.sort(key=natural_keys)
        for file_name in List_of_files:
            with open(file_name,'rb') as f:
                script_dictionary = pickle.load(f)

                if script_dictionary['wasSavedChecked'] == True:
                    List_of_Checked_Script_Dictionaries.append(script_dictionary)

   

        return List_of_Checked_Script_Dictionaries

    def log_active_script(self,script_path):
        with open(Active_Script_For_Script_Runner, 'w') as f:
            f.write(script_path)

    def clear_text_editors(self):
        with open(clear_text_editors,'w') as f:
            f.write('True')

    def execute_script(self,script):
        self.clear_text_editors()
        self.log_active_script(script)
        os.system(Python_Exe_Location + ' -u ' + imagescripter_scriptpy)
    def cmd_to_scripts_dictionary_folder(self):
        os.chdir(Script_Runner_Scripts_Folder)


    def print_traceback(self):
        trace = traceback.format_exc()
        print(trace)
        return traceback.format_exc()


    def Do_Before_Loop_Prep(self):
        Clear_Directory_Contents(Recordings_Location)
        Clear_Directory_Contents(Image_Compare_Location)

    def Do_Before_While_Loop_Prep(self):
        self.List_of_opened_apps = getListOfAllApplications()
        #MinizeAllApplications()

    def Do_After_Failure_Post(self):
        closeAllApplicationsNotInList(self.List_of_opened_apps)
        self.print_traceback()

    def run(self):
        self.Do_Before_While_Loop_Prep()
        while True:
            self.Do_Before_While_Loop_Prep()
            try:
                self.Do_Before_Loop_Prep()
                for Script_Dictionary in self.get_list_of_script_dictionaries():
                    self.script_path = Script_Dictionary['path']
                    self.execute_script(self.script_path)
            except:
                self.Do_After_Failure_Post()




if __name__ == '__main__':
    Loop = Default_ScripRunner_Loop_Class()
    #Loop.get_list_of_all_folders()
    Loop.run()