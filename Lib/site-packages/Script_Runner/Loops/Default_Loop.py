from paths import *







def atoi(text):
    return int(text) if text.isdigit() else text
def natural_keys(text):
    import re
    return [atoi(c) for c in re.split('(\d+)', text)]





class Default_ScripRunner_Loop_Class():
    def __init__(self):
        self.Name = 'Default Loop'

    def get_list_of_all_folders(self):
        List_of_folders = []
        list_of_script_dict = self.get_list_of_script_dictionaries()
        for i in list_of_script_dict:
            directory_name = i['directory_name']
            List_of_folders.append(directory_name)
        set_of_folders = set(List_of_folders)
        List_of_folders = list(set_of_folders)
        return List_of_folders




    def get_list_of_script_dictionaries(self):
        import pickle
        import os
        List_of_Checked_Script_Dictionaries = []
        os.chdir(Script_Runner_Scripts_Folder)
        List_of_files = os.listdir()
        List_of_files.sort(key=natural_keys)
        for file_name in List_of_files:
            with open(file_name,'rb') as f:
                script_dictionary = pickle.load(f)

                if script_dictionary['wasSavedChecked'] == True:
                    List_of_Checked_Script_Dictionaries.append(script_dictionary)

   

        return List_of_Checked_Script_Dictionaries

    def log_active_script(self,script_path):
        with open(Active_Script_For_Script_Runner, 'w') as f:
            f.write(script_path)

    def clear_text_editors(self):
        with open(clear_text_editors,'w') as f:
            f.write('True')

    def execute_script(self,script):
        import os
        self.clear_text_editors()
        self.log_active_script(script)
        os.system(Python_Exe_Location + ' -u ' + imagescripter_scriptpy)
    def cmd_to_scripts_dictionary_folder(self):
        import os
        os.chdir(Script_Runner_Scripts_Folder)


    def print_traceback(self):
        import traceback
        trace = traceback.format_exc()
        print(trace)
        return traceback.format_exc()

    def Get_Controller_List_Of_Checked_Dictionaries(self):
        import pickle
        import os
        os.chdir(Script_Runner_Controllers_Folder)
        List_of_Checked_Controller_Dictionaries = []
        List_Of_Files = os.listdir(Script_Runner_Controllers_Folder)
        for file in List_Of_Files:
            with open(file, 'rb') as f:
                Controller_Dictionary = pickle.load(f)
                if Controller_Dictionary['wasSavedChecked'] == True:
                    List_of_Checked_Controller_Dictionaries.append(Controller_Dictionary)
        return List_of_Checked_Controller_Dictionaries




    def Do_Before_Loop_Prep(self):
        from imagescripter.core.functions import Clear_Directory_Contents
        Clear_Directory_Contents(Recordings_Location)
        Clear_Directory_Contents(Image_Compare_Location)

    def Do_Before_While_Loop_Prep(self):
        from imagescripter.core.functions import getListOfAllApplications
        from imagescripter.core.functions import MinizeAllApplications
        print('Running -> ',self.Name)
        self.List_of_opened_apps = getListOfAllApplications()
        self.List_Of_Checked_Controller_Dictionaries = self.Get_Controller_List_Of_Checked_Dictionaries()
        #MinizeAllApplications()

    def Do_After_Failure_Post(self):
        from imagescripter.core.functions import closeAllApplicationsNotInList
        closeAllApplicationsNotInList(self.List_of_opened_apps)
        self.print_traceback()

    def Update_Controller_settings_files_with_Dictionary(self,Controller_Dict):
        #{'name': 'frank2', 'password': 'stein', 'ip': '192.168.0.121', 'type': 'SC100', 'wasSavedChecked': True,
        # 'path': 'C:\\Eluminate\\Projects\\_elan_\\Settings\\ScriptRunner_Controllers\\frank2'}
        Controller_Nametxt = Settings_Location + r"Controller_Name.txt"  #
        Controller_IPtxt = Settings_Location + r"Controller_IP.txt"  #
        Controller_Type_Location = Settings_Location + r"Controller_Type.txt"
        Controller_Passwordtext = Settings_Location + r"Controller_Password.txt"


        name = Controller_Dict['name']
        print('Writing Controller Name -> ',name)
        with open(Controller_Nametxt,'w') as f:
            f.write(name)

        password = Controller_Dict['password']
        print('Writing Controller Password -> ',password)
        with open(Controller_Passwordtext,'w') as f:
            f.write(password)

        ip = Controller_Dict['ip']
        print('Writing Controller IP -> ', ip)
        with open(Controller_IPtxt,'w') as f:
            f.write(ip)

        type = Controller_Dict['type']
        print('Writing Controller Tyoe -> ', type)
        with open(Controller_Type_Location,'w') as f:
            f.write(type)


    def run(self):
        self.Do_Before_While_Loop_Prep()
        while True:
            self.Do_Before_Loop_Prep()
            for Controller_Dict in self.List_Of_Checked_Controller_Dictionaries:
                self.Update_Controller_settings_files_with_Dictionary(Controller_Dict)

                for Script_Dictionary in self.get_list_of_script_dictionaries():
                    try:
                        self.script_path = Script_Dictionary['path']
                        self.execute_script(self.script_path)
                    except:
                        self.Do_After_Failure_Post()




if __name__ == '__main__':
    import time

    Loop = Default_ScripRunner_Loop_Class()
    Loop.run()

    #Loop.Do_Before_While_Loop_Prep()
    #from imagescripter import Sleep
    #Sleep(10)
    #closeAllApplicationsNotInList(Loop.List_of_opened_apps)


    #Loop.run()