from Script_Runner.Loops.Default_Loop import Default_ScripRunner_Loop_Class
from paths import Git_Sync
class Run_Next_Folder_On_Fail_Loop_Class(Default_ScripRunner_Loop_Class):
    def __init__(self):
        self.Name = 'Run Next Folder On Fail Loop'



    def run(self):
        self.Do_Before_While_Loop_Prep()
        while True:
                self.Do_Before_Loop_Prep()
                for Controller_Dict in self.List_Of_Checked_Controller_Dictionaries:
                    ############################################################################
                    if Git_Sync == True:
                        try:
                            self.Gitpullpushforloop()
                        except:
                            self.Do_After_Failure_Post()
                    else:
                        print("Auto Git Has Been Turned Off")
                    ############################################################################

                    FOLDER_IGNORE_LIST = []
                    self.Update_Controller_settings_files_with_Dictionary(Controller_Dict)
                    self.Update_Inteface_Connection_Files()
                    for Script_Dictionary in self.get_list_of_script_dictionaries():
                        try:
                            self.script_path = Script_Dictionary['path']
                            self.script_name = Script_Dictionary['name']
                            self.script_directory = Script_Dictionary['directory_name']
                            if self.script_directory not in FOLDER_IGNORE_LIST:
                                self.execute_script(self.script_path)
                        except:
                            FOLDER_IGNORE_LIST.append(self.script_directory)
                            self.Do_After_Failure_Post()
                            #raise
                    self.UpdateCycleCount()


if __name__ == '__main__':
    Loop = Run_Next_Folder_On_Fail_Loop_Class()
    Loop.run()
    #Loop.Do_Before_While_Loop_Prep()
    #from imagescripter import Sleep
    #Sleep(10)
    #closeAllApplicationsNotInList(Loop.List_of_opened_apps)
