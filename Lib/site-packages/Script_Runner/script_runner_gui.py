from PyQt5 import QtGui,uic,QtCore
from win32api import GetSystemMetrics
import sys
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog
import cv2
import win32api
from time import sleep
from datetime import datetime
import PyQt5
import time
from PyQt5.QtGui import QStandardItemModel,QStandardItem
from imagescripter.core.variable_file_getter import Variable_File_Getter
import os
from paths import *



class Custom_StandardItem_Class(QStandardItem):
    def __init__(self,text = ''):
        super().__init__()
        self.setText(text)
        self.Index_Time_String = None



class Script_Runner_Gui_Class(QWidget):
    def __init__(self):
            QWidget.__init__(self)
            ##self.ui = uic.loadUi(r"C:\ImageScripter_2\Lib\site-packages\Script_Runner\script_runner_gui.ui")
            self.ui = uic.loadUi(ImageScripter_Location + "Lib\site-packages\Script_Runner\script_runner_gui.ui")
            self.model = QStandardItemModel()
            test = Custom_StandardItem_Class('test')
            self.model.appendRow(test)
            self.ui.listView.setModel(self.model)
            self.ui.showMaximized()


    def populate_list_box(self):
        Script_Folder_List = eval(Variable_File_Getter.getVariableFromFile('Active_Script_Folder'))
        for folder in Script_Folder_List:
            os.chdir(folder)
            List = os.listdir(folder)
            #print(List)
            List.sort(key=natural_keys)
            for i in List:
                if i.endswith('.py'):
                    if "IGNORE" not in i:
                        print(i)
                        script_location = os.path.abspath(i)
                        print('#########')
                        print(script_location)
                        print('#########')
                        script_object = ImageScripter_Script_Class(script_location)
                        List_of_scripts.append(script_object)
                    else:
                        print("IGNORE -> ", i)






if __name__ == '__main__':
        app = QApplication(sys.argv)
        ex = Script_Runner_Gui_Class()
        sys._excepthook = sys.excepthook

        def exception_hook(exctype, value, traceback):
            print(exctype, value, traceback)
            sys._excepthook(exctype, value, traceback)
            sys.exit(1)
        sys.excepthook = exception_hook
        sys.exit(app.exec_())




