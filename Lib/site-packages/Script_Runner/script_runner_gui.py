from PyQt5 import QtGui,uic,QtCore
from win32api import GetSystemMetrics
import sys
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog,QTextEdit,QMainWindow
import cv2
import win32api
import pickle
from imagescripter.core.functions import Start_Image_Show2,Close_Image_Show2,Start_Loading_Interface,Close_Loading_Interface
import traceback
import ctypes
from imagescripter.core.imagescripter_script import ImageScripter_Script_Class
from time import sleep
from datetime import datetime
import PyQt5
import time
from PyQt5.QtGui import QStandardItemModel,QStandardItem
from imagescripter.core.variable_file_getter import Variable_File_Getter
import os
from paths import *
import re
from PyQt5.QtCore    import *
from PyQt5.QtWidgets import *

def atoi(text):
    return int(text) if text.isdigit() else text
def natural_keys(text):
    return [atoi(c) for c in re.split('(\d+)', text)]

class Custom_StandardItem_Class(QStandardItem):
    def __init__(self,text = ''):
        super().__init__()
        self.setText(text)
        self.Index_Time_String = None

class Controller_Checkbox_Class(QCheckBox):
    def __init__(self,Controller_Dictionary):
        super().__init__()
        self.Dictionary = Controller_Dictionary
        #print(self.Dictionary)
        self.name = Controller_Dictionary['name']
        self.password = Controller_Dictionary['password']
        self.type = Controller_Dictionary['type']
        self.wasSavedChecked = Controller_Dictionary['wasSavedChecked']
        self.path_of_dictionary_file = Controller_Dictionary['path']
        self.setText(self.name)
        self.file_name = self.name
        self.setChecked(self.wasSavedChecked)

    def wasClicked(self):
        os.chdir(Script_Runner_Controllers_Folder)
        with open(self.name,'rb') as f:
            Controller_Dictionary = pickle.load(f)
        with open(self.name, 'wb') as f:
            Controller_Dictionary['wasSavedChecked'] = self.isChecked()
            pickle.dump(Controller_Dictionary, f)













class Script_Checkbox_Class(QCheckBox):
    def __init__(self,Script_Dictionary):
        super().__init__()
        self.Script_Dictionary = Script_Dictionary
        #self.Script_Dictionary)
        self.script_name = self.Script_Dictionary['name']
        self.script_path = self.Script_Dictionary['path']
        self.script_directory_path = self.Script_Dictionary['directory_full_path']
        self.script_directory_name = self.Script_Dictionary['directory_name']
        self.wasSavedChecked = self.Script_Dictionary['wasSavedChecked']
        self.setText('[' + self.script_directory_name + '] ' + self.script_name)
        self.setChecked(self.wasSavedChecked)
    def wasClicked(self):
        os.chdir(Script_Runner_Scripts_Folder)
        with open(self.script_name,'rb') as f:
            Scrip_Dictionary = pickle.load(f)
        with open(self.script_name, 'wb') as f:
            Scrip_Dictionary['wasSavedChecked'] = self.isChecked()
            pickle.dump(Scrip_Dictionary, f)


class Folder_Checkbox_Class(QCheckBox):
    def __init__(self,Folder_Dictionary):
        super().__init__()
        #Dictionary = {'name': file_name, 'path': folder_name, 'wasSavedChecked': True}
        self.file_name = Folder_Dictionary['name']
        self.folder_path = Folder_Dictionary['path']

        self.wasSavedChecked = Folder_Dictionary['wasSavedChecked']
        self.setText(self.file_name)
        #self.Index_Time_String = None
        self.setChecked(self.wasSavedChecked)

    def getListOfScripts(self):
        List = os.listdir(self.folder_path)
        ListofScripts = []
        for i in List:
            if i.endswith('.py'):
                ListofScripts.append(i)
        return ListofScripts

    def wasClicked(self):
        os.chdir(Script_Runner_Folders_Folder)
        with open(self.file_name,'rb') as f:
            Folder_Dictionary = pickle.load(f)
        with open(self.file_name, 'wb') as f:
            Folder_Dictionary['wasSavedChecked'] = self.isChecked()
            pickle.dump(Folder_Dictionary, f)



class Add_New_Controller_Widget_Class(QWidget):
    def __init__(self,parent):
        super().__init__()
        self.parent = parent
        self.ui = uic.loadUi(Add_New_Controller_Ui)
        self.ui.setWindowIcon(QtGui.QIcon(loading_eyepng))
        self.ui.setWindowTitle('Add New Controller')
        self.ui.pushButton_2.clicked.connect(self.save_was_controller_clicked)
        self.ui.pushButton.clicked.connect(self.cancel_add_controller_clicked)
        self.ui.show()

    def cancel_add_controller_clicked(self):
        self.ui.close()
        self.close()





    def save_was_controller_clicked(self):
        controller_name = str(self.ui.lineEdit.text())
        password = str(self.ui.lineEdit_2.text())
        type = str(self.ui.comboBox.currentText())
        wasSavedChecked = True
        curdir = os.getcwd()
        if controller_name != '':
            os.chdir(Script_Runner_Controllers_Folder)
            path = os.path.abspath(controller_name)
            Dictionary = {'name': controller_name, 'password': password, 'type': type, 'wasSavedChecked': wasSavedChecked, 'path':path}
            with open(controller_name,'wb') as f:
                pickle.dump(Dictionary, f)
                #f.write(password)
            self.parent.generate_controller_selection_list()
            self.ui.close()
            self.close()
            os.chdir(curdir)



class Image_Show_Class(QWidget):
    def __init__(self):
            QWidget.__init__(self)
            load_image_picture_changed_paths = [Template_Path]
            self.picture_changed_watcher = QtCore.QFileSystemWatcher(load_image_picture_changed_paths)
            #self.picture_changed_watcher.fileChanged.connect(self.Load_image_without_red)

            ################################################################
            active_output_paths = [Active_Script_Ouput]
            self.active_output_watcher = QtCore.QFileSystemWatcher(active_output_paths)
            #self.active_output_watcher.fileChanged.connect(self.active_output_changed)

            RED_load_image_picture_changed_paths = [Current_Image_Cordinates]
            self.RED_picture_changed_watcher = QtCore.QFileSystemWatcher(RED_load_image_picture_changed_paths)
            #self.RED_picture_changed_watcher.fileChanged.connect(self.draw_red_box)

            self.ui = uic.loadUi(ImShow_ScriptRunner)


            #self.ui.show()



class Script_Runner_Gui_Class(QWidget):
    def __init__(self):
            QWidget.__init__(self)

            self.List_of_script_checkboxes = []
            self.List_Of_Script_Folders = []
            self.ui = uic.loadUi(ImageScripter_Location + "Lib\site-packages\Script_Runner\script_runner_gui.ui")
            self.ImageShow = Image_Show_Class()
            self.ui.verticalLayout_13.addWidget(self.ImageShow)



            self.ui.setWindowTitle("Script Runner")
            self.generate_controller_selection_list()
            self.generate_folder_selection_list()
            #self.populate_script_checklist_based_on_saved_scripts()
            #self.generate_play_list()
            self.ui.stackedWidget.setCurrentIndex(0)
            self.ui.pushButton_4.clicked.connect(self.add_new_controller_clicked)
            self.ui.pushButton_5.clicked.connect(self.delete_folders_clicked)
            self.ui.pushButton_2.clicked.connect(self.Check_all_Scripts)
            self.ui.pushButton.clicked.connect(self.un_Check_all_Scripts)
            self.ui.pushButton_3.clicked.connect(self.delete_controllers_clicked)
            self.ui.pushButton_33.clicked.connect(self.browse_for_folder_clicked_2)
            self.ui.pushButton_7.clicked.connect(self.run)
            self.ui.pushButton_6.clicked.connect(self.generate_new_scripts_from_selected_folders)
            self.ui.pushButton_8.clicked.connect(self.stop_was_clicked)
            self.ui.pushButton_9.clicked.connect(self.stop_was_clicked)
            #self.ui.pushButton_8.clicked.connect(self.generate_play_list)
            self.populate_script_checklist_based_on_saved_scripts()
            self.ui.showMaximized()



    def Check_all_Scripts(self):
        for i in self.List_of_script_checkboxes:
            i.setChecked(True)


    def un_Check_all_Scripts(self):
        for i in self.List_of_script_checkboxes:
            i.setChecked(False)

    def stdoutReady(self):
        try:
            text = str(self.process.readAllStandardOutput(),encoding = "utf-8")
            #self.ui.label_4.setText(text)
            #self.ui.textEdit.setStyleSheet('color: rgb(85, 255, 12);\nbackground-color: rgb(0, 0, 0);')
            ##Variable_File_Getter.setFileFromVariable('Active_Script_Ouput',text)
            with open(Active_Script_Ouput,'w') as f:
                f.write(text)
            self.append(text)
        except Exception as e:
            print(e)
    def stderrReady(self):
        try:
            text = str(self.process.readAllStandardError(),encoding = "utf-8")
            #self.ui.textEdit.setStyleSheet('color: rgb(255, 0, 0);\nbackground-color: rgb(0, 0, 0);')
            ##Variable_File_Getter.setFileFromVariable('Active_Script_Ouput', text)
            with open(Active_Script_Ouput, 'w') as f:
                f.write(text)
            self.append(text)
        except Exception as e:
            print(e)
    def append(self, text):
        try:
            cursor = self.ui.textEdit.textCursor()
            cursor.movePosition(cursor.End)
            cursor.insertText(text)
            self.ui.textEdit.setTextCursor(cursor)
            #cursor.insertText('\n')
            #self.ui.textEdit.verticalScrollBar().setValue(self.ui.textEdit.verticalScrollBar().maximum())
            self.ui.textEdit.ensureCursorVisible()

            cursor = self.ui.textEdit_2.textCursor()
            cursor.movePosition(cursor.End)
            cursor.insertText(text)
            self.ui.textEdit_2.setTextCursor(cursor)
            #cursor.insertText('\n')
            #self.ui.textEdit.verticalScrollBar().setValue(self.ui.textEdit.verticalScrollBar().maximum())
            self.ui.textEdit_2.ensureCursorVisible()



        except Exception as e:
            print(e)


    def started_process(self,string):
        print('Started Process')

    def finished_process(self,string):
        print('Finished Process')

    def run_a_script(self,script_path):
        try:
            if script_path.endswith('.py'):
                if "IGNORE" not in script_path:
                    print("##############")
                    print("Starting Process")
                    print("##############")
                    self.process = QtCore.QProcess(self)
                    self.process.readyReadStandardOutput.connect(self.stdoutReady)
                    self.process.readyReadStandardError.connect(self.stderrReady)
                    self.process.started.connect(lambda: self.started_process('Started!'))
                    self.process.finished.connect(lambda: self.finished_process('Finished!'))
                    with open(Active_Script_For_Script_Runner, 'w') as f:
                        f.write(script_path)
                    self.process.start(Python_Exe_Location, ['-u', imagescripter_scriptpy])
                    self.process.waitForFinished()

        except Exception as e:
            error_message = traceback.format_exc()
            print(error_message)













    def Kill_Recorder_Process(self):
        try:
            print('Killing Camera Process')
            os.system(r'TaskKill /im ffmpeg.exe /F')
        except Exception as e:
            print(e)
    def Open_Script_Runner_Multi(self):
        try:
            path = script_runner_class_multipy
            ##path = r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\script_runner_class_multi.py"
            self.open_to_file(path)
            #with open(path,'r') as f:
            #   txt1 = f.read()
            #self.ui.tabWidget.currentWidget().setText(txt1)
            #self.ui.label.setText(path)
        except Exception as e:
            print(e)

    def kil_console_process_external(self):
        pass
        #try:
        #    import signal
        #    os.kill(self.console_process.pid, signal.SIGTERM)
        #except Exception as e:
        #    print(e)



    def stop_was_clicked(self):
        self.ui.stackedWidget.setCurrentIndex(0)
        #try:
        #    self.kil_console_process_external()
        #except Exception as e:
        #    print(e)
        try:
            self.Kill_Recorder_Process()
            self.process.terminate()
            self.process.kill()
            self.process.close()
            self.append('Script Stopped')
        except Exception as e:
            self.append('Script Stopped')
            print(e)
        #self.process = QtCore.QProcess(self)
        #self.process.readyReadStandardOutput.connect(self.stdoutReady)
        #self.process.readyReadStandardError.connect(self.stderrReady)
        #self.process.started.connect(lambda: p('Started!'))
        #self.process.finished.connect(lambda: p('Finished!'))
        #print('Starting process')
        #self.process.start(r'C:\ImageScripter_2\python.exe', [r"C:\Users\Automation3\Desktop\test.py"])



    def run(self):
        self.ui.stackedWidget.setCurrentIndex(1)
        self.Kill_Recorder_Process()
        for i in self.List_of_script_checkboxes:
            if i.isChecked():
                self.run_a_script(i.script_path)





    def browse_for_folder_clicked_2(self):
        self.Main_Script_Folder = eval(Variable_File_Getter.getVariableFromFile('Active_Script_Folder'))[0]
        folder_name = QFileDialog.getExistingDirectory(self, 'Select directory',options = QFileDialog.DontUseNativeDialog,directory=self.Main_Script_Folder)
        if folder_name != '':
            file_name = os.path.basename(folder_name)
            lastDir = os.getcwd()
            os.chdir(Script_Runner_Folders_Folder)
            Dictionary = {'name': file_name,'path': folder_name,'wasSavedChecked':True}
            with open(file_name,'wb') as f:
                pickle.dump(Dictionary, f)
        self.generate_folder_selection_list()











        #pass
        #destDir = QFileDialog.getExistingDirectory(None,
        #                                                 'Open working directory',
        #                                                 All_Scripts_Folder_Location,
        #                                                 QFileDialog.ShowDirsOnly)





    def delete_controllers_clicked(self):
        try:
           #reply = QMessageBox.question(self, 'Message',
           #                              "Are you sure to delete the selected controller or controllers?", QMessageBox.Yes, QMessageBox.No)
           # if reply == QMessageBox.Yes:
                CurDir = os.getcwd()
                os.chdir(Script_Runner_Controllers_Folder)
                for i in self.List_of_Controller_checkboxes:

                    if i.isChecked() == True:

                        os.remove(i.file_name)

                self.generate_controller_selection_list()
                os.chdir(CurDir)
        except Exception as e:
            import traceback
            error_message = traceback.format_exc()
            print(error_message)
            #print(e)

    def delete_folders_clicked(self):
        reply = QMessageBox.question(self, 'Message',
                                     "Are you sure to delete the selected folder or folders?", QMessageBox.Yes, QMessageBox.No)
        if reply == QMessageBox.Yes:
            CurDir = os.getcwd()
            os.chdir(Script_Runner_Folders_Folder)
            for i in self.List_of_Folder_checkboxes:
                if i.isChecked():
                    os.remove(i.file_name)

            self.generate_folder_selection_list()
            os.chdir(CurDir)







    def add_new_controller_clicked(self):
        self.add_new_controller_window = Add_New_Controller_Widget_Class(self)



    def generate_controller_selection_list(self):
        os.chdir(Script_Runner_Controllers_Folder)
        self.List_of_Controller_checkboxes = []
        self.List_Of_Controlelrs = os.listdir(Script_Runner_Controllers_Folder)
        for i in reversed(range(self.ui.verticalLayout_11.count())):
            self.ui.verticalLayout_11.itemAt(i).widget().setParent(None)
        for controller in self.List_Of_Controlelrs:
            with open(controller, 'rb') as f:
                Controller_Dictionary = pickle.load(f)
                self.checkbox = Controller_Checkbox_Class(Controller_Dictionary)
                self.checkbox.stateChanged.connect(self.checkbox.wasClicked)
                self.ui.verticalLayout_11.addWidget(self.checkbox)
                self.List_of_Controller_checkboxes.append(self.checkbox)


    def generate_folder_selection_list(self):
        for i in reversed(range(self.ui.verticalLayout_3.count())):
            self.ui.verticalLayout_3.itemAt(i).widget().deleteLater()
        self.List_of_Folder_checkboxes = []
        lastDir = os.getcwd()
        os.chdir(Script_Runner_Folders_Folder)
        self.List_Of_Script_Folders = os.listdir(Script_Runner_Folders_Folder)
        for file_name in self.List_Of_Script_Folders:
            with open(file_name,'rb') as f:
                Folder_Dictionary = pickle.load(f)
            self.checkbox = Folder_Checkbox_Class(Folder_Dictionary)
            self.checkbox.stateChanged.connect(self.checkbox.wasClicked)
            self.ui.verticalLayout_3.addWidget(self.checkbox)
            self.List_of_Folder_checkboxes.append(self.checkbox)

    def clear_folder(self,folder):
        print('Clear Folder')
        List_of_files = os.listdir(folder)
        os.chdir(folder)
        for file in List_of_files:
            try:
                os.remove(file)
            except Exception as e:
                print(e)



    def generate_new_scripts_from_selected_folders(self):
        self.clear_folder(Script_Runner_Scripts_Folder)
        for i in self.List_of_Folder_checkboxes:
            if i.isChecked():
                ListOfScripts = i.getListOfScripts()
                dir_location = i.folder_path
                for script in ListOfScripts:
                    os.chdir(dir_location)
                    full_path = os.path.abspath(script)
                    os.chdir(Script_Runner_Scripts_Folder)
                    name = script.replace('.py','')
                    directory_name = os.path.basename(dir_location)



                    Dictionary = {'directory_name': directory_name,'name': name,'path':full_path,'directory_full_path':dir_location,'wasSavedChecked':True,'script_name':script}
                    with open(name, 'wb') as f:
                        pickle.dump(Dictionary, f)
        self.populate_script_checklist_based_on_saved_scripts()

    def populate_script_checklist_based_on_saved_scripts(self):
        print('populate_script_checklist_based_on_saved_scripts')
        try:
            for i in reversed(range(self.ui.verticalLayout_7.count())):
                self.ui.verticalLayout_7.itemAt(i).widget().deleteLater()
            self.List_of_script_checkboxes = []
            List_of_file_names = os.listdir(Script_Runner_Scripts_Folder)
            for file_name in List_of_file_names:
                os.chdir(Script_Runner_Scripts_Folder)
                with open(file_name, 'rb') as f:
                    #print(file_name)
                    Script_Dictionary = pickle.load(f)
                    self.checkbox = Script_Checkbox_Class(Script_Dictionary)
                    self.checkbox.stateChanged.connect(self.checkbox.wasClicked)
                    self.ui.verticalLayout_7.addWidget(self.checkbox)
                    self.List_of_script_checkboxes.append(self.checkbox)
        except Exception as e:
            print(e)













    def clearLayout(self, layout):
        if layout is not None:
            while layout.count():
                item = layout.takeAt(0)
                widget = item.widget()
                if widget is not None:
                    widget.deleteLater()
                else:
                    self.clearLayout(item.layout())


    def generate_play_list(self):
        list = QListView()
        list.Movement(QListView.Free)
        list.setDragDropMode(QAbstractItemView.InternalMove)
        list.setDefaultDropAction(Qt.MoveAction)
        list.setDragDropOverwriteMode(True)
        list.setAcceptDrops(True)
        list.setDropIndicatorShown(True)
        list.setDragEnabled(True)


        self.model = QStandardItemModel(list)

        for i in self.List_of_script_checkboxes:
            if i.isChecked():
                item =  QStandardItem(i.script_name)
                item.setCheckable(False)
                item.setDragEnabled(True)
                item.setDropEnabled(False)
                # Add the item to the model
                self.model.appendRow(item)
        #self.model.itemChanged.connect(self.on_item_changed)
        list.setModel(self.model)
        self.ui.scrollArea_4.setWidget(list)





        '''
        for i in reversed(range(self.ui.verticalLayout_16.count())):
            self.ui.verticalLayout_16.itemAt(i).widget().deleteLater()
        for i in self.List_of_script_checkboxes:
            if i.isChecked():
                self.label = QLabel(i.script_name)
                self.ui.verticalLayout_16.addWidget(self.label)
        '''






if __name__ == '__main__':
        app = QApplication(sys.argv)
        ex = Script_Runner_Gui_Class()
        sys._excepthook = sys.excepthook

        def exception_hook(exctype, value, traceback):
            print(exctype, value, traceback)
            sys._excepthook(exctype, value, traceback)
            sys.exit(1)
        sys.excepthook = exception_hook
        sys.exit(app.exec_())




