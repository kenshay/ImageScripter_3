from PyQt5 import QtGui,uic,QtCore
from win32api import GetSystemMetrics
import sys
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog,QTextEdit,QMainWindow
import cv2
import win32api
from datetime import datetime as datetime1
import socket
from paths import Dashboard_Server_IP, Dashboard_Server_PORT
import traceback
import pickle
import os
import time
import multiprocessing
import random
import pyautogui
import matplotlib.pyplot as plt
import pickle
import cv2
from imagescripter.core.ssh_manager_for_image_show import SSH_Manager
from win32api import GetSystemMetrics
try:
    from imagescripter.core.functions import Start_Image_Show2,Close_Image_Show2,Start_Loading_Interface,Close_Loading_Interface
except Exception as e:
    print(e)
    pass

from imagescripter.core.functions import Ping
import traceback
import win32api
import ctypes
from imagescripter.core.imagescripter_script import ImageScripter_Script_Class
from time import sleep
from datetime import datetime
import PyQt5
import time
from PyQt5.QtGui import QStandardItemModel,QStandardItem
from imagescripter.core.variable_file_getter import Variable_File_Getter
import os
from paths import *
import re
from PyQt5.QtCore    import *
from PyQt5.QtWidgets import *







def atoi(text):
    return int(text) if text.isdigit() else text
def natural_keys(text):
    return [atoi(c) for c in re.split('(\d+)', text)]


def GetDisplayInformation():
    monitors = win32api.EnumDisplayMonitors()
    for i in monitors:
        print(win32api.GetMonitorInfo(i[0]))

def GetSecondDisplyRect():
    secondMonort = None
    monitors = win32api.EnumDisplayMonitors()
    for i in monitors:
        a = win32api.GetMonitorInfo(i[0])
        if a['Flags'] == 0:
            x,y,w,h = a['Monitor']
            w = x - w
            h = y - h
            w = -w
            h = -h
            print(x,y,w,h)
            return x,y,w,h










class Custom_StandardItem_Class(QStandardItem):
    def __init__(self,text = ''):
        super().__init__()
        self.setText(text)
        self.Index_Time_String = None

class Controller_Checkbox_Class(QCheckBox):
    def __init__(self,Controller_Dictionary):
        super().__init__()
        self.Dictionary = Controller_Dictionary
        #print(self.Dictionary)
        self.name = Controller_Dictionary['name']
        self.password = Controller_Dictionary['password']
        self.type = Controller_Dictionary['type']
        self.wasSavedChecked = Controller_Dictionary['wasSavedChecked']
        self.path_of_dictionary_file = Controller_Dictionary['path']
        self.setText(self.name)
        self.file_name = self.name
        self.setChecked(self.wasSavedChecked)
        self.initContextMenu()

    def initContextMenu(self):
        self.setContextMenuPolicy(Qt.CustomContextMenu)
        self.customContextMenuRequested.connect(self.on_context_menu)
        # create context menu
        self.popMenu = QMenu(self)
        self.get_controller_information = QAction('Get Information', self)
        self.get_controller_information.triggered.connect(self.Get_Information_Clicked)
        self.popMenu.addAction(self.get_controller_information)

    def Get_Information_Clicked(self):
        MessageVar = ''
        for i in self.Dictionary:
            MessageVar = MessageVar + i + ' = ' + str(self.Dictionary[i]) + '\n'
        reply = QMessageBox.question(self, 'Message',
                                     MessageVar, QMessageBox.Yes, QMessageBox.No)


    def on_context_menu(self, point):
        # show context menu
        self.popMenu.exec_(self.mapToGlobal(point))

    def wasClicked(self):
            os.chdir(Script_Runner_Controllers_Folder)
            with open(self.name,'rb') as f:
                Controller_Dictionary = pickle.load(f)
            with open(self.name, 'wb') as f:
                Controller_Dictionary['wasSavedChecked'] = self.isChecked()
                pickle.dump(Controller_Dictionary, f)






class Script_Loop_RadioButton(QRadioButton):
    def __init__(self,text,loop_path):
        super().__init__()
        self.setText(text)
        self.loopPath = loop_path






class Script_Checkbox_Class(QCheckBox):
    def __init__(self,Script_Dictionary):
        super().__init__()
        self.Script_Dictionary = Script_Dictionary
        #self.Script_Dictionary)
        self.script_name = self.Script_Dictionary['name']
        self.script_path = self.Script_Dictionary['path']
        self.script_directory_path = self.Script_Dictionary['directory_full_path']
        self.script_directory_name = self.Script_Dictionary['directory_name']
        self.wasSavedChecked = self.Script_Dictionary['wasSavedChecked']
        self.file_name = '[' + self.script_directory_name + ']_' + self.script_name
        self.setText(self.file_name)

        self.setChecked(self.wasSavedChecked)
    def wasClicked(self):
        try:
            os.chdir(Script_Runner_Scripts_Folder)
            with open(self.file_name,'rb') as f:
                Scrip_Dictionary = pickle.load(f)
            with open(self.file_name, 'wb') as f:
                Scrip_Dictionary['wasSavedChecked'] = self.isChecked()
                pickle.dump(Scrip_Dictionary, f)
        except Exception as e:
            print(e)


class Folder_Checkbox_Class(QCheckBox):
    def __init__(self,Folder_Dictionary):
        super().__init__()
        #Dictionary = {'name': file_name, 'path': folder_name, 'wasSavedChecked': True}
        self.file_name = Folder_Dictionary['name']
        self.folder_path = Folder_Dictionary['path']

        self.wasSavedChecked = Folder_Dictionary['wasSavedChecked']
        self.setText(self.file_name)
        #self.Index_Time_String = None
        self.setChecked(self.wasSavedChecked)

    def getListOfScripts(self):
        try:
            List = os.listdir(self.folder_path)
            ListofScripts = []
            for i in List:
                if i.endswith('.py'):
                    ListofScripts.append(i)
            return ListofScripts
        except Exception as e:
            print(e)

    def wasClicked(self):
        try:
            os.chdir(Script_Runner_Folders_Folder)
            with open(self.file_name,'rb') as f:
                Folder_Dictionary = pickle.load(f)
            with open(self.file_name, 'wb') as f:
                Folder_Dictionary['wasSavedChecked'] = self.isChecked()
                pickle.dump(Folder_Dictionary, f)
        except Exception as e:
            print(e)



class Add_New_Controller_Widget_Class(QWidget):
    def __init__(self,parent):
        super().__init__()
        self.parent = parent
        self.ui = uic.loadUi(Add_New_Controller_Ui)
        self.ui.setWindowIcon(QtGui.QIcon(loading_eyepng))
        self.ui.setWindowTitle('Add New Controller')
        self.ui.pushButton_2.clicked.connect(self.save_was_controller_clicked)
        self.ui.pushButton.clicked.connect(self.cancel_add_controller_clicked)
        self.ui.show()

    def cancel_add_controller_clicked(self):
        try:
            self.ui.close()
            self.close()
        except Exception as e:
            print(e)





    def save_was_controller_clicked(self):
        try:
            controller_name = str(self.ui.lineEdit.text())
            password = str(self.ui.lineEdit_2.text())
            IP = str(self.ui.lineEdit_3.text())
            type = str(self.ui.comboBox.currentText())
            wasSavedChecked = True
            curdir = os.getcwd()
            if controller_name != '':
                os.chdir(Script_Runner_Controllers_Folder)
                path = os.path.abspath(controller_name)
                Dictionary = {'name': controller_name, 'password': password, 'ip': IP, 'type': type, 'wasSavedChecked': wasSavedChecked, 'path':path}
                with open(controller_name,'wb') as f:
                    pickle.dump(Dictionary, f)
                    #f.write(password)
                self.parent.generate_controller_selection_list()
                self.ui.close()
                self.close()
                os.chdir(curdir)
        except Exception as e:
            print(e)



class Server_Thread_Class(QThread):
    def __init__(self,parent):
        QThread.__init__(self)
        self.parent = parent
    def run(self):
        try:
            import socket
            HOST = '127.0.0.1'
            PORT = 65432
            while True:
                try:
                    print("Starting Server")
                    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                        s.bind((HOST, PORT))
                        s.listen()
                        conn, addr = s.accept()
                        with conn:
                            print('Connected by', addr)
                            while True:
                                data = conn.recv(1024)
                                command = data.decode()
                                if command == 'isRunning()':
                                    msg = pickle.dumps(True)
                                    conn.send(msg)
                                else:
                                    command = 'self.parent.' + command
                                    exec(command)
                                    if not data:
                                        break
                                    conn.sendall(data)
                        print(data.decode())
                except Exception as e:
                    print(e)
        except Exception as e:
            print(e)














class Update_Controller_Info_Thread_Class(QThread):
    def __init__(self,parent):
        QThread.__init__(self)
        self.parent_ui = parent
        self.Last_Number = 0
    def run(self):
        try:
            while True:
                if The_NAME == 'elan':
                    try:
                        with open(Controller_Nametxt,'r') as f:
                            controller_name = f.read()
                            self.parent_ui.controller_name.setText(controller_name)
                    except Exception as e:
                        print(e)
                    try:
                        with open(Controller_IPtxt,'r') as f:
                            controller_ip = f.read()
                            self.parent_ui.controller_ip.setText(controller_ip)
                    except Exception as e:
                        print(e)
                try:
                    with open(Total_Runs_Script_Runnertxt, 'r') as f:
                        scritp_runner_cycles = f.read()
                        self.parent_ui.total_runs.setText('Current Cycle = ' + scritp_runner_cycles)
                        self.parent_ui.total_runs_2.setText('Current Cycle = ' + scritp_runner_cycles)
                except Exception as e:
                    print(e)
                sleep(10)
        except Exception as e:
            print(e)

class Update_Time_Thread_Class(QtCore.QThread):
    def __init__(self,parent):
        QtCore.QThread.__init__(self)
        self.parent_ui = parent
    def run(self):
        try:
            while True:
                try:
                    time.sleep(3)
                except:
                    pass

                try:
                    currentDT = datetime1.now()
                    time = currentDT.strftime("%I:%M:%S %p")
                    self.parent_ui.time.setText(str(time))
                except Exception as e:
                    print(e)
                try:
                    #time = currentDT.strftime("%Y/%m/%d")
                    time = currentDT.strftime("%m/%d/%Y")
                    self.parent_ui.year.setText(str(time))
                except Exception as e:
                    print(e)
        except Exception as e:
            print(e)





class Get_Build_Thread_Class(QtCore.QThread):
    def __init__(self,parent):
        QtCore.QThread.__init__(self)
        self.parent_ui = parent
    def run(self):
        try:
            while True:
                if The_NAME == 'elan':

                    with open(Controller_IPtxt, 'r') as f:
                        IP = f.read()
                    if Ping(IP):
                        Build = SSH_Manager.get_Build()
                    else:
                        Build = 'Controller Offline -> ' + IP
                else:
                    with open(VersionBuild, 'r') as f:
                        Build = f.read()
                self.parent_ui.build.setText(Build)
                self.parent_ui.build_2.setText(Build)
                #time.sleep(60)
        except Exception as e:
            print(e)
            self.parent_ui.build.setText(str(e))
            self.parent_ui.build_2.setText(str(e))


class Get_Controller_Info_Thread_Memory_Use_Class(QtCore.QThread):
    def __init__(self,parent):
        QtCore.QThread.__init__(self)
        self.parent_ui = parent
        self.Last_Number = 0
    def run(self):
        while True:
            try:
                Did_it_get_new_info = False
                try:
                    self.Memory_In_Use = SSH_Manager.get_percent_of_memory_In_Use()
                    self.Last_Number = self.Memory_In_Use
                    Did_it_get_new_info = True
                except:
                    Did_it_get_new_info = False
                    self.Memory_In_Use = self.Last_Number
                if Did_it_get_new_info == True:
                    self.parent_ui.memory_2.setText("Memory Used = " + str(self.Memory_In_Use) + ' %')
                else:
                    self.parent_ui.memory_2.setText("Memory Used = " + str(self.Memory_In_Use) + ' %')
            except Exception as e:
                print(e)


class Get_Amount_Of_SSH_Connections_Class(QtCore.QThread):
    def __init__(self,parent):
        QtCore.QThread.__init__(self)
        self.parent_ui = parent
        self.Last_Number = 0
    def run(self):
        while True:
            try:
                Did_it_get_new_info = False
                try:
                    self.SSH_In_Use = SSH_Manager.get_amount_of_ssh_connections_in_use()
                    self.Last_Number = self.SSH_In_Use
                    Did_it_get_new_info = True
                except:
                    Did_it_get_new_info = False
                    self.SSH_In_Use = self.Last_Number
                if Did_it_get_new_info == True:
                    self.parent_ui.ssh.setText("SSH CONNECTIONS = " + str(self.SSH_In_Use))
                    self.parent_ui.ssh_2.setText("SSH CONNECTIONS = " + str(self.SSH_In_Use))
                else:
                    self.parent_ui.ssh.setText("SSH CONNECTIONS = " + str(self.SSH_In_Use))
                    self.parent_ui.ssh_2.setText("SSH CONNECTIONS = " + str(self.SSH_In_Use))
            except Exception as e:
                print(e)
                self.parent_ui.ssh.setText("SSH CONNECTIONS = Error")
                self.parent_ui.ssh_2.setText("SSH CONNECTIONS = Error")












class Get_Controller_Info_Thread_Hardrive_Space_Used_Class(QtCore.QThread):
    def __init__(self,parent):
        QtCore.QThread.__init__(self)
        self.parent_ui = parent
        self.Last_Number = 0
    def run(self):
        while True:
            try:
                Did_it_get_new_info = False
                try:
                    self.Hard_In_Use = SSH_Manager.get_percent_of_harddrive_In_Use()
                    self.Last_Number = self.Hard_In_Use
                    Did_it_get_new_info = True
                except:
                    Did_it_get_new_info = False
                    self.Hard_In_Use = self.Last_Number
                if Did_it_get_new_info == True:
                    self.Hard_In_Use =  'Drive Info = ' + str(self.Hard_In_Use).replace('Filesystem                Size      Used Available Use% Mounted on/dev/root               ','')
                    self.Hard_In_Use =  self.Hard_In_Use.replace('Filesystem      Size  Used Avail Use% Mounted on/dev/mmcblk0p2','')
                    self.Hard_In_Use =  self.Hard_In_Use.replace('Filesystem      Size  Used Avail Use% Mounted on/dev/mmcblk0p2','')
                    self.parent_ui.space.setText(str(self.Hard_In_Use))

                else:
                    self.Hard_In_Use = 'Drive Info = ' + str(self.Hard_In_Use).replace(
                        'Filesystem                Size      Used Available Use% Mounted on/dev/root               ',
                        '')
                    self.Hard_In_Use = self.Hard_In_Use.replace(
                        'Filesystem      Size  Used Avail Use% Mounted on/dev/mmcblk0p2', '')
                    self.parent_ui.space.setText(str(self.Hard_In_Use))

            except Exception as e:
                self.parent_ui.space.setText(str(e))
                print(e)















class Get_Controller_Info_Thread_Memory_Free_Class(QtCore.QThread):
    def __init__(self,parent):
        QtCore.QThread.__init__(self)
        self.parent_ui = parent
        self.Last_Number = 0
    def run(self):
        while True:
            try:
                Did_it_get_new_info = False
                try:
                    self.Memory_In_Use = SSH_Manager.get_percent_of_memory_free()
                    self.Last_Number = self.Memory_In_Use
                    Did_it_get_new_info = True
                except:
                    Did_it_get_new_info = False
                    self.Memory_In_Use = self.Last_Number
                if Did_it_get_new_info == True:
                    self.parent_ui.memory.setText("Memory Free = " + str(self.Memory_In_Use) + ' %')
                else:
                    self.parent_ui.memory.setText("Memory Free = " + str(self.Memory_In_Use) + ' %')
            except Exception as e:
                print(e)



class Get_Controller_Info_Thread_CPU_USE_Class(QtCore.QThread):
    def __init__(self,parent):
        QtCore.QThread.__init__(self)
        self.parent_ui = parent
        self.Last_Number = 0
    def run(self):
        while True:
            try:
                Did_it_get_new_info = False
                try:
                    self.CPU_In_Use = SSH_Manager.get_percent_of_cpu_usage_used()
                    self.Last_Number = self.CPU_In_Use
                    Did_it_get_new_info = True
                except:
                    Did_it_get_new_info = False
                    self.CPU_In_Use = self.Last_Number
                if Did_it_get_new_info == True:
                    self.parent_ui.cpu_use.setText("CPU Used = " + str(self.CPU_In_Use) + ' %')
                else:
                    self.parent_ui.cpu_use.setText("CPU Used = " + str(self.CPU_In_Use) + ' %')
            except Exception as e:
                print(e)



class Send_Information_TO_DashBoard_Thread_Loop_Class(QtCore.QThread):
    def __init__(self,parent):
        QtCore.QThread.__init__(self)
        #Target_Path
        #Template_Path
    def run(self):
        while True:
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server:
                    print('Connecting to Server, ', Dashboard_Server_IP)
                    print('Connecting to Port, ', Dashboard_Server_PORT)
                    server.connect((Dashboard_Server_IP, Dashboard_Server_PORT))
                    print('Connected to Server')
                    while True:
                        image = pyautogui.screenshot()
                        imag_path = Temp_Data_location + "desktop.png"
                        image.save(imag_path)
                        with open(imag_path, 'rb') as f:
                            desktop_picture = f.read()

                        with open(Template_Path, 'rb') as f:
                            template = f.read()

                        with open(Target_Path, 'rb') as f:
                            target = f.read()
                        aList = []
                        aList.append(('controller_name', 'Frank2'))
                        aList.append(('station_name', 'Smoke_Station'))
                        aList.append(('script_name', '1_Add_Camera'))
                        aList.append(('template', template))
                        aList.append(('desktop_picture', desktop_picture))
                        aList.append(('target', target))
                        aList.append(('controller_build', '8.4.81.156'))
                        aList.append(('controller_ip', '192.168.0.11'))
                        aList.append(('cpu_usage', '77%'))
                        aList.append(('memory_free', '3.8%'))
                        aList.append(('memory_used', '65.2%'))
                        aList.append(('drive_space_used', '78.2%'))
                        aList.append(('ssh_connections', '11'))
                        aList.append(('cycle', '8'))
                        aList.append(('time', '10:58:11 AM'))
                        aList.append(('date', '2/21/2020'))
                        Info_Dictionary = dict(aList)
                        Info_Dictionary_Pickled = pickle.dumps(Info_Dictionary)
                        server.sendall(Info_Dictionary_Pickled)
                        time.sleep(2)
            except Exception as e:
                print(e)
                traceback.print_exc()






class Script_Runner_Gui_Class(QWidget):
    def __init__(self,Run_On_Start = False):
            QWidget.__init__(self)
            self.List_of_script_checkboxes = []
            self.List_Of_Script_Folders = []
            self.ui = uic.loadUi(ImageScripter_Location + "Lib\site-packages\Script_Runner\script_runner_gui.ui")
            self.ui.total_runs_2.setText('')
            self.ui.ssh_2.setText('')
            self.ui.build_2.setText('')
            self.ui.script_name_2.setText('')
            self.ui.closeEvent = self.closeEvent
            print('Starting')
            self.Server_Thread = Server_Thread_Class(self.ui)
            self.Server_Thread.start()
            self.ChecK_Run_on_Start_State()
            self.ChecK_Stop_On_Fail_State()
            self.ChecK_Git_Auto_State()
            load_image_picture_changed_paths = [Template_Path]
            self.picture_changed_watcher = QtCore.QFileSystemWatcher(load_image_picture_changed_paths)
            self.picture_changed_watcher.fileChanged.connect(self.load_image_picture_changed)



            try:
                clear_file_paths = [Clear_File_Script_Writer]
                self.clear_file_changed_watcher = QtCore.QFileSystemWatcher(clear_file_paths)
                self.clear_file_changed_watcher.fileChanged.connect(self.clear_everything)
            except Exception as e:
                print(e)
                with open(Clear_File_Script_Writer,'w') as f:
                    f.write('True')
                clear_file_paths = [Clear_File_Script_Writer]
                self.clear_file_changed_watcher = QtCore.QFileSystemWatcher(clear_file_paths)
                self.clear_file_changed_watcher.fileChanged.connect(self.clear_everything)



            RED_load_image_picture_changed_paths = [Current_Image_Cordinates]
            self.RED_picture_changed_watcher = QtCore.QFileSystemWatcher(RED_load_image_picture_changed_paths)
            self.RED_picture_changed_watcher.fileChanged.connect(self.draw_red_box)

            clear_text_editors_paths = [clear_text_editors]
            self.clear_text_editors_file_changed_watcher = QtCore.QFileSystemWatcher(clear_text_editors_paths)
            self.clear_text_editors_file_changed_watcher.fileChanged.connect(self.clear_text_editors)

            self.ui.setWindowTitle("Script Runner")
            self.generate_controller_selection_list()
            self.generate_folder_selection_list()
            #self.populate_script_checklist_based_on_saved_scripts()
            #self.generate_play_list()


            self.init_radioButtons_for_loop()



            self.ui.stackedWidget.setCurrentIndex(0)

            self.ui.pushButton_4.clicked.connect(self.add_new_controller_clicked)
            self.ui.pushButton_5.clicked.connect(self.delete_folders_clicked)
            self.ui.pushButton_2.clicked.connect(self.Check_all_Scripts)
            self.ui.pushButton.clicked.connect(self.un_Check_all_Scripts)
            self.ui.pushButton_10.clicked.connect(self.reset_cycles)
            self.ui.pushButton_11.clicked.connect(self.reset_cycles)
            self.ui.pushButton_3.clicked.connect(self.delete_controllers_clicked)
            self.ui.pushButton_33.clicked.connect(self.browse_for_folder_clicked_2)
            self.ui.pushButton_7.clicked.connect(self.run_a_loop)

            #Send_Information_TO_DashBoard_Thread_Loop = Send_Information_TO_DashBoard_Thread_Loop_Class(self)
            #Send_Information_TO_DashBoard_Thread_Loop.start()


            self.On_Fail_Go_To_Next_Folder_RadioButton.toggled.connect(self.go_to_next_folder_on_fail_radio_clicked)
            self.Default_RadioButton.toggled.connect(self.default_radio_clicked)
            self.ui.radioButton.toggled.connect(self.run_on_start_radio_clicked)
            self.ui.radioButton_2.toggled.connect(self.stop_on_fail_radio_clicked)
            self.ui.radioButton_3.toggled.connect(self.git_auto_radio_clicked)

            self.ui.pushButton_6.clicked.connect(self.generate_new_scripts_from_selected_folders)
            self.ui.pushButton_14.clicked.connect(self.refresh_scripts)
            self.ui.pushButton_8.clicked.connect(self.stop_was_clicked)
            self.ui.pushButton_12.clicked.connect(self.kill_was_clicked)
            self.ui.pushButton_13.clicked.connect(self.kill_was_clicked)
            self.ui.pushButton_9.clicked.connect(self.stop_was_clicked)
            self.set_last_known_state_of_radio_buttons()
            #self.ui.pushButton_8.clicked.connect(self.generate_play_list)
            self.populate_script_checklist_based_on_saved_scripts()
            self.Move_Window()

            self.ui.showMaximized()
            if self.ui.radioButton.isChecked():
                Run_On_Start = True

            if Run_On_Start == True:
                self.run_a_loop()
            #self.clear_everything()

    def keyPressEvent(self, event):
        super().keyPressEvent(e)
        if event.key() == Qt.Key_Escape:
            self.kill_was_clicked()
        #    #self.kill_All()
        #else:
        #    print(event)
        #    print(event.key())


        ########
        #        def keyPressEvent(self, e):
        #            super().keyPressEvent(e)

        #    ######




    def clear_everything(self):
        self.ui.total_runs_2.setText('Waiting For Current Cycle')
        self.ui.build_2.setText('Waiting For Build')
        self.ui.ssh.setText('Waiting For SSH Connections')
        self.ui.ssh_2.setText('Waiting For SSH Connections')
        self.ui.controller_name.setText('Waiting For Controller Name')
        self.ui.controller_ip.setText('Waiting For Controller IP')
        self.ui.build.setText('Waiting For Build')
        self.ui.cpu_use.setText('Waiting For CPU Use')
        self.ui.memory.setText('Waiting For Memory Used')
        self.ui.memory_2.setText('Waiting For Memory Available')
        self.ui.space.setText('Waiting For Space')
        self.ui.script_name.setText('Waiting For Script Name')
        self.ui.script_name_2.setText('Waiting For Script Name')
        self.ui.total_runs.setText('Waiting For Current Cycle')
        self.ui.time.setText('Waiting For Time')
        self.ui.year.setText('Waiting For Year')
        self.ui.action.setText('Waiting For Action')
        self.ui.percent_match.setText('Waiting For Percent Match')


    def reset_cycles(self):
        try:
            with open(Total_Runs_Script_Runnertxt, 'w') as f:
                f.write('0')
            self.ui.total_runs.setText('Current Cycle = ' + '0')
            self.ui.total_runs_2.setText('Current Cycle = ' + '0')
        except Exception as e:
            print(e)


    def init_Threads(self):
        try:
            #self.ui.controller_name.setText('123')

            self.Update_Controller_Info_And_Cycle_Thread = Update_Controller_Info_Thread_Class(self.ui)
            self.Update_Controller_Info_And_Cycle_Thread.start()


            self.Update_Time_Thread = Update_Time_Thread_Class(self.ui)
            self.Update_Time_Thread.start()

            self.Get_Build_Thread = Get_Build_Thread_Class(self.ui)
            self.Get_Build_Thread.start()

            #############
            self.Get_Controller_Info_Thread_Memory_Use_Thead = Get_Controller_Info_Thread_Memory_Use_Class(self.ui)
            self.Get_Controller_Info_Thread_Memory_Use_Thead.start()

            self.Get_Controller_Info_Thread_Hardrive_Space_Thead = Get_Controller_Info_Thread_Hardrive_Space_Used_Class(self.ui)
            self.Get_Controller_Info_Thread_Hardrive_Space_Thead.start()

            self.Get_Controller_Info_Thread_Memory_Free_Thead = Get_Controller_Info_Thread_Memory_Free_Class(self.ui)
            self.Get_Controller_Info_Thread_Memory_Free_Thead.start()

            self.Get_Controller_Info_Thread_CPU_USE_Thead = Get_Controller_Info_Thread_CPU_USE_Class(self.ui)
            self.Get_Controller_Info_Thread_CPU_USE_Thead.start()

            self.Get_Amount_Of_SSH_Connections_Thead = Get_Amount_Of_SSH_Connections_Class(self.ui)
            self.Get_Amount_Of_SSH_Connections_Thead.start()




            '''
            Controller_Info_Thread1 = Get_Controller_Info_Thread_Memory_Use(self.ui)
            Controller_Info_Thread1.start()
    
            Controller_Info_Thread4 = Get_Controller_Info_Thread_Hardrive_Space_Used(self.ui)
            Controller_Info_Thread4.start()
    
            Controller_Info_Thread2 = Get_Controller_Info_Thread_Memory_Free(self.ui)
            Controller_Info_Thread2.start()
    
            Controller_Info_Thread3 = Get_Controller_Info_Thread_CPU_USE(self.ui)
            Controller_Info_Thread3.start()
            '''
        except Exception as e:
            print(e)









    def ChecK_Run_on_Start_State(self):
        try:
            with open(run_on_start_radio_button_file_state_location, 'r') as f:
                self.ui.radioButton.setChecked(eval(f.read()))
        except Exception as e:
            print(e)
            self.ui.radioButton.setChecked(False)


    def ChecK_Stop_On_Fail_State(self):
        try:
            with open(Stop_on_Fail_radio_button_file_state_location, 'r') as f:
                self.ui.radioButton_2.setChecked(eval(f.read()))
        except Exception as e:
            with open(Stop_on_Fail_radio_button_file_state_location, 'w') as f:
                f.write('False')
            print(e)
            self.ui.radioButton_2.setChecked(False)



    def ChecK_Git_Auto_State(self):
        try:
            with open(Git_Bool_Path, 'r') as f:
                self.ui.radioButton_3.setChecked(eval(f.read()))
        except Exception as e:
            with open(Git_Bool_Path, 'w') as f:
                f.write('False')
            print(e)
            self.ui.radioButton_3.setChecked(False)










    def git_auto_radio_clicked(self):
        try:
            if self.ui.radioButton_3.isChecked():
                with open(Git_Bool_Path,'w') as f:
                    f.write('True')
            else:
                with open(Git_Bool_Path,'w') as f:
                    f.write('False')
        except Exception as e:
            print(e)


    def stop_on_fail_radio_clicked(self):
        try:
            if self.ui.radioButton_2.isChecked():
                with open(Stop_on_Fail_radio_button_file_state_location,'w') as f:
                    f.write('True')
            else:
                with open(Stop_on_Fail_radio_button_file_state_location,'w') as f:
                    f.write('False')
        except Exception as e:
            print(e)



    def run_on_start_radio_clicked(self):
        try:
            if self.ui.radioButton.isChecked():
                with open(run_on_start_radio_button_file_state_location,'w') as f:
                    f.write('True')
            else:
                with open(run_on_start_radio_button_file_state_location,'w') as f:
                    f.write('False')
        except Exception as e:
            print(e)


    def init_radioButtons_for_loop(self):
        try:
            self.List_Of_RadioButtons_For_Loop = []

            self.Default_RadioButton = Script_Loop_RadioButton('Default',Default_Loop)
            self.List_Of_RadioButtons_For_Loop.append(self.Default_RadioButton)

            self.On_Fail_Go_To_Next_Folder_RadioButton = Script_Loop_RadioButton('On fail go to next folder',Run_Next_Folder_On_Fail_Loop)
            self.List_Of_RadioButtons_For_Loop.append(self.On_Fail_Go_To_Next_Folder_RadioButton)
            for i in self.List_Of_RadioButtons_For_Loop:
                self.ui.horizontalLayout_3.addWidget(i)
        except Exception as e:
            print(e)



    def set_last_known_state_of_radio_buttons(self):
        try:
            with open(Default_Radio_Button_State_File_Location, 'r') as f:
                var = eval(f.read())
            self.Default_RadioButton.setChecked(var)
        except Exception as e:
            print(e)
            self.Default_RadioButton.setChecked(True)


        try:
            with open(on_fail_go_to_next_folder_Radio_Button_State_File_Location,'r') as f:
                var = eval(f.read())
            self.On_Fail_Go_To_Next_Folder_RadioButton.setChecked(var)
        except Exception as e:
            print(e)
            with open(on_fail_go_to_next_folder_Radio_Button_State_File_Location,'w') as f:
                f.write('False')
            self.On_Fail_Go_To_Next_Folder_RadioButton.setChecked(False)





    def default_radio_clicked(self):
        try:
            if self.Default_RadioButton.isChecked():
                with open(Default_Radio_Button_State_File_Location,'w') as f:
                    f.write('True')
            else:
                with open(Default_Radio_Button_State_File_Location,'w') as f:
                    f.write('False')
        except Exception as e:
            print(e)

    def go_to_next_folder_on_fail_radio_clicked(self):
        try:
            if self.On_Fail_Go_To_Next_Folder_RadioButton.isChecked():
                with open(on_fail_go_to_next_folder_Radio_Button_State_File_Location,'w') as f:
                    f.write('True')
            else:
                with open(on_fail_go_to_next_folder_Radio_Button_State_File_Location,'w') as f:
                    f.write('False')
        except Exception as e:
            print(e)

    def clear_text_editors(self):
        try:
            print('Clear Text Editors')
            self.ui.textEdit.clear()
            self.ui.textEdit_2.clear()
        except Exception as e:
            print(e)







    def Move_Window(self):
        try:
            #if PyQt5.QtWidgets.QDesktopWidget().screenCount() == 2:
            x, y, w, h = GetSecondDisplyRect()
            self.ui.setGeometry(x, y, w, h)
            self.ui.showMaximized()
        except Exception as e:
            print(e)

    def draw_red_box(self):
        try:
            with open(Current_Image_Cordinates, 'r') as f:
                txt = f.read()
                List = txt.split(',')
                x1 = int(List[0])
                y1 = int(List[1])
                x2 = int(List[2])
                y2 = int(List[3])
            img = cv2.imread(Template_Path, 3)
            cv2.rectangle(img, (x1, y1), (x2, y2), (0, 0, 255), 2)
            cv2.imwrite(Templet_Image_File_With_Red_Box, img)
            self.load_image_picture_changed(Templet_Image_File_With_Red_Box)
        except Exception as e:
            print(e)

    def load_image_picture_changed(self,Image_Path):
        #try:
        #    import cv2
        #    import io
        #    import socket
        #    import struct
        #    import time
        #    import pickle
        #    import zlib
        #
        #    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        #    #client_socket.connect(('127.0.0.1', 8485))
        #    client_socket.connect(('172.16.42.56', 8485))
        #    with open(Image_Path, 'rb') as f:
        #        message = f.read()
        #    client_socket.sendall(message)
        #    client_socket.close()
        #except Exception as e:
        #    pass















        try:
            self.ui.template_2.show()
            self.ui.target.show()
            Width = GetSystemMetrics(0)
            Height = GetSystemMetrics(1)
            Height = Height - 250
            Pixmap = QtGui.QPixmap(Image_Path)
            Pixmap = Pixmap.scaled(Width,Height,QtCore.Qt.KeepAspectRatio)
            self.ui.template_2.setMaximumSize((Width/10)*7,16777215)
            self.ui.template_2.setPixmap(Pixmap)
            self.ui.template_2.resize(Pixmap.width(), Pixmap.height())
            Pixmap2 = QtGui.QPixmap(Target_Path)
            Pixmap2 = Pixmap2.scaled(200, 100, QtCore.Qt.KeepAspectRatio)
            self.ui.target.setMaximumSize((Width/10)*7,16777215)
            self.ui.target.setPixmap(Pixmap2)
            self.ui.target.resize(Pixmap2.width(), Pixmap2.height() - Pixmap.height())
            try:
                with open(Current_Running_Script,'r') as f:
                    txt = f.read()
                self.ui.script_name.setText(txt)
                self.ui.script_name_2.setText(txt)
            except:
                self.ui.script_name.setText('')
                self.ui.script_name_2.setText('')
            try:
                with open(Current_Action,'r') as f:
                    txt = f.read()
                self.ui.action.setText(txt + '... ')
            except:
                self.ui.action.setText('')
            try:
                with open(Current_Thresh_Match,'r') as f:
                    txt = f.read()
                List = txt.split('.')
                PercentLong = List[1]
                txt = PercentLong[:2]
                if txt != '':
                    self.ui.percent_match.setText(txt + '% MATCH')
                else:
                    self.ui.percent_match.setText('')
            except Exception as e:
                print(e)
                self.ui.percent_match.setText('')
        except Exception as e:
            print(e)



    def Check_all_Scripts(self):
        try:
            for i in self.List_of_script_checkboxes:
                i.setChecked(True)
        except Exception as e:
            print(e)


    def un_Check_all_Scripts(self):
        try:
            for i in self.List_of_script_checkboxes:
                i.setChecked(False)
        except Exception as e:
            print(e)

    def stdoutReady(self):
        try:
            text = str(self.process.readAllStandardOutput(),encoding = "utf-8")
            #self.ui.template.setText(text)
            #self.ui.textEdit.setStyleSheet('color: rgb(85, 255, 12);\nbackground-color: rgb(0, 0, 0);')
            ##Variable_File_Getter.setFileFromVariable('Active_Script_Ouput',text)
            with open(Active_Script_Ouput,'w') as f:
                f.write(text)
            self.append(text)
        except Exception as e:
            print(e)
    def stderrReady(self):
        try:
            text = str(self.process.readAllStandardError(),encoding = "utf-8")
            #self.ui.textEdit.setStyleSheet('color: rgb(255, 0, 0);\nbackground-color: rgb(0, 0, 0);')
            ##Variable_File_Getter.setFileFromVariable('Active_Script_Ouput', text)
            with open(Active_Script_Ouput, 'w') as f:
                f.write(text)
            self.append(text)
        except Exception as e:
            print(e)
    def append(self, text):
        try:
            cursor = self.ui.textEdit.textCursor()
            cursor.movePosition(cursor.End)
            cursor.insertText(text)
            self.ui.textEdit.setTextCursor(cursor)
            #cursor.insertText('\n')
            #self.ui.textEdit.verticalScrollBar().setValue(self.ui.textEdit.verticalScrollBar().maximum())
            self.ui.textEdit.ensureCursorVisible()

            cursor = self.ui.textEdit_2.textCursor()
            cursor.movePosition(cursor.End)
            cursor.insertText(text)
            self.ui.textEdit_2.setTextCursor(cursor)
            #cursor.insertText('\n')
            #self.ui.textEdit.verticalScrollBar().setValue(self.ui.textEdit.verticalScrollBar().maximum())
            self.ui.textEdit_2.ensureCursorVisible()



        except Exception as e:
            print(e)


    def started_process(self,string):
        print('Started Process')

    def finished_process(self,string):
        print('Finished Process')


    def get_selected_loop(self):
        try:
            for scrip_radio_button in self.List_Of_RadioButtons_For_Loop:
                if scrip_radio_button.isChecked():
                    #quit_msg = scrip_radio_button.loopPath
                    #reply = QMessageBox.question(self, 'Message',
                    #                            quit_msg, QMessageBox.Yes, QMessageBox.No)





                    return scrip_radio_button.loopPath
        except Exception as e:
            print(e)





    def run_a_loop(self):
        try:
            self.clear_everything()
            self.init_Threads()
            self.ui.template_2.hide()
            self.ui.target.hide()
            self.ui.stackedWidget.setCurrentIndex(1)
            self.Kill_Recorder_Process()
            self.process = QtCore.QProcess(self)
            self.process.readyReadStandardOutput.connect(self.stdoutReady)
            self.process.readyReadStandardError.connect(self.stderrReady)
            self.process.started.connect(lambda: self.started_process('Started!'))
            self.process.finished.connect(lambda: self.finished_process('Finished!'))
            Selected_Loop = self.get_selected_loop()
            self.process.start(Python_Exe_Location, ['-u', Selected_Loop])


        except Exception as e:
            error_message = traceback.format_exc()
            print(error_message)



    def closeEvent(self, event):
        try:
            print("event")
            reply = QMessageBox.question(self, 'Message',
                "Are you sure to quit?", QMessageBox.Yes, QMessageBox.No)
            if reply == QMessageBox.Yes:
                event.accept()
            else:
                event.ignore()
        except Exception as e:
            print(e)









    def Kill_Recorder_Process(self):
        try:
            print('Killing Camera Process')
            os.system(r'TaskKill /im ffmpeg.exe /F')
        except Exception as e:
            print(e)
    def Open_Script_Runner_Multi(self):
        try:
            path = script_runner_class_multipy
            ##path = r"C:\ImageScripter_2\Lib\site-packages\imagescripter\core\script_runner_class_multi.py"
            self.open_to_file(path)
            #with open(path,'r') as f:
            #   txt1 = f.read()
            #self.ui.tabWidget.currentWidget().setText(txt1)
            #self.ui.label.setText(path)
        except Exception as e:
            print(e)

    def kil_console_process_external(self):
        try:
            import signal
            os.kill(int(self.process.pid), signal.SIGTERM)
        except Exception as e:
            print(e)



    def kill_was_clicked(self):
        try:
                for i in range(1000):
                    import os
                    os.system("taskkill /f /im  Python.exe")
                    #command = 'Taskkill /PID $$$ /F'
                    #command = command.replace('$$$',str(self.process.pid))
                    #print(command)
                    #os.system(command)
                    time.sleep(1)
        except Exception as e:
            print(e)










    def stop_was_clicked(self):
        self.ui.stackedWidget.setCurrentIndex(0)
        try:
            self.kil_console_process_external()
        except Exception as e:
            print(e)
        try:
            self.Kill_Recorder_Process()
            self.process.terminate()
            self.process.kill()
            self.process.close()
            self.append('Script Stopped')
        except Exception as e:
            self.append('Script Stopped')
            print(e)
        #self.process = QtCore.QProcess(self)
        #self.process.readyReadStandardOutput.connect(self.stdoutReady)
        #self.process.readyReadStandardError.connect(self.stderrReady)
        #self.process.started.connect(lambda: p('Started!'))
        #self.process.finished.connect(lambda: p('Finished!'))
        #print('Starting process')
        #self.process.start(r'C:\ImageScripter_2\python.exe', [r"C:\Users\Automation3\Desktop\test.py"])








    def browse_for_folder_clicked_2(self):
        try:
            self.Main_Script_Folder = eval(Variable_File_Getter.getVariableFromFile('Active_Script_Folder'))[0]
            folder_name = QFileDialog.getExistingDirectory(self, 'Select directory',options = QFileDialog.DontUseNativeDialog,directory=self.Main_Script_Folder)
            if folder_name != '':
                file_name = os.path.basename(folder_name)
                lastDir = os.getcwd()
                os.chdir(Script_Runner_Folders_Folder)
                Dictionary = {'name': file_name,'path': folder_name,'wasSavedChecked':True}
                with open(file_name,'wb') as f:
                    pickle.dump(Dictionary, f)
            self.generate_folder_selection_list()
        except Exception as e:
            print(e)











        #pass
        #destDir = QFileDialog.getExistingDirectory(None,
        #                                                 'Open working directory',
        #                                                 All_Scripts_Folder_Location,
        #                                                 QFileDialog.ShowDirsOnly)





    def delete_controllers_clicked(self):
        try:
           #reply = QMessageBox.question(self, 'Message',
           #                              "Are you sure to delete the selected controller or controllers?", QMessageBox.Yes, QMessageBox.No)
           # if reply == QMessageBox.Yes:
                CurDir = os.getcwd()
                os.chdir(Script_Runner_Controllers_Folder)
                for i in self.List_of_Controller_checkboxes:

                    if i.isChecked() == True:

                        os.remove(i.file_name)

                self.generate_controller_selection_list()
                os.chdir(CurDir)
        except Exception as e:
            import traceback
            error_message = traceback.format_exc()
            print(error_message)
            #print(e)

    def delete_folders_clicked(self):
        try:
            reply = QMessageBox.question(self, 'Message',
                                         "Are you sure to delete the selected folder or folders?", QMessageBox.Yes, QMessageBox.No)
            if reply == QMessageBox.Yes:
                CurDir = os.getcwd()
                os.chdir(Script_Runner_Folders_Folder)
                for i in self.List_of_Folder_checkboxes:
                    if i.isChecked():
                        os.remove(i.file_name)

                self.generate_folder_selection_list()
                os.chdir(CurDir)
        except Exception as e:
            print(e)







    def add_new_controller_clicked(self):
        try:
            self.add_new_controller_window = Add_New_Controller_Widget_Class(self)
        except Exception as e:
            print(e)



    def generate_controller_selection_list(self):
        try:
            os.chdir(Script_Runner_Controllers_Folder)
            self.List_of_Controller_checkboxes = []
            self.List_Of_Controlelrs = os.listdir(Script_Runner_Controllers_Folder)
            for i in reversed(range(self.ui.verticalLayout_11.count())):
                self.ui.verticalLayout_11.itemAt(i).widget().setParent(None)
            for controller in self.List_Of_Controlelrs:
                with open(controller, 'rb') as f:
                    Controller_Dictionary = pickle.load(f)
                    self.checkbox = Controller_Checkbox_Class(Controller_Dictionary)
                    self.checkbox.stateChanged.connect(self.checkbox.wasClicked)
                    self.ui.verticalLayout_11.addWidget(self.checkbox)
                    self.List_of_Controller_checkboxes.append(self.checkbox)
        except Exception as e:
            print(e)


    def generate_folder_selection_list(self):
        try:
            for i in reversed(range(self.ui.verticalLayout_3.count())):
                self.ui.verticalLayout_3.itemAt(i).widget().deleteLater()
            self.List_of_Folder_checkboxes = []
            lastDir = os.getcwd()
            os.chdir(Script_Runner_Folders_Folder)
            self.List_Of_Script_Folders = os.listdir(Script_Runner_Folders_Folder)
            for file_name in self.List_Of_Script_Folders:
                with open(file_name,'rb') as f:
                    Folder_Dictionary = pickle.load(f)
                self.checkbox = Folder_Checkbox_Class(Folder_Dictionary)
                self.checkbox.stateChanged.connect(self.checkbox.wasClicked)
                self.ui.verticalLayout_3.addWidget(self.checkbox)
                self.List_of_Folder_checkboxes.append(self.checkbox)
        except Exception as e:
            print(e)

    def clear_folder(self,folder):
        try:
            print('Clear Folder')
            List_of_files = os.listdir(folder)
            os.chdir(folder)
            for file in List_of_files:
                try:
                    os.remove(file)
                except Exception as e:
                    print(e)
        except Exception as e:
            print(e)









    def refresh_scripts(self):
        try:
            for i in self.List_of_Folder_checkboxes:
                if i.isChecked():
                    ListOfScripts = i.getListOfScripts()
                    dir_location = i.folder_path
                    for script in ListOfScripts:
                        os.chdir(dir_location)
                        full_path = os.path.abspath(script)
                        os.chdir(Script_Runner_Scripts_Folder)
                        name = script.replace('.py','')
                        directory_name = os.path.basename(dir_location)
                        Dictionary = {'directory_name': directory_name,'name': name,'path':full_path,'directory_full_path':dir_location,'wasSavedChecked':True,'script_name':script}
                        File_Name = '[' + directory_name + ']_' + name
                        if not os.path.exists(File_Name):
                            with open(File_Name, 'wb') as f:
                                pickle.dump(Dictionary, f)
            self.populate_script_checklist_based_on_saved_scripts()
        except Exception as e:
            print(e)













    def generate_new_scripts_from_selected_folders(self):
        try:
            self.clear_folder(Script_Runner_Scripts_Folder)
            for i in self.List_of_Folder_checkboxes:
                if i.isChecked():
                    ListOfScripts = i.getListOfScripts()
                    dir_location = i.folder_path
                    for script in ListOfScripts:
                        os.chdir(dir_location)
                        full_path = os.path.abspath(script)
                        os.chdir(Script_Runner_Scripts_Folder)
                        name = script.replace('.py','')
                        directory_name = os.path.basename(dir_location)



                        Dictionary = {'directory_name': directory_name,'name': name,'path':full_path,'directory_full_path':dir_location,'wasSavedChecked':True,'script_name':script}
                        with open('[' + directory_name + ']_' + name, 'wb') as f:
                            pickle.dump(Dictionary, f)
            self.populate_script_checklist_based_on_saved_scripts()
        except Exception as e:
            print(e)

    def populate_script_checklist_based_on_saved_scripts(self):
        try:
            print('populate_script_checklist_based_on_saved_scripts')
            try:
                for i in reversed(range(self.ui.verticalLayout_7.count())):
                    self.ui.verticalLayout_7.itemAt(i).widget().deleteLater()
                self.List_of_script_checkboxes = []
                List_of_file_names = os.listdir(Script_Runner_Scripts_Folder)
                List_of_file_names.sort(key=natural_keys)



                for file_name in List_of_file_names:
                    os.chdir(Script_Runner_Scripts_Folder)
                    with open(file_name, 'rb') as f:
                        #print(file_name)
                        Script_Dictionary = pickle.load(f)
                        self.checkbox = Script_Checkbox_Class(Script_Dictionary)
                        self.checkbox.stateChanged.connect(self.checkbox.wasClicked)
                        self.ui.verticalLayout_7.addWidget(self.checkbox)
                        self.List_of_script_checkboxes.append(self.checkbox)
            except Exception as e:
                print(e)
        except Exception as e:
            print(e)













    def clearLayout(self, layout):
        try:
            if layout is not None:
                while layout.count():
                    item = layout.takeAt(0)
                    widget = item.widget()
                    if widget is not None:
                        widget.deleteLater()
                    else:
                        self.clearLayout(item.layout())
        except Exception as e:
            print(e)


    def generate_play_list(self):
        try:
            list = QListView()
            list.Movement(QListView.Free)
            list.setDragDropMode(QAbstractItemView.InternalMove)
            list.setDefaultDropAction(Qt.MoveAction)
            list.setDragDropOverwriteMode(True)
            list.setAcceptDrops(True)
            list.setDropIndicatorShown(True)
            list.setDragEnabled(True)


            self.model = QStandardItemModel(list)

            for i in self.List_of_script_checkboxes:
                if i.isChecked():
                    item =  QStandardItem(i.script_name)
                    item.setCheckable(False)
                    item.setDragEnabled(True)
                    item.setDropEnabled(False)
                    # Add the item to the model
                    self.model.appendRow(item)
            #self.model.itemChanged.connect(self.on_item_changed)
            list.setModel(self.model)
            self.ui.scrollArea_4.setWidget(list)
        except Exception as e:
            print(e)



if __name__ == '__main__':
        def exception_hook(exctype, value, traceback):
            print(exctype, value, traceback)
            sys._excepthook(exctype, value, traceback)
            sys.exit(1)

        Start_Radio_is_checked = False
        try:
            with open(run_on_start_radio_button_file_state_location, 'r') as f:
                Start_Radio_is_checked = eval(f.read())
        except Exception as e:
            print(e)
            with open(run_on_start_radio_button_file_state_location, 'w') as f:
                f.write('False')
                Start_Radio_is_checked = False

        app = QApplication(sys.argv)
        ex = Script_Runner_Gui_Class(Start_Radio_is_checked)
        sys._excepthook = sys.excepthook
        sys.exit(app.exec_())

        '''
        try:
            Run_On_Start = eval(sys.argv[1])
            if Run_On_Start == True:
                if Start_Radio_is_checked == True:
                    Run_On_Start = True
        except:
            Run_On_Start = False
        ex = Script_Runner_Gui_Class(Run_On_Start)
        sys._excepthook = sys.excepthook
        def exception_hook(exctype, value, traceback):
            print(exctype, value, traceback)
            sys._excepthook(exctype, value, traceback)
            sys.exit(1)
        sys.excepthook = exception_hook
        sys.exit(app.exec_())
        '''



