from elan.importer import *
from elan.Custom_Applications import *
from elan.Init_AutoComplete import *
Header = """
from imagescripter.core.device import Device_Class
from imagescripter.core.image import Image_Class
class FakeDevice(Device_Class):
    def __init__(self):
        pass
class FakeImage(Image_Class):
    def __init__(self):
        pass
"""
AutoCompleteFile = open("C:\ImageScripter_2\Lib\site-packages\elan\Init_AutoComplete.py",'w')
AutoCompleteFile.write(Header)

Pickle_application_Object_File_Location = r"C:\ImageScripter_2\Lib\site-packages\imagescripter\data\deviceApplicationObject"
# Applications
Devices_Folder_Location = r"C:\ImageScripter_2\Lib\site-packages\elan\Applications_And_Devices"
List_of_Devices = os.listdir(Devices_Folder_Location)
#print(List_of_Devices)

List_of_commands = []
for app_string_name in List_of_Devices:
    #print(app_string_name)

    os.chdir(Devices_Folder_Location + '\\' + app_string_name)
    # list_of_tags = None, ip_address = None, port = None, user_name = None, password = None
    class_name = get_data_from_file("class_name.txt")
    ip_address = get_data_from_file("ip_address.txt")
    list_of_tags = get_data_from_file("list_of_tags.txt")
    password = get_data_from_file("password.txt")
    port = get_data_from_file("port.txt")
    user_name = get_data_from_file("user_name.txt")
    command = '#app_name# = #class_name#(#list_of_tags#,"#ip_address#","#port#","#user_name#","#password#")'
    command = command.replace('#app_name#', app_string_name)
    command = command.replace('#class_name#', class_name)
    command = command.replace('#list_of_tags#', list_of_tags)
    command = command.replace('#ip_address#', ip_address)
    command = command.replace('#port#', port)
    command = command.replace('#user_name#', user_name)
    command = command.replace('#password#', password)
    #print("$")
    #print(command)
    #print("$")
    exec(command)
    AutoCompleteFile.write(app_string_name + ' = FakeDevice()\n')
    #Configurator = FakeDevice()


    List_of_commands.append(command)

    deviceApplicationObject = eval(app_string_name)

    pickling_on = open(Pickle_application_Object_File_Location, "wb")
    pickle.dump(deviceApplicationObject, pickling_on)
    pickling_on.close()


    #######IMAGES
    for image_name_with_png in os.listdir():
        if image_name_with_png.endswith('.png'):
            path_of_image = os.path.abspath(image_name_with_png)
            image_name_string = image_name_with_png.replace('.png','')
            #print(image_name_string)
            if ',' in image_name_string:
                List = image_name_string.split(',')
                #print(List)
                image_name_string = List[0]
                threshold = List[1]
            else:
                pass

            #print(image_name_string)

            oldcommand = 'Interface.media = Image_Class(path_of_image, Interface, .96)'
            command = '#app_name#.#image_name_string# = Image_Class(r"#path_of_image#",r"#deviceApplicationObjectPickleLocation#", .96)'
            command = command.replace("#app_name#", app_string_name)
            command = command.replace("#image_name_string#", image_name_string)
            command = command.replace("#path_of_image#", path_of_image)
            command = command.replace("#deviceApplicationObjectPickleLocation#", Pickle_application_Object_File_Location)
            exec(command)
            AutoCompleteFile.write(app_string_name + '.' + image_name_string + ' = FakeImage()\n')



AutoCompleteFile.close()
############################################################################################################################################

if __name__ == "__main__":


    Configurator.media.Click()
    #Android.media.Click()
    #Viewer.guide.Click()
    #Mac.media.Click()
    #Configurator.security.Click()
    #Configurator.climate.Click()
    #Configurator.media.Click()
    #Configurator.zwavetab.Click()