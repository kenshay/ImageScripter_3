from elan import ElanSettings
from elan import *
from ImageScripter import *

import os
print('fffff')
import telnetlib


PanamaxIP = "192.168.0.199"
Interface_Outlet = 5

def PowerOn(x):
    x = str(x)
    string = "!SWITCH " +  x + " ON"
    tn = telnetlib.Telnet(PanamaxIP, 23)
    user = ""
    tn.write(string.encode('ascii') + "\r\n".encode('ascii'))
    tn.close()
    print('cloased')



def PowerOff(x):
    x = str(x)
    string = "!SWITCH " +  x + " OFF"
    tn = telnetlib.Telnet(PanamaxIP, 23)
    user = ""
    tn.write(string.encode('ascii') + "\r\n".encode('ascii'))
    tn.close()
    print('Powered OFF')
    
#Viewer.Start()
#Viewer.CloseAndClean()
#Configurator.Reset()   

if not os.path.exists(ElanSettings.adb_location):
    print('You need to set the adb location in Elan settings')
else:
    os.chdir(ElanSettings.adb_location)
    os.system("adb start-server")
    
    PowerOff(Interface_Outlet)
    sleep(10)
    PowerOn(Interface_Outlet)
    
    #os.system("adb reboot")    
    
for i in range(500):
    try:
        if Android.away.Exists():
            os.system("adb shell settings put global stay_on_while_plugged_in 3")
            break
        elif Android.attentionpassword.Exists():
            os.system("adb shell settings put global stay_on_while_plugged_in 3")
            break
        else:
            print("Waiting for Android 3..")
            PowerOff(Interface_Outlet)
            sleep(10)
            PowerOn(Interface_Outlet)
            sleep(60)
            os.system("adb shell settings put global stay_on_while_plugged_in 3")
            
    except Exception as e:
        print("Exception -> " + str(e))
        print("Waiting for Android 4..")
        PowerOff(Interface_Outlet)
        sleep(10)
        PowerOn(Interface_Outlet)
        sleep(60)
        os.system("adb shell settings put global stay_on_while_plugged_in 3")
       

'''


import sys
from PyQt4 import QtGui, QtCore, uic
import telnetlib
import paramiko
from getpass import getpass
import time
import ctypes
user32 = ctypes.windll.user32
import os
bool = False
import subprocess

import threading



############################

PanamaxIP = "192.168.1.55"



ip = "192.168.1.177"
username = 'ken'
password = 'shayshay'
remote_conn_pre=paramiko.SSHClient()
remote_conn_pre2=paramiko.SSHClient()
remote_conn_pre.set_missing_host_key_policy(paramiko.AutoAddPolicy())
remote_conn_pre2.set_missing_host_key_policy(paramiko.AutoAddPolicy())
remote_conn_pre.connect(ip, port=22, username=username,
password=password,
look_for_keys=False, allow_agent=False)
remote_conn_pre2.connect(ip, port=22, username=username,
password=password,
look_for_keys=False, allow_agent=False)
remote_conn = remote_conn_pre.invoke_shell()
remote_conn2 = remote_conn_pre2.invoke_shell()
output = remote_conn.recv(0)




def PowerOffAll():
    tn = telnetlib.Telnet(PanamaxIP, 23)
    user = ""
    tn.write("!ALL_OFF".encode('ascii') + "\r\n".encode('ascii'))
    tn.close()
    print('cloased')


def PowerOnAll():
    tn = telnetlib.Telnet(PanamaxIP, 23)
    user = ""
    tn.write("!ALL_ON".encode('ascii') + "\r\n".encode('ascii'))
    tn.close()
    print('cloased')


def PowerOn(x):
    x = str(x)
    string = "!SWITCH " +  x + " ON"
    tn = telnetlib.Telnet(PanamaxIP, 23)
    user = ""
    tn.write(string.encode('ascii') + "\r\n".encode('ascii'))
    tn.close()
    print('cloased')



def PowerOff(x):
    x = str(x)
    string = "!SWITCH " +  x + " OFF"
    tn = telnetlib.Telnet(PanamaxIP, 23)
    user = ""
    tn.write(string.encode('ascii') + "\r\n".encode('ascii'))
    tn.close()
    print('cloased')


def Ping(ip):
    all_hosts = [ip]
    info = subprocess.STARTUPINFO()
    info.dwFlags |= subprocess.STARTF_USESHOWWINDOW
    info.wShowWindow = subprocess.SW_HIDE

    for i in range(len(all_hosts)):
        output = subprocess.Popen(['ping', '-n', '1', '-w', '500', str(all_hosts[i])], stdout=subprocess.PIPE,startupinfo=info).communicate()[0]
        if "Destination host unreachable" in output.decode('utf-8'):
            return False
        elif "Request timed out" in output.decode('utf-8'):
            return False
        else:
            print(str(all_hosts[i]), "is Online")
            return True

def NoShutDown(port):

    port = str(port)

    remote_conn.send("\n")

    remote_conn.send("enable\n")

    remote_conn.send("ken\n")

    remote_conn.send("shayshay\n")

    remote_conn.send("conf t\n")

    string = "interface fastethernet 0/" + port + "\n"
    remote_conn.send(string)

    remote_conn.send("no shutdown\n")

    remote_conn.send("end\n")

    remote_conn.send("\n")
    remote_conn.send("disable\n")
    output = remote_conn.recv(999999999999999)
    output = str(output)
    output = output.split('Switch')
    for i in output:
        print(i)



def ShutDown(port):

    port = str(port)

    remote_conn.send("\n")

    remote_conn.send("enable\n")

    remote_conn.send("ken\n")

    remote_conn.send("shayshay\n")

    remote_conn.send("conf t\n")

    string = "interface fastethernet 0/" + port + "\n"
    remote_conn.send(string)

    remote_conn.send("shutdown\n")

    remote_conn.send("end\n")

    remote_conn.send("\n")
    remote_conn.send("disable\n")
    output = remote_conn.recv(999999999999999)
    output = str(output)
    output = output.split('Switch')
    for i in output:
        print(i)






def find_between( s, first, last ):
    try:
        start = s.index( first ) + len( first )
        end = s.index( last, start )
        return s[start:end]
    except ValueError:
        return ""

def find_between_r( s, first, last ):
    try:
        start = s.rindex( first ) + len( first )
        end = s.rindex( last, start )
        return s[start:end]
    except ValueError:
        return ""

def GetInterfaces():
    remote_conn2.send("\n")
    remote_conn2.send("enable\n")
    remote_conn2.send("show ip int brief")
    remote_conn2.send("\n")
    output = remote_conn2.recv(999999999999999)
    output = str(output)
    return output


def GetInterfaceStatus():
    remote_conn2.send("\n")
    remote_conn2.send("disable\n")
    remote_conn2.send("\n")

    remote_conn2.send("enable\n")
    remote_conn2.send("ken\n")
    remote_conn2.send("shayshay\n")
    remote_conn2.send("show interfaces status | include Fa\n\n")
    remote_conn2.send("end\n")
    remote_conn2.send("disable\n")
    output = remote_conn2.recv(999999999999999)
    #output = str(output)
    output = output.split()
    #print(output)
    list = []
    if output != None:
        for x in output:
            if x == b'connected':
                list.append('connected')
            if x == b'notconnect':
                list.append('notconnect')
            if x == b'disabled':
                list.append('disabled')

        return list[0:25]










class statusThread(QtCore.QThread):
    def __init__(self,widget):
        QtCore.QThread.__init__(self)
        self.widget = widget
        self.secondlastlist = []
    def run(self):
        while True:
            self.list = GetInterfaceStatus()
            if self.list != []:
                if self.list != self.secondlastlist:
                    with open('C:\Switch\Memory\colors.txt','w') as f:
                        for x in self.list:
                            f.write(x + ',')
                    self.secondlastlist = self.list







class TestApp(QtGui.QMainWindow):
    def __init__(self):
        QtGui.QMainWindow.__init__(self)
        self.ui = uic.loadUi("C:\Switch\main.ui")
        self.ui.pushButton_1.clicked.connect(self.pushButtonClicked_1)
        self.ui.pushButton_2.clicked.connect(self.pushButtonClicked_2)
        self.ui.pushButton_3.clicked.connect(self.pushButtonClicked_3)
        self.ui.pushButton_4.clicked.connect(self.pushButtonClicked_4)
        self.ui.pushButton_5.clicked.connect(self.pushButtonClicked_5)
        self.ui.pushButton_6.clicked.connect(self.pushButtonClicked_6)
        self.ui.pushButton_7.clicked.connect(self.pushButtonClicked_7)
        self.ui.pushButton_8.clicked.connect(self.pushButtonClicked_8)
        self.ui.pushButton_9.clicked.connect(self.pushButtonClicked_9)
        self.ui.pushButton_10.clicked.connect(self.pushButtonClicked_10)
        self.ui.pushButton_11.clicked.connect(self.pushButtonClicked_11)
        self.ui.pushButton_12.clicked.connect(self.pushButtonClicked_12)
        self.ui.pushButton_13.clicked.connect(self.pushButtonClicked_13)
        self.ui.pushButton_14.clicked.connect(self.pushButtonClicked_14)
        self.ui.pushButton_15.clicked.connect(self.pushButtonClicked_15)
        self.ui.pushButton_16.clicked.connect(self.pushButtonClicked_16)
        self.ui.pushButton_17.clicked.connect(self.pushButtonClicked_17)
        self.ui.pushButton_18.clicked.connect(self.pushButtonClicked_18)
        self.ui.pushButton_19.clicked.connect(self.pushButtonClicked_19)
        self.ui.pushButton_20.clicked.connect(self.pushButtonClicked_20)
        self.ui.pushButton_21.clicked.connect(self.pushButtonClicked_21)
        self.ui.pushButton_22.clicked.connect(self.pushButtonClicked_22)
        self.ui.pushButton_23.clicked.connect(self.pushButtonClicked_23)
        self.ui.pushButton_24.clicked.connect(self.pushButtonClicked_24)
        self.ui.pushButton_25.clicked.connect(self.pushButtonClicked_25)
        self.ui.pushButton_26.clicked.connect(self.pushButtonClicked_26)
        self.ui.pushButton_26.clicked.connect(self.pushButtonClicked_27)
        self.ui.PowerButton_1.clicked.connect(self.powerButtonClicked_1)
        self.ui.PowerButton_2.clicked.connect(self.powerButtonClicked_2)
        self.ui.PowerButton_3.clicked.connect(self.powerButtonClicked_3)
        self.ui.PowerButton_4.clicked.connect(self.powerButtonClicked_4)
        self.ui.PowerButton_5.clicked.connect(self.powerButtonClicked_5)
        self.ui.PowerButton_6.clicked.connect(self.powerButtonClicked_6)
        self.ui.PowerButton_7.clicked.connect(self.powerButtonClicked_7)
        self.ui.PowerButton_8.clicked.connect(self.powerButtonClicked_8)
        self.ui.PowerButton_9.clicked.connect(self.powerButtonClicked_9)
        self.initWatcher()
        self.fs_watcher.directoryChanged.connect(self.directory_changed)
        self.fs_watcher.fileChanged.connect(self.file_changed)
        self.ui.show()
        self.startPings()
        self.last = []

    def initWatcher(self):
            paths = [
                "C:\Switch\Memory",
                "C:\Switch\Memory\colors.txt"

            ]
            self.fs_watcher = QtCore.QFileSystemWatcher(paths)

    def directory_changed(self):
        print("directory_changed")
    def file_changed(self):
        with open("C:\Switch\Memory\colors.txt") as f:

            lines = f.read().splitlines()
            lines = str(lines)
            lines = lines.split(',')
            print(lines)
            if self.last != lines:
                index = 0

                for x in lines:
                    try:
                        x = x.replace(",","")
                        if x == "connected":
                            self.ButtonList[index].setStyleSheet("background-color: green")
                        if x == "notconnect":
                            self.ButtonList[index].setStyleSheet("background-color: yellow")
                        if x == "disabled":
                            self.ButtonList[index].setStyleSheet("background-color: red")
                        print(index)
                        index += 1
                    except:
                        print(index)

            self.last = lines








    def startPings(self):
        self.ButtonList = [self.ui.pushButton_1,self.ui.pushButton_2,self.ui.pushButton_3,self.ui.pushButton_4,self.ui.pushButton_5,self.ui.pushButton_6,self.ui.pushButton_7,self.ui.pushButton_8,self.ui.pushButton_9,self.ui.pushButton_10,self.ui.pushButton_11,self.ui.pushButton_12,self.ui.pushButton_13,self.ui.pushButton_14,self.ui.pushButton_15,self.ui.pushButton_16,self.ui.pushButton_17,self.ui.pushButton_18,self.ui.pushButton_19,self.ui.pushButton_20,self.ui.pushButton_21,self.ui.pushButton_22,self.ui.pushButton_23,self.ui.pushButton_24]
        self.statusThread = statusThread(self)
        self.statusThread.start()



    def refreshButtonClicked(self):
        GetInterfaces()



    def pushButtonClicked_1(self,bool):
       if bool == True:
           NoShutDown(1)
       if bool == False:
           ShutDown(1)


    def pushButtonClicked_2(self, bool):
        if bool == True:
            NoShutDown(2)
        if bool == False:
            ShutDown(2)


    def pushButtonClicked_3(self, bool):
        if bool == True:
            NoShutDown(3)
        if bool == False:
            ShutDown(3)


    def pushButtonClicked_4(self, bool):
        if bool == True:
            NoShutDown(4)
        if bool == False:
            ShutDown(4)


    def pushButtonClicked_5(self, bool):
        if bool == True:
            NoShutDown(5)
        if bool == False:
            ShutDown(5)


    def pushButtonClicked_6(self, bool):
        if bool == True:
            NoShutDown(6)
        if bool == False:
            ShutDown(6)


    def pushButtonClicked_7(self, bool):
        if bool == True:
            NoShutDown(7)
        if bool == False:
            ShutDown(7)


    def pushButtonClicked_8(self, bool):
        if bool == True:
            NoShutDown(8)
        if bool == False:
            ShutDown(8)


    def pushButtonClicked_9(self, bool):
        if bool == True:
            NoShutDown(9)
        if bool == False:
            ShutDown(9)


    def pushButtonClicked_10(self, bool):
        if bool == True:
            NoShutDown(10)
        if bool == False:
            ShutDown(10)


    def pushButtonClicked_11(self, bool):
        if bool == True:
            NoShutDown(11)
        if bool == False:
            ShutDown(11)


    def pushButtonClicked_12(self, bool):
        if bool == True:
            NoShutDown(12)
        if bool == False:
            ShutDown(12)


    def pushButtonClicked_13(self, bool):
        if bool == True:
            NoShutDown(13)
        if bool == False:
            ShutDown(13)


    def pushButtonClicked_14(self, bool):
        if bool == True:
            NoShutDown(14)
        if bool == False:
            ShutDown(14)


    def pushButtonClicked_15(self, bool):
        if bool == True:
            NoShutDown(15)
        if bool == False:
            ShutDown(15)


    def pushButtonClicked_16(self, bool):
        if bool == True:
            NoShutDown(16)
        if bool == False:
            ShutDown(16)


    def pushButtonClicked_17(self, bool):
        if bool == True:
            NoShutDown(17)
        if bool == False:
            ShutDown(17)


    def pushButtonClicked_18(self, bool):
        if bool == True:
            NoShutDown(18)
        if bool == False:
            ShutDown(18)


    def pushButtonClicked_19(self, bool):
        if bool == True:
            NoShutDown(19)
        if bool == False:
            ShutDown(19)


    def pushButtonClicked_20(self, bool):
        if bool == True:
            NoShutDown(20)
        if bool == False:
            ShutDown(20)


    def pushButtonClicked_21(self, bool):
        if bool == True:
            NoShutDown(21)
        if bool == False:
            ShutDown(21)


    def pushButtonClicked_22(self, bool):
        if bool == True:
            NoShutDown(22)
        if bool == False:
            ShutDown(22)


    def pushButtonClicked_23(self, bool):
        if bool == True:
            NoShutDown(23)
        if bool == False:
            ShutDown(23)


    def pushButtonClicked_24(self, bool):
        if bool == True:
            NoShutDown(24)
        if bool == False:
            ShutDown(24)

    def pushButtonClicked_25(self):
        os.system('"C:/Switch/Programs/HLCONFIG.exe"')

    def pushButtonClicked_26(self):
        os.system('"C:/Switch/Programs/g!Tools.exe"')

    def pushButtonClicked_27(self):
        os.system('"C:/Switch/Programs/g!Tools.exe"')




    def powerButtonClicked_1(self, bool):
            if bool == True:
                PowerOn(1)
            if bool == False:
                PowerOff(1)


    def powerButtonClicked_2(self, bool):
        if bool == True:
            PowerOn(2)
        if bool == False:
            PowerOff(2)


    def powerButtonClicked_3(self, bool):
        if bool == True:
            PowerOn(3)
        if bool == False:
            PowerOff(3)


    def powerButtonClicked_4(self, bool):
        if bool == True:
            PowerOn(4)
        if bool == False:
            PowerOff(4)


    def powerButtonClicked_5(self, bool):
        if bool == True:
            PowerOn(5)
        if bool == False:
            PowerOff(5)


    def powerButtonClicked_6(self, bool):
        if bool == True:
            PowerOn(6)
        if bool == False:
            PowerOff(6)


    def powerButtonClicked_7(self, bool):
        if bool == True:
            PowerOn(7)
        if bool == False:
            PowerOff(7)


    def powerButtonClicked_8(self, bool):
        if bool == True:
            PowerOn(8)
        if bool == False:
            PowerOff(8)


    def powerButtonClicked_9(self, bool):
        if bool == True:
            PowerOn(9)
        if bool == False:
            PowerOff(9)



if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    win = TestApp()
    sys.exit(app.exec_())

'''

