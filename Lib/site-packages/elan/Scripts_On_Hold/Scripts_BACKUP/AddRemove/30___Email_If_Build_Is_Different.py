

import csv
import filecmp
import os
import shutil
from paths import *
#Done2

recipients = ["kennyshay123@gmail.com",
          "ben.bickell@corebrands.com",
          "anthony.nelson@nortekcontrol.com",
          "elantestertools@gmail.com",
          "ken.shay@corebrands.com"]

'''
recipients = ["kennyshay123@gmail.com",
          "ben.bickell@corebrands.com",
          "elantestertools@gmail.com",
          "ken.shay@corebrands.com"]

recipients = ["kennyshay123@gmail.com",
          "elantestertools@gmail.com",
          "ken.shay@corebrands.com"]
'''

#recipients = ["kennyshay123@gmail.com","elantestertools@gmail.com","ken.shay@corebrands.com"]

def get_size(start_path = '.'):
    total_size = 0
    for dirpath, dirnames, filenames in os.walk(start_path):
        for f in filenames:
            fp = os.path.join(dirpath, f)
            total_size += os.path.getsize(fp)
    return total_size


def Send_Email():
    import smtplib
    import os
    gmail_user = "kennyshay123test@gmail.com"
    gmail_password = "corebrands123"
    sent_from = "kennyshay123test@gmail.com"
    to = recipients
    subject = 'Difference In Builds'
    compname = str(os.environ['COMPUTERNAME'])

    ##Outputoutputtxt = r"C:\Output\output.txt"

    output_file = open(Outputoutputtxt,'r')
    text = output_file.read()
    output_file.close()
    body = text
    try:
        server = smtplib.SMTP_SSL('smtp.gmail.com', 465)
        server.ehlo()
        server.login(gmail_user, gmail_password)
        server.sendmail(sent_from, to, body)
        server.close()

        print('Email sent!')
    except Exception as e:
        print(str(e))
        print('Something went wrong...')















def compare(folder1, folder2, output,Build_Name,output_txt=False, output_csv=False):
    """Compare contents of two folders and write a report of the results."""

    report = _recursive_dircmp(folder1, folder2)

    # Make filepath names for output OS-agnostic
    folder1 = folder1.replace('\\', '/')
    folder2 = folder2.replace('\\', '/')
    os.chdir(output)
    if output_txt:
        _write_to_plain_text(folder1, folder2, output, report,Build_Name)

    if output_csv:
        _write_to_csv(folder1, folder2, output, report)
def _recursive_dircmp(folder1, folder2, prefix='.'):
    """Return a recursive dircmp comparison report as a dictionary."""

    comparison = filecmp.dircmp(folder1, folder2)

    data = {
        'left': [r'{}/{}'.format(prefix, i) for i in comparison.left_only],
        'right': [r'{}/{}'.format(prefix, i) for i in comparison.right_only],
        'both': [r'{}/{}'.format(prefix, i) for i in comparison.common_files],
    }

    for datalist in data.values():
        datalist.sort()

    if comparison.common_dirs:
        for folder in comparison.common_dirs:
            # Update prefix to include new sub_folder
            prefix += '/' + folder

            # Compare common folder and add results to the report
            sub_folder1 = os.path.join(folder1, folder)
            sub_folder2 = os.path.join(folder2, folder)
            sub_report = _recursive_dircmp(sub_folder1, sub_folder2, prefix)

            # Add results from sub_report to main report
            for key, value in sub_report.items():
                data[key] += value

    return data
def _write_to_plain_text(folder1, folder2, output, report,Build_Name):
    """Write the comparison report to a plain text file."""

    ##Outputoutputtxt11 = 'C:\Output\output' + '.txt'
    filename = Outputoutputtxt11
    with open(filename, 'w') as file:
        file.write('COMPARISON OF FILES BETWEEN FOLDERS:\n')
        file.write('\tFOLDER 1: {}\n'.format(folder1))
        file.write('\tFOLDER 2: {}\n'.format(folder2))
        file.write('\n\n')

        file.write('FILES ONLY IN: {' + Build_Name + '}\n')
        #file.write('FILES ONLY IN: {}\n'.format(folder1))
        for item in report['left']:
            file.write('\t' + item + '\n')
        if not report['left']:
            file.write('\tNone\n')
        file.write('\n\n')

        file.write('FILES ONLY IN: {}\n'.format(folder2))
        for item in report['right']:
            file.write('\t' + item + '\n')
        if not report['right']:
            file.write('\tNone\n')
        file.write('\n\n')


        '''
        file.write('FILES IN BOTH FOLDERS:\n')
        for item in report['both']:
            file.write('\t' + item + '\n')
        if not report['both']:
            file.write('\tNone\n')
        '''
def _write_to_csv(folder1, folder2, output, report):
    """Write the comparison report to a CSV file for use in Excel."""

    ##COutputoutputcsv = r'C:\Output\output' + '.csv'


    filename = COutputoutputcsv
    #filename = output + '.csv'
    with open(filename, 'w') as file:
        csv_writer = csv.writer(file, dialect='excel', lineterminator='\r')

        # Write header data to the first row
        headers = (
            "Files only in folder '{}'".format(folder1),
            "Files only in folder '{}'".format(folder2),
            "Files in both folders",
        )
        csv_writer.writerow(headers)

        # Order report data to match with headers
        data = (
            report['left'],
            report['right'],
            report['both'],
        )

        # Write comparison data row by row to the CSV
        row_index = 0
        row_max = max(len(column) for column in data)
        while row_index < row_max:
            values = []
            for column in data:
                # Use data from column if it exists, otherwise use None
                try:
                    values += [column[row_index]]
                except IndexError:
                    values += [None]

            csv_writer.writerow(values)
            row_index += 1

print('Doing Compare')


##C123123Output = r"C:\Output"


shutil.rmtree(C123123Output, ignore_errors=True)
os.makedirs(C123123Output)

##COld_Build = r"C:\Old_Build"

if not os.path.exists(COld_Build):
    os.makedirs(COld_Build)

#################################################CLEAN UP

##rCNew_Build = r"C:\New_Build"


shutil.rmtree(rCNew_Build, ignore_errors=True)





###############################################  ZIP
def Get_Full_Path_OF_Build():



    #Build_Folder = r"C:\Elan_Tools\Cloud_Drive\Elan_Builds"
    ##Build_Folder = r"\\172.16.43.21\nas\Cloud_Drive\Elan_Builds"
    Build_Name = os.listdir(Build_Folder)[0]
    os.chdir(Build_Folder)
    Build_Full_Path = os.path.abspath(Build_Name)
    print(Build_Full_Path)
    return Build_Full_Path,Build_Name
from time import sleep
for i in range(1000):
    try:
        Build_Full_Path,Build_Name= Get_Full_Path_OF_Build()
        break
    except Exception as e:
        print(e)
        print('sleep 213')
        sleep(1)
        
        
print("Build Name -> " + Build_Name)

##CProgramFiles7Zip = r"C:\Program Files\7-Zip"


##ocNew_Buildry = " -oc:\\New_Build -r -y"


os.chdir(CProgramFiles7Zip)
os.system("7z x " + Build_Full_Path + ocNew_Buildry)


print('Doing Compare')
#######################################Comparison



##folder1 = r"C:\New_Build"
folder1 = rCNew_Build


##folder2 = r"C:\Old_Build"
folder2 = COld_Build

##outputrC = r"C:\\"

output = outputrC
##############################################Size

folder_1_size = get_size(folder1)
folder_2_size = get_size(folder2)
print("#########")
print("Size")
print(folder_1_size)
print(folder_2_size)
print("#########")

if folder_1_size != folder_2_size:
    compare(folder1, folder2, output,Build_Name, output_txt=True, output_csv=True)
    ##############################################Clean up
    #################################################CLEAN UP
    ##shutil.rmtree(r"C:\Old_Build", ignore_errors=True)
    shutil.rmtree(COld_Build, ignore_errors=True)
    ##os.rename(r"C:\New_Build", r"C:\Old_Build")
    os.rename(rCNew_Build,COld_Build)
    Send_Email()
else:
    pass
    
    #compare(folder1, folder2, output,Build_Name, output_txt=True, output_csv=True)
    ##############################################Clean up
    #################################################CLEAN UP
    #shutil.rmtree(r"C:\Old_Build", ignore_errors=True)
    #os.rename(r"C:\New_Build", r"C:\Old_Build")
    #Send_Email()
  
  

print('Finished')