# -*- coding: utf-8 -*-
import paramiko
from scp import SCPClient
from datetime import datetime
import time
import io
from elan import *
from imagescripter.core.variable_file_getter import Variable_File_Getter
import time
destination_File2 = r"C:\Elan_Tools\Data\Build_Raw_File.txt"
destination_File3 = r"C:\Elan_Tools\Data\Name_Raw_File.txt"
def getTime():
    now = datetime.now()
    return now.strftime("%c")
def get_day_of_week():
    datet = getTime()
    List = datet.split(' ')
    return List[0]
def get_month_and_day():
    datet = getTime()
    List = datet.split(' ')
    return List[1] + ' ' + List[2]
def get_time_of_day():
    datet = getTime()
    List = datet.split(' ')
    return List[3]
def get_year():
    datet = getTime()
    List = datet.split(' ')
    return List[4]
def get_index_time():
    return time.time()
class SSH_Manager_Class():
    def __init__(self,ipaddress,port,username,password):
        self.ipadress = ipaddress
        self.port = port
        self.username = username
        self.password = password
    def Delete_Ir_Files(self):
        print('Deleting Sony')
        for i in range(1):
            try:
                #print('get_percent_of_memory_In_Use')
                nbytes = 4096
                command = """rm -r /ELAN/DRIVERS/EIRX/Sony"""
                def createSSHClient():
                    client = paramiko.SSHClient()
                    #client.load_system_host_keys()
                    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                    client.connect(self.ipadress, self.port, self.username, self.password)
                    return client
                client = paramiko.Transport((self.ipadress, self.port))
                client.connect(username=self.username, password=self.password)
                stdout_data = []
                stderr_data = []
                session = client.open_channel(kind='session')
                session.exec_command(command)
                while True:
                    if session.recv_ready():
                        data = session.recv(nbytes)
                        stdout_data.append(data)
                        print(data)
                    if session.recv_stderr_ready():
                        dataer = session.recv_stderr(nbytes)
                        stderr_data.append(dataer)
                        try:
                            session.close()
                            client.close()
                        except:
                            pass
                        print(dataer)
                        raise ValueError(dataer)
                    if session.exit_status_ready():
                        break
                session.close()
                client.close()
                string = str(stdout_data[0])
                break
            except IndexError:
                pass
    def Delete_Manifest_File(self):
        print('Deleting Sony')
        for i in range(1):
            try:
                #print('get_percent_of_memory_In_Use')
                nbytes = 4096
                command = """rm -r /ELAN/DRIVERS/EIRX/manifest_ext.dat"""
                def createSSHClient():
                    client = paramiko.SSHClient()
                    #client.load_system_host_keys()
                    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                    client.connect(self.ipadress, self.port, self.username, self.password)
                    return client
                client = paramiko.Transport((self.ipadress, self.port))
                client.connect(username=self.username, password=self.password)
                stdout_data = []
                stderr_data = []
                session = client.open_channel(kind='session')
                session.exec_command(command)
                while True:
                    if session.recv_ready():
                        data = session.recv(nbytes)
                        stdout_data.append(data)
                        print(data)
                    if session.recv_stderr_ready():
                        dataer = session.recv_stderr(nbytes)
                        stderr_data.append(dataer)
                        try:
                            session.close()
                            client.close()
                        except:
                            pass
                        print(dataer)
                        raise ValueError(dataer)
                    if session.exit_status_ready():
                        break
                session.close()
                client.close()
                string = str(stdout_data[0])
                break
            except IndexError:
                pass
    def get_manifest(self):
        print('Getting Controller Build')
        def createSSHClient():
            client = paramiko.SSHClient()
            #client.load_system_host_keys()
            client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            client.connect(self.ipadress, self.port, self.username, self.password)
            return client
        ssh = createSSHClient()
        scp = SCPClient(ssh.get_transport())
        scp.get('/ELAN/DRIVERS/EIRX/manifest_ext.dat', destination_File2)
        junk_list = []
        with io.open(destination_File2, 'r', encoding='cp1252', errors='ignore') as f:
            for line in f:
                junk_list.append(line)
        whole_string = junk_list[0]
        return whole_string
    def get_Controller_Name(self):
        print('Getting Controller Name')
        def createSSHClient():
            client = paramiko.SSHClient()
            #client.load_system_host_keys()
            client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            client.connect(self.ipadress, self.port, self.username, self.password)
            return client
        ssh = createSSHClient()
        scp = SCPClient(ssh.get_transport())
        scp.get('/ELAN/CONFIG/SECURE.DAT', destination_File3)
        junk_list = []
        with io.open(destination_File3, 'r', encoding='cp1252', errors='ignore') as f:
            for line in f:
                junk_list.append(line)
        whole_string = junk_list[0]
        whole_string = str(whole_string.encode('utf-8'))
        List = whole_string.split('SC')
        print(List)
        Build = 'SC' + List[1]
        Build = str(Build)
        print(type(Build))
        print(Build)
        return Build
ip_address = Variable_File_Getter.getVariableFromFile('Controller_IP')
port = int(Variable_File_Getter.getVariableFromFile('Elan_Controller_Port'))
user = Variable_File_Getter.getVariableFromFile('Elan_Controller_User_Name')
password = Variable_File_Getter.getVariableFromFile('Elan_Controller_Password')
SSH_Manager = SSH_Manager_Class(ipaddress=ip_address, port=port, username=user, password=password)
Configurator.Start()
try:
    SSH_Manager.Delete_Ir_Files()
    SSH_Manager.Delete_Manifest_File()
except Exception as e:
    print(e)
    raise ValueError('Ir Database might be down!')
Configurator.RestartHard()
Configurator.Start()
Configurator.media.Click()
Configurator.interfacetemplates.Click()
Sleep(3)
Configurator.reloadirdatabase.Click()
Sleep(3)
HlConfig.PushButton.Click('OK')
Sleep(50)
Pass = False
for i in range(100):
    try:
        manifest = SSH_Manager.get_manifest()
        Pass = True
        break
    except:
        time.sleep(2)
if Pass == False:
    raise ValueError('Ir Database might be down!')
print('Script Passed')
Configurator.CloseAndClean()