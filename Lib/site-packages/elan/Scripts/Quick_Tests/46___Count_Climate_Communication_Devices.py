
from elan.functions import Get_Device_List_Simple,Diff
from elan import *
#Finished 3/6/19
#DONE
Start_Image_Show()
#Past_List = ['Aprilaire RS485 Network', 'Carrier CZII System', 'Carrier Infinity System', 'Cool Master IP', 'Cool Master RS232', 'Ecobee', 'Generic MODBUS', 'Generic Serial', 'HAI Stand-Alone Thermostat Network', 'Heatmiser', 'Heatmiser neoHub', 'Honeywell Lyric Interface', 'Leviton Z-Wave RS232 Network', 'MiOS Z-Wave Network', 'Nest Interface', 'RCS Thermostat Network', 'Standard Connection', 'Tapko SIM-KNX', 'Tekmar RS232 Network', 'Virtual HVAC Network']
#Past_List = ['Aprilaire RS485 Network', 'Carrier CZII System', 'Carrier Infinity System', 'Cool Master IP', 'Cool Master RS232', 'Ecobee', '1.0.21', 'Generic MODBUS', 'Generic Serial', 'HAI Stand-Alone Thermostat Network', 'Heatmiser', 'Heatmiser neoHub', '1.0.12', 'Honeywell Lyric Interface', 'Leviton Z-Wave RS232 Network', 'MiOS Z-Wave Network', 'Nest Interface', 'RCS Thermostat Network', 'Standard Connection', 'Tapko SIM-KNX', 'Tekmar RS232 Network', 'Virtual HVAC Network']
#Past_List = ['Aprilaire RS485 Network', 'Carrier CZII System', 'Carrier Infinity System', 'Cool Master IP', 'Cool Master RS232', 'Ecobee', '1.0.22', 'Generic MODBUS', 'Generic Serial', 'HAI Stand-Alone Thermostat Network', 'Heatmiser', 'Heatmiser neoHub', '1.0.12', 'Honeywell Lyric Interface', 'Leviton Z-Wave RS232 Network', 'MiOS Z-Wave Network', 'Nest Interface', 'RCS Thermostat Network', 'Standard Connection', 'Tapko SIM-KNX', 'Tekmar RS232 Network', 'Virtual HVAC Network']
Past_List = ['Aprilaire RS485 Network', 'Carrier CZII System', 'Carrier Infinity System', 'Cool Master IP', 'Cool Master RS232', 'Ecobee', '1.0.22', 'Generic MODBUS', 'Generic Serial', 'HAI Stand-Alone Thermostat Network', 'Heatmiser', 'Heatmiser neoHub', '1.0.12', 'Honeywell Lyric Interface', 'Leviton Z-Wave RS232 Network', 'MiOS Z-Wave Network', 'Nest Interface', 'RCS Thermostat Network', 'Standard Connection', 'Tapko SIM-KNX (RS232)', 'Tekmar RS232 Network', 'Virtual HVAC Network']


Configurator.Reset(start=True)
Configurator.Start(password = '')

One = Configurator.climate
Two = Configurator.communicationdevices

Current_List = Get_Device_List_Simple(One,Two)

Configurator.system.Click()

if Current_List != Past_List:
    Difference = Diff(Past_List,Current_List)
    error = 'List Changed\n' + str(Difference)
    raise ValueError(error)
    







Configurator.CloseAndClean()





Close_Image_Show()




'''
from ImageScripter import *
from elan.functions import Get_Device_Count
from elan import *



One = Configurator.climate
Two = Configurator.communicationdevices
count = 20

newcount = Get_Device_Count_Simple(One,Two)
Com_Count_Pass_OR_Fail(One,Two,10)
print("New Count is " + str(newcount))


if count != newcount:
    Say('Count for ' + Two.DisplayName + " is off")
    raise ValueError('Exception 11 -> Count for ' + Two.DisplayName + " is off, raising error")
else:
    Say("The new count matches the old count. The test has passed")
Configurator.system.Click()
'''