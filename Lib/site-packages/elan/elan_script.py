from importlib import reload
import traceback
from imagescripter.core.screen_recorder import Screen_Recorder_Class
import time
from threading import Thread
import os
import paramiko
import sys
from imagescripter.core.error_window import Error_Window_Self_Destruct_Class
from imagescripter.core.start_end_winow import Start_End_Window_Self_Destruct_Class
from imagescripter.core.variable_file_getter import Variable_File_Getter
from imagescripter.core.database_manager import Database_Manager_Class
from elan.ssh_manager import SSH_Manager_Class
import datetime
import base64



database_location = Variable_File_Getter.getVariableFromFile('Database_Location')

class Elan_Script_Class():
    def __init__(self,script_location):
        self.script_location = script_location
        #Add to sys.path or wont run on import
        if os.path.dirname(os.path.dirname(self.script_location)) not in sys.path:
            sys.path.append(os.path.dirname(self.script_location))
        self.file_name = os.path.basename(self.script_location)
        print('Script File Name is -> ',self.file_name)
        self.file_name_without_py = self.file_name.replace('.py', '')
        self.Script_Name = self.file_name_without_py
        print('Script Name is -> ',self.file_name_without_py)
        self.Screen_Recorder = Screen_Recorder_Class()
        self.DataBase_Manager = Database_Manager_Class(database_location)
        self.has_run_once_already = False

    def get_script_text(self):
        print('Getting Script Text From -> ',self.script_location)
        with open(self.script_location,'r') as f:
            script_text = f.read()
        return script_text



    def get_commands(self):
        with open(self.script_location) as f:
            commands = f.read()
        return commands

    def get_String_From_Image(self,path_of_image):
        with open(path_of_image, "rb") as imageFile:
            img_string = base64.b64encode(imageFile.read())
            print(img_string)
            return img_string

    def get_Image_From_String(self,string,path_of_image):
        imgdata = base64.b64decode(string)
        with open(path_of_image, 'wb') as f:
            f.write(imgdata)


    def get_and_enter_database_information_about_script(self):
        Fail_Video = self.Fail_Video
        Pass_Video = 'None'
        Client = 'Default'
        Controller_IP = Variable_File_Getter.getVariableFromFile('Controller_IP')
        Controller_Port = Variable_File_Getter.getVariableFromFile('Elan_Controller_Port')
        Controller_UserName = Variable_File_Getter.getVariableFromFile('Elan_Controller_User_Name')
        Controller_Password = Variable_File_Getter.getVariableFromFile('Elan_Controller_Password')
        SSH_Manager = SSH_Manager_Class(ipaddress=Controller_IP, port=Controller_Port, username=Controller_UserName, password=Controller_Password)
        Index_Time = time.time()
        Script_Start_Time = self.Script_Start_time
        Steps = self.get_script_text()
        Date = self.Current_Date
        Script_End_Time = self.Script_End_time
        Script_Name = self.Script_Name
        Pass = self.did_Script_pass
        Fail = self.did_Script_fail
        Skip = 'N/A'
        Controller_Name = Variable_File_Getter.getVariableFromFile('Controller_Name')
        Station_Name = Variable_File_Getter.getVariableFromFile('Station_Name')

        Controller_Build = SSH_Manager.get_Build()

        Error = self.Last_Exception

        if Fail == 'True':
            Last_Target_Image_Path = Variable_File_Getter.getVariableFromFile("Last_Target_Image_Location")
            Last_Templet_Image_Path = Variable_File_Getter.getVariableFromFile("Last_Templet_Image_Location")
            target_img = self.get_String_From_Image(Last_Target_Image_Path)
            templet_img = self.get_String_From_Image(Last_Templet_Image_Path)
        elif Pass == 'True':
            target_img = 'None'
            templet_img = 'None'

        Error_ID = ''.join([i for i in Error if not i.isdigit()])
        self.DataBase_Manager.enter_results_into_database(Index_Time, Script_Start_Time, Steps, Date, Script_End_Time, Script_Name, Pass, Fail, Skip,Controller_Name,Station_Name, Controller_Build, Error, target_img, templet_img, Error_ID,Fail_Video,Pass_Video,Client)



    def set_Script_Start_time(self):
        now = datetime.datetime.now()
        hour_min = str(now.hour) + ':' + str(now.minute) + ':' + str(now.second)
        print('Set Scripts Start Time -> ',hour_min)
        #16:49:13
        self.Script_Start_time = hour_min

    def set_Script_End_time(self):
        now = datetime.datetime.now()
        self.Current_Date = str(now.month) + '/' + str(now.day) + '/' + str(now.year)
        # 2015 5 6 8 53 40












        hour_min = str(now.hour) + ':' + str(now.minute) + ':' + str(now.second)
        print('Set Scripts Start Time -> ',hour_min)
        #16:49:13
        self.Script_End_time = hour_min


    def run(self):
        self.has_run_once_already = True
        print('#####################################')
        print("Running Script -> ",self.Script_Name)
        print('#####################################')
        self.Fail_Video = 'None'
        self.Last_Exception = 'None'
        self.set_Script_Start_time()
        self.Screen_Recorder.record(self.file_name_without_py)
        try:
            Start_Window = Start_End_Window_Self_Destruct_Class()
            module = __import__(self.file_name_without_py)
            self.has_run_once_already == True
            time.sleep(10)
            End_Window = Start_End_Window_Self_Destruct_Class()
            self.set_Script_End_time()
            self.Screen_Recorder.stop('(PASS)')
            self.did_Script_fail = 'False'
            self.did_Script_pass = 'True'
            self.get_and_enter_database_information_about_script()
        except Exception as e:
            self.Last_Exception = traceback.format_exc()
            print("Exception 29")
            #time.sleep(5)
            Error_Window = Error_Window_Self_Destruct_Class(str(e))
            self.set_Script_End_time()
            self.Fail_Video = self.Screen_Recorder.stop('(FAIL)')
            self.did_Script_fail = 'True'
            self.did_Script_pass = 'False'
            self.get_and_enter_database_information_about_script()
            raise



    def re_run(self):
        print('#####################################')
        print("RE-Running Script -> ",self.Script_Name)
        print('#####################################')
        self.Fail_Video = 'None'
        self.Last_Exception = 'None'
        self.set_Script_Start_time()
        self.Screen_Recorder.record(self.file_name_without_py)
        try:
            Start_Window = Start_End_Window_Self_Destruct_Class()
            module = __import__(self.file_name_without_py)
            reload(module)
            time.sleep(10)
            End_Window = Start_End_Window_Self_Destruct_Class()
            self.set_Script_End_time()
            self.Screen_Recorder.stop('(PASS)')
            self.did_Script_fail = 'False'
            self.did_Script_pass = 'True'
            self.get_and_enter_database_information_about_script()
        except Exception as e:
            self.Last_Exception = traceback.format_exc()
            Error_Window = Error_Window_Self_Destruct_Class(str(e))
            self.set_Script_End_time()
            self.Fail_Video = self.Screen_Recorder.stop('(FAIL)')
            self.did_Script_fail = 'True'
            self.did_Script_pass = 'False'
            self.get_and_enter_database_information_about_script()

            raise







            #os.system()
        #try:
        #    exec(self.get_commands())
        #except Exception as e:
        #    print(e)
        #    raise
        #    #return Exception


if __name__ == "__main__":
    #script_location = r"C:\Elan_Tools\ImageScripter\ProgramData\SystemFiles\Python\Lib\site-packages\elan\Pools\Frank\4_media.py"
    script_location = r"C:\ImageScripter_2\Lib\site-packages\elan\Scripts\Quick_Tests\8_____Check_Network_Scanner___.py"
    #script_location = r"C:\ImageScripter_2\Lib\site-packages\elan\Scripts\FrankReal\0b_Full_Backup_Only_On_Saturday.py"
    script = Elan_Script_Class(script_location)
    script.run()