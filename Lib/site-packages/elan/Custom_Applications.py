from imagescripter.core.pc import PC_Class
from imagescripter.core.automation_functions import Sleep
from elan import *
import os
import traceback
from paths import *
from urllib.request import urlopen
from imagescripter.core.variable_file_getter import Variable_File_Getter
from paths import *
from imagescripter.core.variable_file_getter import Variable_File_Getter
#Controller_Name = 'g1 F8-57-2E-00-22-C7'
#Controller_Name = 'SC F8-57-2E-00-01-9D'
Controller_Name = Variable_File_Getter.getVariableFromFile("Controller_Name")

#Password = 'shayshay'
Password = Variable_File_Getter.getVariableFromFile("Controller_Password")
IP = Variable_File_Getter.getVariableFromFile("Controller_IP")


##ElanConnectProExe = r"C:\ImageScripter_2\Lib\site-packages\elan\exe\ecp.exe"
ElanConnectProExe = ImageScripter_Location + r"Lib\site-packages\elan\exe\ecp.exe"


class Configurator_Class(PC_Class):
    def CloseAndClean(self):
        from elan import ElanHomeSystemsConnect
        Sleep(2)
        from elan import ElanConnectPro
        self.CloseWithX()
        ElanConnectPro.CloseWithX()
        Sleep(5)
        try:
            ElanHomeSystemsConnect.CloseWithX()
        except Exception as e:
            print(e)

    def Copy(self,source, destination):
        print('Trying To Copy File -> ', source)
        from imagescripter.core.variable_file_getter import Variable_File_Getter
        import paramiko
        ipadress = Variable_File_Getter.getVariableFromFile('Controller_IP')
        port = int(Variable_File_Getter.getVariableFromFile('Elan_Controller_Port'))
        username = Variable_File_Getter.getVariableFromFile('Elan_Controller_User_Name')
        password = Elan_Controller_Password
        ##password = Variable_File_Getter.getVariableFromFile('Elan_Controller_Password')
        print(ipadress)
        nbytes = 4096
        # command = """free | grep Mem | awk '{print $3/$2 * 100.0}'"""
        command = """cp #S# #D#"""
        command = command.replace('#S#', source)
        command = command.replace('#D#', destination)
        print(command)

        def createSSHClient():
            client = paramiko.SSHClient()
            # client.load_system_host_keys()
            client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            client.connect(ipadress, port, username, password)
            return client

        client = paramiko.Transport((ipadress, port))
        client.connect(username=username, password=password)
        stdout_data = []
        stderr_data = []
        session = client.open_channel(kind='session')
        session.exec_command(command)
        while True:
            if session.recv_ready():
                data = session.recv(nbytes)
                stdout_data.append(data)
                # print(data)
            if session.recv_stderr_ready():
                dataer = session.recv_stderr(nbytes)
                stderr_data.append(dataer)
                try:
                    session.close()
                    client.close()
                except:
                    pass
                raise ValueError(dataer)
            if session.exit_status_ready():
                break
        session.close()
        client.close()
        print('Finished Copying File -> ',destination)



    def Rename(self,source, destination):
        print('Trying To Rename File -> ', source,' -> ',destination)
        from imagescripter.core.variable_file_getter import Variable_File_Getter
        import paramiko
        ipadress = Variable_File_Getter.getVariableFromFile('Controller_IP')
        port = int(Variable_File_Getter.getVariableFromFile('Elan_Controller_Port'))
        username = Variable_File_Getter.getVariableFromFile('Elan_Controller_User_Name')
        ##password = Variable_File_Getter.getVariableFromFile('Elan_Controller_Password')
        password = Elan_Controller_Password
        print(ipadress)
        nbytes = 4096
        # command = """free | grep Mem | awk '{print $3/$2 * 100.0}'"""
        command = """mv #S# #D#"""
        command = command.replace('#S#', source)
        command = command.replace('#D#', destination)
        print(command)

        def createSSHClient():
            client = paramiko.SSHClient()
            # client.load_system_host_keys()
            client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            client.connect(ipadress, port, username, password)
            return client

        client = paramiko.Transport((ipadress, port))
        client.connect(username=username, password=password)
        stdout_data = []
        stderr_data = []
        session = client.open_channel(kind='session')
        session.exec_command(command)
        while True:
            if session.recv_ready():
                data = session.recv(nbytes)
                stdout_data.append(data)
                # print(data)
            if session.recv_stderr_ready():
                dataer = session.recv_stderr(nbytes)
                stderr_data.append(dataer)
                try:
                    session.close()
                    client.close()
                except:
                    pass
                raise ValueError(dataer)
            if session.exit_status_ready():
                break
        session.close()
        client.close()
        print('Finished Renaming File -> ',destination)

    def Update(self):
        self.Upgrade()



    def Upgrade(self):
        from elan import Extracting,ElanUpgrade,HlUpgrade,UpgradingSystem,Viewer,Configurator
        import os
        import shutil
        import subprocess
        from imagescripter.core.variable_file_getter import Variable_File_Getter


        Viewer.Start()
        Viewer.CloseAndClean()

        Controler_Build_Location = Variable_File_Getter.getVariableFromFile('Controler_Build_Location')
        Controler_IP = Variable_File_Getter.getVariableFromFile('Controller_IP')
        Controler_Name = Variable_File_Getter.getVariableFromFile('Controller_Name')
        Controler_Password = Variable_File_Getter.getVariableFromFile('Controller_Password')

        os.chdir(Controler_Build_Location)

        Build = os.listdir()[0]
        print('#############')
        print(Build)
        print('#############')
        source_path = Controler_Build_Location + '\\' + Build
        print('#############')
        print(source_path)
        print('#############')
        dest_path = r"C:\Settings"
        file_name = '\\' + Build
        os.chdir(dest_path)
        destination_build_path = dest_path + file_name
        print('1')
        os.system('copy ' + source_path + ' ' + destination_build_path)
        #shutil.copyfile(source_path,destination_build_path)
        print('2')

        #os.chdir(dest_path)
        # subprocess.check_call([Build])
        #subprocess.Popen(destination_build_path)
        os.startfile(destination_build_path)
        print('3')
        #subprocess.call([destination_build_path], shell=True)
        print('Start')
        Extracting.Wait()
        print('4')
        ElanUpgrade.Wait()
        for i in range(100):
            try:
                ElanUpgrade.selectasystem.Wait(printerror = False)
                break
            except Exception as e:
                if i >= 98:
                    error_message = traceback.format_exc()
                    print(error_message)
                    raise  ValueError(str(e))
                Sleep(1)
        print('ready')

        for i in range(100):
            try:
                ElanUpgrade.ListBox.Select(0, Controler_IP)
                Sleep(2)
                print(Controler_Password)
                ElanUpgrade.Edit.SetText(1, Controler_Password)
                Sleep(1)
                ElanUpgrade.RadioButton.Click('Skip Backup')
                Sleep(1)
                ElanUpgrade.Edit.SetText(1, Controler_Password)
                ElanUpgrade.PushButton.Click('Start')
                break
            except Exception as e:
                if i >= 98:
                    error_message = traceback.format_exc()
                    print(error_message)
                    raise  ValueError(str(e))
                Sleep(1)
                Sleep(1)
                pass

        for i in range(100):
            try:
                HlUpgrade.warninghardwire2.Wait(printerror = False)
                break
            except Exception as e:
                if i >= 98:
                    error_message = traceback.format_exc()
                    print(error_message)
                    raise  ValueError(str(e))
                Sleep(1)
                Sleep(1)
        HlUpgrade.PushButton.Click('Yes')
        '''
        for i in range(100):
            try:
                print(i)
                UpgradingSystem.totalprogressitemprogress.Wait(printerror = False)
            except Exception as e:
                if i >= 98:
                    error_message = traceback.format_exc()
                    print(error_message)totalprogressitemprogress
                    raise  ValueError(str(e))
                Sleep(1)
                Sleep(1)
        '''
        Sleep(5)
        try:
            HlUpgrade.PushButton.Click('No')
        except:
            pass
        HlUpgrade.finished.Wait()
        # HlUpgrade.PushButton.Click('Yes')

        HlUpgrade.PushButton.Click('OK')
        Configurator.waitForControllerToComeBackOnline()


    def Start(self,name = Controller_Name,password = Password,waitseconds = 4,setuppassword = False):
        from elan import ElanConnectPro
        from elan import Viewer
        from elan import Elan_Connect_Pro
        from elan import Ecp
        if setuppassword == True:
            Viewer.Start()
            Viewer.CloseAndClean()
        else:
            pass
        os.startfile(ElanConnectProExe)
        # optionsopened.png
        #ElanConnectPro.options.Wait()
        ElanConnectPro.whitebox.WaitVanish()
        Sleep(3)
        if ElanConnectPro.optionsclosed.Exists():
            ElanConnectPro.PushButton.Click('Options')
        else:
            pass
        ElanConnectPro.Edit.SetText(0,name)
        ElanConnectPro.Edit.SetText(1,password)
        Sleep(1)
        ElanConnectPro.Edit.SetText(1,password)
        ElanConnectPro.PushButton.Click('Start Configurator')
        #self.media.Wait(amount = 10)
        try:
            self.media.Wait(seconds = waitseconds)
        except Exception as e:
            print(e)
            Sleep(3)
            #Elan_Connect_Pro.CloseWithX()
            try:
                Ecp.CloseWithX()
            except:
                Sleep(6)
                Ecp.CloseWithX()
            ElanConnectPro.Edit.SetText(1,'')
            Sleep(4)
            try:
                ElanConnectPro.PushButton.Click('Start Configurator')
            except Exception as e:
                print(e)
                self.media.Wait(seconds=waitseconds * 2)
            try:
                self.media.Wait(seconds = waitseconds * 2)
            except Exception as e:
                print(e)
                try:
                    Ecp.CloseWithX()
                    Sleep(2)
                    ElanConnectPro.Edit.SetText(1, '')
                    Sleep(2)
                    try:
                        ElanConnectPro.PushButton.Click('Start Configurator')
                    except:
                        self.media.Wait(seconds=waitseconds * 5)
                    self.media.Wait(seconds=waitseconds * 5)
                except Exception as e:
                    print(e)
                    Ecp.Close()
                    Sleep(5)
                    ElanConnectPro.Edit.SetText(1, '')
                    Sleep(4)
                    try:
                        ElanConnectPro.PushButton.Click('Start Configurator')
                    except:
                        self.media.Wait(seconds=waitseconds * 5)
                    self.media.Wait(seconds=waitseconds * 5)

    def waitForControllerToComeBackOnline(self):
        from elan import ElanConnectPro
        ElanConnectPro.waitForControllerToComeBackOnline()

    def WaitForControllerToComeBackOnline(self):
        from elan import ElanConnectPro
        ElanConnectPro.waitForControllerToComeBackOnline()




    def RestartHard(self,wait = 10):
        print("Hard Restart")
        from elan import Configurator as C
        from elan import Open as O
        from elan import HlConfig
        from elan import ElanConnectPro as ECP
        C.basicinformation.RightClick()
        Sleep(2)
        Press('r')
        Press('r')
        Press('r')
        Press('enter')
        HlConfig.PushButton.Click('Yes')
        ECP.CloseAndClean()
        Sleep(wait)
        ECP.waitForControllerToComeBackOnline()
    def Reset(self,wait = True,start = False,name = Controller_Name,password = Password):
        print("Resetting Controller")
        from elan import Configurator as C
        from elan import Open as O
        from elan import HlConfig
        from elan import ElanConnectPro as ECP
        print('Controller Name -> ',Controller_Name)
        if 'frank' in Controller_Name:
            raise ValueError("Frank in controller name , will not reset Frank")
        if 'Frank' in Controller_Name:
            raise ValueError("Frank in controller name , will not reset Frank")

        if start == True:
            C.Start(Controller_Name,password = Password)
        try:
            C.basicinformation.Wait(seconds = 10)
        except:
            C.Start(password = '')
            C.basicinformation.Wait(seconds=10)
        C.basicinformation.RightClick()
        C.resettofactoryconfiguration.Click()
        HlConfig.PushButton.Click('OK')
        ECP.CloseAndClean()

        if wait == True:
            ECP.waitForControllerToComeBackOnline()

class Viewer_Class(PC_Class):
    def ThemeScroll(self):
        if self.themesabove.Exists():
            self.themesabove.Click(xoffset=480, yoffset=540)
            #raise ValueError("Need to fix xy on themesabove")
            #self.themesabove.Click(xoffset=591, yoffset=547)
        elif self.blackthemesabove.Exists():
            self.blackthemesabove.Click(xoffset=485, yoffset=530)
    def Start(self,name = Controller_Name,password = Password,waitseconds = 10,secondpage = False,quick = False):
        from elan import ElanConnectPro
        os.startfile(ElanConnectProExe)
        # optionsopened.png
        #ElanConnectPro.options.Wait()
        ElanConnectPro.whitebox.WaitVanish()
        sleep(3)
        if ElanConnectPro.optionsclosed.Exists():
            ElanConnectPro.PushButton.Click('Options')
        else:
            pass
        ElanConnectPro.Edit.SetText(0,name)
        ElanConnectPro.Edit.SetText(1,password)
        Sleep(1)
        ElanConnectPro.Edit.SetText(1,password)
        Sleep(3)
        ElanConnectPro.PushButton.Click('Start Viewer')
        if quick == False:
            if secondpage == True:
                try:
                    self.shudder.Wait(seconds = waitseconds)
                    self.shudder.Click()
                except Exception as e:
                    print(e)
                    self.settingswheel.Wait()
            elif secondpage == False:
                try:
                    self.settingswheel.Wait(seconds = waitseconds)
                except Exception as e:
                    print(e)
                    try:
                        self.shudder.Wait(seconds=waitseconds)
                        self.shudder.Click()
                    except:
                        Sleep(10)
                        self.settingswheel.Wait(seconds=waitseconds)
            if self.setpasswordsforallaccounts.Exists() == True:
                    self.SetUpPin()
        else:
            print("Quick Mode Enabled")






    def GoToSettings(self):
        if self.shudder.Exists():
            self.shudder.Click()
            self.settingswheel.Wait()
            Sleep(2)
            self.settingswheel.Click()
        self.settingswheel.Click()
        self.EnterConfigPin()
        self.changesettingspassword.Wait()

    def EnterConfigPin(self):
        self.one.Wait()
        self.one.Click()
        self.two.Click()
        self.three.Click()
        self.four.Click()
        Sleep(2)

    def SetUpPin(self):
        from elan import Viewer
        Sleep(1)
        Viewer.setpasswordsforallaccounts.Click()
        try:
            Viewer.enternewpassword.Wait(seconds = 30)
        except:
            Viewer.setpasswordsforallaccounts.Click()
            Sleep(2)
            Viewer.enternewpassword.Wait()
        Viewer.cursorpassword.Click()
        for i in Password:
            Viewer.Type(i)
        Viewer.Press('enter')
        Viewer.confirmnewpassword.Wait()
        for i in Password:
            Viewer.Type(i)
        Viewer.Press('enter')
        self.setpasswordsforallaccounts.WaitVanish()
        try:
            self.shudder.Click()
        except Exception as e:
            pass


    def CloseAndClean(self):
        from elan import ElanHomeSystemsConnect
        Sleep(2)
        from elan import ElanConnectPro
        self.CloseWithX()
        ElanConnectPro.CloseWithX()
        Sleep(5)
        try:
            ElanHomeSystemsConnect.CloseWithX()
        except Exception as e:
            print(e)


    '''
    def waitForControllerToComeBackOnline(self):
        from elan import ElanConnectPro
        ElanConnectPro.waitForControllerToComeBackOnline()
    def RestartHard(self):
        # Say("Hard Restarting Configurator")
        from elan import Configurator as C
        from elan import Open as O
        from elan import HlConfig
        from elan import ElanConnectPro as ECP
        C.basicinformation.RightClick()
        C.reboottargetsystemhardware.Click()
        HlConfig.PushButton.Click('Yes')
        ECP.CloseAndClean()
        ECP.waitForControllerToComeBackOnline()
    def Reset(self):
        # Say("Hard Restarting Configurator")
        from elan import Configurator as C
        from elan import Open as O
        from elan import HlConfig
        from elan import ElanConnectPro as ECP
        C.basicinformation.RightClick()
        C.resettofactoryconfiguration.Click()
        HlConfig.PushButton.Click('OK')
        ECP.CloseAndClean()
        ECP.waitForControllerToComeBackOnline()
    '''



class ElanConnectPro_Class(PC_Class):
    def Start(self):
        os.startfile(ElanConnectProExe)
        Sleep(5)

    def waitForControllerToComeBackOnline(self,seconds = 1000):
        from elan import ElanHomeSystemsConnect
        print('Waiting for Controller to come back online.')
        print("IP -> ", IP)
        Sleep(4)
        try:
            ElanHomeSystemsConnect.CloseWithX()
        except Exception as e:
            print(e)
        for i in range(seconds):
            link = 'http://' + IP
            try:
                f = urlopen(link)
                print(f)
                myfile = str(f.read())
                print(myfile)
                if 'ELAN_Logo.png' in myfile:
                    print('Controller is online!')
                    break
                else:
                    print('Controller is not online yet, trying again..',i,' / ',seconds)
            except IOError:
                print('Controller is not online yet, trying again..',i,' / ',seconds)
        print('Controller is Ready!')


    def waitForControllerToComeBackOnlineOld(self,seconds = 1000):
        from urllib.request import urlopen
        Sleep(10)
        print('Waiting for Controller to come back online.')
        print("IP -> ",IP)
        for i in range(seconds):
            link = 'http://' + IP
            try:
                f = urlopen(link)
                print(f)
                myfile = str(f.read())
                print(myfile)
                if 'ELAN_Logo.png' in myfile:
                    print('Controller is online!')
                    Sleep(15)
                    break
                else:
                    print('Controller is not online yet, trying again..',i,' / ',seconds)
            except IOError:
                print('Controller is not online yet, trying again..',i,' / ',seconds)
        print('Controller is Ready!')












    def CloseAndClean(self):
        self.CloseWithX()

    def StartConfigurator(self):
        os.startfile(ElanConnectProExe)
        Sleep(5)
        self.PushButton.Click('Options')
        self.Edit.SetText(0,Controller_Name)
        self.Edit.SetText(1,Password)
        self.PushButton.Click('Start Configurator')



if __name__ == "__main__":
    pass