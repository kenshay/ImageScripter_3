import matplotlib.pyplot as plt; plt.rcdefaults()
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib import pyplot, transforms
from paths import Dictionary_Database_Location,All_Scripts_Folder_Location,Graph_Folder_Location,Active_Build_without_EXE
from Database_Manager.Dictionary_Database_Manager import Dictionary_Database_Manager_Class
import os
from matplotlib.ticker import MaxNLocator
from paramiko import SSHClient


def convert(seconds):
    seconds = seconds % (24 * 3600)
    hour = seconds // 3600
    seconds %= 3600
    minutes = seconds // 60
    seconds %= 60
    return "%d:%02d:%02d" % (hour, minutes, seconds)


def Delete_Old_Graphs():
    print('Delete old graphs')
    LD = os.getcwd()
    os.chdir(Graph_Folder_Location)
    for graph in os.listdir(Graph_Folder_Location):
        print('Deleting ->',graph)
        os.remove(graph)
    os.chdir(LD)

def Create_Graphs():
    Delete_Old_Graphs()
    Dictionary_Database_Manager = Dictionary_Database_Manager_Class(Dictionary_Database_Location)



    sns.set()
    IGNORE_LIST = ['Kens_Desk']
    Stations_List = Dictionary_Database_Manager.get_all_station_names()
    for Station_Name in Stations_List:
        if Station_Name not in IGNORE_LIST:
            Total_Time_In_Seconds = 0
            print('Station Name is ', Station_Name)
            scripts = Dictionary_Database_Manager.get_all_scripts_from_station(Station_Name)
            PassesList = []
            FailsList = []
            PassesFailsListOfListsFromFuction = []
            List_of_script_Durations = []
            for script in scripts:
                Length = len(scripts)
                Pass_Int, Fail_Int = Dictionary_Database_Manager.get_total_scripts_passes_and_fails(Station_Name,
                                                                                                    script)
                PassesFailsListFromFunction = Dictionary_Database_Manager.get_scripts_passes_and_fails_ordered_list(
                    Station_Name, script)
                Script_Duration = Dictionary_Database_Manager.get_pass_script_duration(Station_Name, script)
                Total_Time_In_Seconds += Script_Duration
                print(script, ' ', Pass_Int, ' ', Fail_Int)
                amount_of_fails_this_script_has = Fail_Int
                FailsList.append(amount_of_fails_this_script_has)
                amount_of_passes_this_script_has = Pass_Int
                ###################
                PassesList.append(amount_of_passes_this_script_has + amount_of_fails_this_script_has)
                PassesFailsListOfListsFromFuction.append(PassesFailsListFromFunction)
                List_of_script_Durations.append(Script_Duration)
            Fails = np.array(FailsList)
            Passes = np.array(PassesList)

            y_pos = np.arange(len(scripts))

            TheLength = 8.5 * 1.5
            THeWidth = 22 * 1.5
            THE_DPI = 300
            fig = plt.figure(figsize=(TheLength, THeWidth), dpi=THE_DPI)
            # fig = plt.figure(figsize=(THeWidth,TheLength),dpi=THE_DPI)

            ax = fig.add_subplot(111)

            # ax1 = ax.twinx()
            # ax1.set_yticks(y_pos)
            # ax1.set_yticklabels(PassesFailsListOfLists)

            PassBar = ax.barh(y_pos, Passes, color='#37c472', align='center', label='Pass', height=1)
            FailBar = ax.barh(y_pos, Fails, color='#ad4949', align='center', label='Fail', height=1)
            print('############')
            print("PassBar")

            for rect, pass_Fail_Binary, duration in zip(PassBar, PassesFailsListOfListsFromFuction,
                                                        List_of_script_Durations):
                # pass_Fail_Binary = pass_Fail_Binary[-5:]
                x = rect.get_x()
                y = rect.get_y()
                width = rect.get_width()
                height = rect.get_height()
                print(x, y, width, height)
                width = x + width
                # width = width / 100 * 95
                Pass_Fail = str(pass_Fail_Binary[-6:])
                Pass_Fail = Pass_Fail.replace("'", '')
                Pass_Fail = Pass_Fail.replace(",", ' ')
                Pass_Fail = Pass_Fail.replace("[", '')
                Pass_Fail = Pass_Fail.replace("]", '')
                Pass_Fail = ' ' + Pass_Fail

                ax.text(width, y + (height / 2), Pass_Fail)
                Duration = '' + str(duration) + ' Min'
                ax.text(width / 2, y + (height / 2), Duration)

            ax.xaxis.set_major_locator(MaxNLocator(integer=True))

            ax.set_yticks(y_pos)
            # ax.grid(color='red', alpha=5, linestyle='solid')

            ax.xaxis.tick_top()
            ax.xaxis.set_ticks_position('both')
            ax.set_yticklabels(scripts)

            plt.xlabel("Amount", labelpad=30)
            plt.ylabel("Scripts")
            handles, labels = ax.get_legend_handles_labels()
            ax.legend(handles, labels)
            plt.legend(loc='best')
            plt.title('Hours (' + str(convert(
                Total_Time_In_Seconds)) + ')             ' + Station_Name + '             ' + Dictionary_Database_Manager.Active_Build_without_EXE,
                      pad=30)
            plt.gcf().subplots_adjust(left=0.40, top=.90, bottom=.06, right=.90)
            os.chdir(Graph_Folder_Location)
            plt.savefig(Station_Name + '__' + Active_Build_without_EXE + '.png')










if __name__ == "__main__":
    Create_Graphs()