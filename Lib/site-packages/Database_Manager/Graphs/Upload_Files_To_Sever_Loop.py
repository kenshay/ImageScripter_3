from paramiko import SSHClient
from scp import SCPClient
import logging
import paramiko
import os
from Database_Manager.Dictionary_Database_Manager import Dictionary_Database_Manager_Class
from paths import Active_Build_without_EXE,Controler_Build_Location,Videos_For_Database_Location,Imageexelocation,Dictionary_Database_Location
Active_Build_without_EXE = Active_Build_without_EXE.replace('_','.')
print(Active_Build_without_EXE)
import traceback
import time
from shutil import copyfile
import shutil
import os
import glob



Converted_Temp_Path = r"C:\Eluminate\System\Data\Converted_Temp"


def Sleep(sec):
    for i in range(sec):
        print(i,' ', sec)
        time.sleep(1)


ssh_host = '172.105.150.15'
ssh_user = 'root'
ssh_password = 'M8wh11YhL'
ssh_port = '22'

Server_Videos_Folder_Location = r"/var/www/html/videos/"
Fails_ROOT = r"/var/www/html/fails/"

try:
    Active_Build = os.listdir(Controler_Build_Location)[0]
except FileNotFoundError:
    # Active_Build = '8_4_88_1.EXE'
    # Active_Build = '8_4_87_6.EXE'
    # Active_Build = '8_4_87_1.EXE'
    Active_Build = '8_4_81_156.EXE'
Active_Build_without_EXE = Active_Build.split('.')[0]
Active_Build_without_EXE = Active_Build_without_EXE.replace('_', '.')

try:
    os.listdir(Videos_For_Database_Location)
    source_volume = Videos_For_Database_Location
except Exception as e:
    print(e)
    source_volume = r"C:\Users\ken.shay\Desktop\videos"






def Clear_Past_Converted_Videos():
    try:
        shutil.rmtree(Converted_Temp_Path)
    except:
        try:
            files = glob.glob(Converted_Temp_Path)
            Last_dir = os.getcwd()
            os.chdir(Converted_Temp_Path)
            for f in files:
                os.remove(f)
            os.chdir(Last_dir)
        except:
            pass
    try:
        os.mkdir(Converted_Temp_Path)
    except:
        pass
def Convert_Video(original_full_Path_avi):
    Last_Dir = os.getcwd()
    os.chdir(Imageexelocation)
    original_file_name_only_avi = os.path.basename(original_full_Path_avi)
    original_file_name_only_mp4 = original_file_name_only_avi.replace('.avi','.mp4')
    Full_path_mp4_Output = Converted_Temp_Path + '\\' + original_file_name_only_mp4
    os.system('ffmpeg -i ' + original_full_Path_avi + ' ' + Full_path_mp4_Output + ' -hide_banner')
    os.chdir(Last_Dir)
    return Full_path_mp4_Output
def Upload_Videos():
    try:
        print("Starting Upload Process")
        os.chdir(Converted_Temp_Path)
        List_Of_MP4_Videos = os.listdir(Converted_Temp_Path)
        for MP4_Video in List_Of_MP4_Videos:
            entry = Dictionary_Database_Manager.get_entry_by_fail_video(MP4_Video)
            Tartget_Path = entry['target_img']
            templet_Path = entry['templet_img']
            Error = entry['error']

            ssh = SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh.connect(ssh_host, username=ssh_user, password=ssh_password, look_for_keys=False)
            with SCPClient(ssh.get_transport()) as scp:
                ssh = SSHClient()
                ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                ssh.connect(ssh_host, username=ssh_user, password=ssh_password, look_for_keys=False)
                sftp = ssh.open_sftp()
                try:
                    New_folder_On_Server = Fails_ROOT + MP4_Video.replace('.mp4','')
                    sftp.stat(New_folder_On_Server)
                except FileNotFoundError:
                    sftp.mkdir(New_folder_On_Server)

                with SCPClient(ssh.get_transport()) as scp:
                    Dest = Server_Videos_Folder_Location + MP4_Video
                    print('Uploading ',MP4_Video,' To ',Dest)
                    scp.put(MP4_Video, Dest)#####OLD
                    print('Finished Uploading ', MP4_Video, ' To ', Dest)
                    New_Video_in_New_Folder = New_folder_On_Server + '/' + MP4_Video
                    scp.put(MP4_Video,New_folder_On_Server + '/' + MP4_Video)  #####OLD
                    print('Finished Uploading ', MP4_Video, ' To ', Dest)
            ssh.close()
            scp.close()
            sftp.close()
    except:
        try:
            ssh.close()
            scp.close()
            sftp.close()
        except:
            traceback.print_exc()
def Start_Main_Loop():
    os.chdir(source_volume)
    unfiltered_old_videos = os.listdir()
    old_videos = []
    for item in unfiltered_old_videos:
        if item.endswith('.avi'):
            old_videos.append(item)
    Already_Uploaded_Files = Get_Already_Uploaded_Files()
    Already_Uploaded_Files = [x.replace('.mp4','.avi') for x in Already_Uploaded_Files]
    for avi_video in old_videos:
        if Active_Build_without_EXE in avi_video:
            if '__Fail__' in avi_video:
                if avi_video not in Already_Uploaded_Files:
                    avi_video_full_path = os.path.abspath(avi_video)
                    Convert_Video(avi_video_full_path)






def Get_Already_Uploaded_Files():
    try:
        print("Get_Already_Uploaded_Files")
        ssh = SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(ssh_host, username=ssh_user, password=ssh_password, look_for_keys=False)
        sftp = ssh.open_sftp()
        List_Of_Already_Uploaded_Videos = []
        for filename in sftp.listdir(Server_Videos_Folder_Location):
            List_Of_Already_Uploaded_Videos.append(filename)
        return List_Of_Already_Uploaded_Videos
        ssh.close()
        sftp.close()
    except:
        try:
            ssh.close()
            sftp.close()
        except:
            traceback.print_exc()



while True:
    while True:
        print("Starting Loop")
        try:
            Dictionary_Database_Manager = Dictionary_Database_Manager_Class(Dictionary_Database_Location)
            Clear_Past_Converted_Videos()
            Start_Main_Loop()
            Upload_Videos()
        except:
            traceback.print_exc()
        print("Finished Loop")
        Sleep(10)
