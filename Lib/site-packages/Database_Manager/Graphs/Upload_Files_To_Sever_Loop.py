from paramiko import SSHClient
from scp import SCPClient
import logging
import paramiko
import os
from Database_Manager.Dictionary_Database_Manager import Dictionary_Database_Manager_Class
from paths import ssh_host,ssh_user,ssh_password,ssh_port,FAIL_PHP_FILE,Server_Videos_Folder_Location,Server_Graph_Folder_Location,Fails_ROOT,Error_Text_Path,Dictionary_Text_Path,Converted_Temp_Path,Desktop_location,Active_Build_without_EXE,Controler_Build_Location,isTesting,Videos_For_Database_Location,Imageexelocation,Dictionary_Database_Location,Graph_Folder_Location
import traceback
import time
from shutil import copyfile
import shutil
import os
import glob
from Email import Send_Email

Reported_Video_Faul_Upload_List = []

def Sleep(sec):
    for i in range(sec):
        print(i,' ', sec)
        time.sleep(1)



if isTesting == False:
    Active_Build = os.listdir(Controler_Build_Location)[0]
    Active_Build_without_EXE = Active_Build.split('.')[0]
else:
    Active_Build = Active_Build_without_EXE
Active_Build_without_EXE = Active_Build_without_EXE.replace('_', '.')


os.listdir(Videos_For_Database_Location)
source_volume = Videos_For_Database_Location






def Clear_Past_Converted_Videos():
    try:
        shutil.rmtree(Converted_Temp_Path)
    except:
        traceback.print_exc()
        try:
            files = glob.glob(Converted_Temp_Path)
            Last_dir = os.getcwd()
            os.chdir(Converted_Temp_Path)
            for f in files:
                os.remove(f)
            os.chdir(Last_dir)
        except:
            traceback.print_exc()
            pass
    try:
        os.mkdir(Converted_Temp_Path)
    except:
        traceback.print_exc()
        pass
def Convert_Video(original_full_Path_avi):
    Last_Dir = os.getcwd()
    os.chdir(Imageexelocation)
    original_file_name_only_avi = os.path.basename(original_full_Path_avi)
    original_file_name_only_mp4 = original_file_name_only_avi.replace('.avi','.mp4')
    Full_path_mp4_Output = Converted_Temp_Path + '\\' + original_file_name_only_mp4
    os.system('ffmpeg -i ' + original_full_Path_avi + ' ' + Full_path_mp4_Output + ' -hide_banner')
    os.chdir(Last_Dir)
    return Full_path_mp4_Output
def Upload_Videos():
    try:
        print("Starting Upload Process")
        os.chdir(Converted_Temp_Path)
        List_Of_MP4_Videos = os.listdir(Converted_Temp_Path)
        for MP4_Video in List_Of_MP4_Videos:
            try:
                Upload_List = []
                #Upload_List.append(FAIL_PHP_FILE)

                ########################################Fail_Py########################
                Fail_Py_Dictionary = {}
                Fail_Py_Dictionary['path'] = FAIL_PHP_FILE
                Fail_Py_Dictionary['name'] = os.path.basename(FAIL_PHP_FILE)
                Upload_List.append(Fail_Py_Dictionary)

                ########################################FAIL VIDEO########################
                Fail_Dictionary = {}




                Fail_Dictionary['path'] = MP4_Video
                Fail_Dictionary['name'] = 'fail.mp4'
                Upload_List.append(Fail_Dictionary)
                ##################################################################################
                print('########### MP4 #############')
                print(MP4_Video)
                print('############ MP4 ###############')
                print(MP4_Video)
                entry = Dictionary_Database_Manager.get_entry_by_fail_video(MP4_Video)

                ###########Target###########
                Tartget_Path = entry['target_img']
                Tartget_Path = Tartget_Path.split(':')[1]
                if isTesting == True:
                    Tartget_Path = Desktop_location + r"\target.png"
                Target_Dictionary = {}
                Target_Dictionary['path'] = Tartget_Path
                Target_Dictionary['name'] = 'target.png'
                Upload_List.append(Target_Dictionary)

                #############Templet##################
                templet_Path = entry['templet_img']
                templet_Path = templet_Path.split(':')[1]
                if isTesting == True:
                    templet_Path = Desktop_location + r"\temp.png"
                Template_Dictionary = {}
                Template_Dictionary['path'] = templet_Path
                Template_Dictionary['name'] = 'template.png'
                Upload_List.append(Template_Dictionary)
                #####################Dict########################
                with open(Dictionary_Text_Path, 'w') as f:
                    f.write(str(entry))
                Dict_Dictionary = {}
                Dict_Dictionary['path'] = Dictionary_Text_Path
                Dict_Dictionary['name'] = 'dictionary.txt'
                Upload_List.append(Dict_Dictionary)
                ################################################################
                ##############################################ERROR############
                Error = entry['error']
                if os.path.exists(Error_Text_Path):
                    os.remove(Error_Text_Path)
                with open(Error_Text_Path,'w') as f:
                    f.write(Error)
                Error_Dictionary = {}
                Error_Dictionary['path'] = Error_Text_Path
                Error_Dictionary['name'] = 'error.txt'
                Upload_List.append(Error_Dictionary)
                ######################################################
                ########################################################
                ssh = SSHClient()
                ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                ssh.connect(ssh_host, username=ssh_user, password=ssh_password, look_for_keys=False)
                with SCPClient(ssh.get_transport()) as scp:
                    ssh = SSHClient()
                    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                    ssh.connect(ssh_host, username=ssh_user, password=ssh_password, look_for_keys=False)
                    sftp = ssh.open_sftp()
                    try:
                        New_folder_On_Server = Fails_ROOT + MP4_Video.replace('.mp4','')
                        sftp.stat(New_folder_On_Server)
                    except FileNotFoundError:
                        sftp.mkdir(New_folder_On_Server)

                    with SCPClient(ssh.get_transport()) as scp:
                        Dest = Server_Videos_Folder_Location + MP4_Video
                        print('Uploading ',MP4_Video,' To ',Dest)
                        scp.put(MP4_Video, Dest)#####OLD
                        print('Finished Uploading ', MP4_Video, ' To ', Dest)
                        #######################################################################
                        ######################################################################
                        for dictionary1 in Upload_List:
                            try:
                                path = dictionary1['path']
                            except:
                                print(dictionary1)
                                raise
                            end_name_only = dictionary1['name']
                            NewFIle = New_folder_On_Server + '/' + end_name_only
                            print('Put ',path,' ',NewFIle)
                            scp.put(path,NewFIle)
                ssh.close()
                scp.close()
                sftp.close()
            except Exception as e:
                traceback.print_exc()
                if str(e) not in Reported_Video_Faul_Upload_List:
                    Reported_Video_Faul_Upload_List.append(str(e))
                    Send_Email('Something Went Wrong With Uploading Video -> ' + MP4_Video,str(e))
    except:
        traceback.print_exc()
        try:
            try:
                ssh.close()
            except:
                #traceback.print_exc()
                pass
            try:
                scp.close()
            except:
                #traceback.print_exc()
                pass
            try:
                sftp.close()
            except:
                #traceback.print_exc()
                pass
        except:
            #traceback.print_exc()
            pass


def Start_Main_Loop():
    os.chdir(source_volume)
    unfiltered_old_videos = os.listdir()
    old_videos = []
    for item in unfiltered_old_videos:
        if item.endswith('.avi'):
            old_videos.append(item)
    Already_Uploaded_Files = Get_Already_Uploaded_Files()
    Already_Uploaded_Files = [x.replace('.mp4','.avi') for x in Already_Uploaded_Files]
    for avi_video in old_videos:
        if Active_Build_without_EXE in avi_video:
            if '__Fail__' in avi_video:
                if avi_video not in Already_Uploaded_Files:
                    avi_video_full_path = os.path.abspath(avi_video)
                    Convert_Video(avi_video_full_path)
def Get_Already_Uploaded_Files():
    try:
        print("Get_Already_Uploaded_Files")
        ssh = SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(ssh_host, username=ssh_user, password=ssh_password, look_for_keys=False)
        sftp = ssh.open_sftp()
        List_Of_Already_Uploaded_Videos = []
        for filename in sftp.listdir(Server_Videos_Folder_Location):
            List_Of_Already_Uploaded_Videos.append(filename)
        return List_Of_Already_Uploaded_Videos
        ssh.close()
        sftp.close()
    except:
        traceback.print_exc()
        try:
            ssh.close()
            sftp.close()
        except:
            traceback.print_exc()
def Upload_Graphs():
    try:
        Last_dir = os.getcwd()
        os.chdir(Graph_Folder_Location)
        List_of_Graphs = os.listdir(Graph_Folder_Location)
        ssh = SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(ssh_host, username=ssh_user, password=ssh_password, look_for_keys=False)
        with SCPClient(ssh.get_transport()) as scp:
            for graph in List_of_Graphs:
                NewFile = Server_Graph_Folder_Location + graph
                print('Uploading ', graph, 'To ',NewFile)
                scp.put(graph,NewFile)
                print('Finished Uploading ', graph)
        ssh.close()
        scp.close()
    except:
        traceback.print_exc()
        try:
            ssh.close()
        except:
            traceback.print_exc()
            pass
        try:
            scp.close()
        except:
            traceback.print_exc()
            pass



while True:
    while True:
        print("Starting Loop")
        try:
            print('#################################################')
            print('Active Build Is -> ',Active_Build_without_EXE)
            print('#################################################')
            Dictionary_Database_Manager = Dictionary_Database_Manager_Class(Dictionary_Database_Location)
            Clear_Past_Converted_Videos()
            Start_Main_Loop()
            Upload_Videos()
        except:
            traceback.print_exc()
        print("Finished Loop")
        Sleep(60)
