from __future__ import print_function
import pickle
import os.path
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from apiclient.http import MediaFileUpload, MediaIoBaseDownload
import os, io
# If modifying these scopes, delete the file token.pickle.
SCOPES = ['https://www.googleapis.com/auth/drive']


"""Shows basic usage of the Drive v3 API.
Prints the names and ids of the first 10 files the user has access to.
"""
creds = None
# The file token.pickle stores the user's access and refresh tokens, and is
# created automatically when the authorization flow completes for the first
# time.
if os.path.exists('token.pickle'):
    with open('token.pickle', 'rb') as token:
        creds = pickle.load(token)
# If there are no (valid) credentials available, let the user log in.
if not creds or not creds.valid:
    if creds and creds.expired and creds.refresh_token:
        creds.refresh(Request())
    else:
        flow = InstalledAppFlow.from_client_secrets_file(
            'credentials.json', SCOPES)
        creds = flow.run_local_server(port=0)
    # Save the credentials for the next run
    with open('token.pickle', 'wb') as token:
        pickle.dump(creds, token)

drive_service = build('drive', 'v3', credentials=creds)



def Get_File_Objects(file_id):


    afile = drive_service.files().get(fileId=file_id).execute()
    print(afile)
    return afile




def Get_All_File_Objects():
    items = list_Files()
    for i in items:
        print(i)
        Get_File_Objects(i['id'])








def list_Files():
    results = drive_service.files().list(
        pageSize=10, fields="nextPageToken, files(id, name)").execute()
    items = results.get('files', [])

    if not items:
        print('No files found.')
    else:
        pass
        #print('Files:')
        #for item in items:
        #    print(u'{0} ({1})'.format(item['name'], item['id']))
    return items

def uploadFile(filename,filepath,mimetype):
    file_metadata = {'name':filename}
    media = MediaFileUpload(filepath,mimetype = mimetype)
    file = drive_service.files().create(body=file_metadata,media_body = media,fields = 'id').execute()
    print('########')
    print(type(file))
    print('########')
    return file.get('webViewLink')

def downloadFile(file_id,filepath):
    request = drive_service.files().get_media(fileId=file_id)
    fh = io.BytesIO()
    downloader = MediaIoBaseDownload(fh, request)
    done = False
    while done is False:
        status, done = downloader.next_chunk()
        print("Download %d%%." % int(status.progress() * 100))
    with io.open(filepath,'wb') as f:
        fh.seek(0)
        f.write(fh.read())

def download_all_files():
    items = list_Files()
    for i in items:
        print(i)
        downloadFile(i['id'], i['name'])

def delete_all_files():
    items = list_Files()
    for i in items:
        print('Deleting -> ',i)
        delete_file(drive_service,i['id'])



def delete_file(service, file_id):
  """Permanently delete a file, skipping the trash.

  Args:
    service: Drive API service instance.
    file_id: ID of the file to delete.
  """
  try:
    drive_service.files().delete(fileId=file_id).execute()
  except Exception as error:
    print('An error occurred: %s' % error)


def createFolder(name):
    file_metadata = {
    'name': name,
    'mimeType': 'application/vnd.google-apps.folder'
    }
    file = drive_service.files().create(body=file_metadata,
                                        fields='id').execute()
    print ('Folder ID: %s' % file.get('id'))



def update_permission(file_id, permission_id, new_role):

  try:
    # First retrieve the permission from the API.
    permission = drive_service.permissions().get(
        fileId=file_id, permissionId=permission_id).execute()
    permission['role'] = new_role
    return drive_service.permissions().update(
        fileId=file_id, permissionId=permission_id, body=permission).execute()
  except Exception as e:
    print('An error occurred: %s' % e)
  return None

def update_permission_for_all_files():
    items = list_Files()
    for i in items:
        permission_id = 'https://www.googleapis.com/auth/drive'
        new_role = 'owner'
        update_permission(i['id'],permission_id,new_role)





def retrieve_permissions_for_all_files():
    items = list_Files()
    for i in items:
        perm = retrieve_permissions(i['id'])
        print(perm)



def retrieve_permissions(file_id):
  try:
    permissions = drive_service.permissions().list(fileId=file_id).execute()
    return permissions.get('items', [])
  except Exception as error:
    print('An error occurred: %s' % error)
  return None


def Get_All_Share_Links():
    results = drive_service.files().list(
        pageSize=10, fields="nextPageToken, files(id, name, webViewLink)").execute()
    items = results.get('files', [])
    for item in items:
        print(item['webViewLink'])


def searchFile(size,query):
    results = drive_service.files().list(
    pageSize=size,fields="nextPageToken, files(id, name, kind, mimeType)",q=query).execute()
    items = results.get('files', [])
    if not items:
        print('No files found.')
    else:
        print('Files:')
        for item in items:
            print(item)
            print('{0} ({1})'.format(item['name'], item['id']))

#file_Name = "FrankPC_Station__0_Detect_Controller_Crashes"
#Path = r"C:\Users\ken.shay\Desktop\Test\FrankPC_Station.png"
#Path = r"C:\Users\ken.shay\Downloads\FrankPC_Station__0_Detect_Controller_Crashes__8.4.81.156__Fail__21383675632890245601218587196621436779x.avi"
#Mime = 'image/png'
#Mime = 'video/avi'
#test = uploadFile(file_Name,Path,Mime)
#print(test)
#update_permission_for_all_files()
#retrieve_permissions_for_all_files()
#delete_all_files()

##try:
#    for i in List:
#        print(i)
#except Exception as e:
#    print(e)

    #print(i['displayName'])
#retrieve_permissions_for_all_files()
#update_permission_for_all_files()
#Get_All_Share_Links()

file_id = '1dSH9xYlHxrdqXUJYkZ-gImd4s5CE6Pip'
new_role = 'writer'
permission_id = 'Role'

value = None
perm_type = 'default'
role = 'owner'
"""Insert a new permission.

Args:
service: Drive API service instance.
file_id: ID of the file to insert permission for.
value: User or group e-mail address, domain name or None for 'default'
       type.
perm_type: The value 'user', 'group', 'domain' or 'default'.
role: The value 'owner', 'writer' or 'reader'.
Returns:
The inserted permission if successful, None otherwise.
"""
new_permission = {
  'value': value,
  'type': perm_type,
  'role': role
}

#for i in list_Files():
#    print(i)



#drive_service.permissions().update(fileId=file_id, body=new_permission).execute()
permissions = drive_service.permissions().list(fileId=file_id).execute()
print(permissions)
#print(permissions['items'][1]['id'])

t

#'id': '1rY8l46rAjqSwJMlc6Ufi6JXger6hLrpF', 'name': 'FrankPC_Station.png'}

permissions = drive_service.permissions().list(fileId='1rY8l46rAjqSwJMlc6Ufi6JXger6hLrpF').execute()
print(permissions)
#print(permissions['items'][1]['id'])

#update_permission(file_id, permissions['items'][1]['id'],"owner")