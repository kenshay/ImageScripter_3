from paramiko import SSHClient
from scp import SCPClient
import logging
import paramiko
import os
from paths import Active_Build_without_EXE,Controler_Build_Location,Videos_For_Database_Location,Imageexelocation
Active_Build_without_EXE = Active_Build_without_EXE.replace('_','.')
print(Active_Build_without_EXE)
import traceback
import time
from shutil import copyfile




def Sleep(sec):
    for i in range(sec):
        print(i,' ', sec)
        time.sleep(1)


ssh_host = '172.105.150.15'
ssh_user = 'root'
ssh_password = 'M8wh11YhL'
ssh_port = '22'

with open(r"C:\Users\ken.shay\Desktop\x.txt", 'w') as f:
    f.write(str(0))
def Convert_Video(original):
    with open(r"C:\Users\ken.shay\Desktop\x.txt",'r') as f:
        x = f.read()
    x = int(x)
    x += 1

    with open(r"C:\Users\ken.shay\Desktop\x.txt",'w') as f:
        f.write(str(x))
    x = str(x)


    Original_File_Name_Only = os.path.basename(original)
    Original_File_Name_Only_mp4 = Original_File_Name_Only.replace('.avi','.mp4')

    temp_original = r"C:\Eluminate\System\Data\original_video.avi"
    try:
        os.remove(temp_original)
    except:
        pass
    print('Copy Local For Conversion ',original,' ',temp_original)
    copyfile(original,temp_original)
    print('Done Copy')

    Last_dir = os.getcwd()
    output_video_path = r"C:\Eluminate\System\Data\\" + Original_File_Name_Only_mp4

    try:
        os.remove(output_video_path)
    except:
        pass
    os.chdir(Imageexelocation)
    print('Converting -> ',' ',temp_original,' ',output_video_path)
    #output_video_path = r"C:\Eluminate\System\Data\Recordings\end.mp4"
    output_video_path = r"C:\Eluminate\System\Data\Recordings\\" + str(x) + "end.mp4"
    os.system('ffmpeg -i ' + temp_original + ' ' + output_video_path + ' -hide_banner')
    #raise ValueError('THis')





    os.chdir(Last_dir)
    print('Finished Conversion')
    return output_video_path
















##############
#try:
#    os.listdir(Videos_For_Database_Location)
#    source_volume = Videos_For_Database_Location
#except Exception as e:
#    print(e)
source_volume = r"C:\Users\ken.shay\Desktop\videos"
destination_volume = r"/var/www/html/videos"



#os.listdir(Controler_Build_Location)[0]

def Upload_Videos():
    #try:
    #    Active_Build = os.listdir(Controler_Build_Location)[0]
    #except FileNotFoundError:
    #    Active_Build = '8_4_88_1.EXE'
    #    Active_Build = '8_4_87_6.EXE'
    #    Active_Build = '8_4_87_1.EXE'
    Active_Build = '8_4_81_156.EXE'
######################

    Active_Build_without_EXE = Active_Build.split('.')[0]
    Active_Build_without_EXE = Active_Build_without_EXE.replace('_', '.')
    print('##########################################')
    print('##########################################')
    print('Active Build Is -> ',Active_Build)
    print('Source Folder Is -> ',source_volume)
    print('##########################################')
    print('##########################################')

    os.chdir(source_volume)
    Nvideos = os.listdir()
    New_List_of_videos = []
    for item in Nvideos:
        if item.endswith('.avi'):
            New_List_of_videos.append(item)

    #New_List_of_videos = [os.path.splitext(x)[0] for x in New_List_of_videos]
    #print(New_List_of_videos)





    Already_Uploaded_Files = Get_Already_Uploaded_Files()
    Already_Uploaded_Files = [x.replace('.mp4','.avi') for x in Already_Uploaded_Files]
    print(Already_Uploaded_Files)

    ssh = SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(ssh_host, username=ssh_user, password=ssh_password, look_for_keys=False)
    with SCPClient(ssh.get_transport()) as scp:
        for video in New_List_of_videos:
            if Active_Build_without_EXE in video:
                if video not in Already_Uploaded_Files:
                    if '__Fail__' in video:
                        Converted = Convert_Video(os.path.abspath(video))
                        print('Uploading -> ',Converted)
                        Converted_File_Name_Only = os.path.basename(Converted)
                        Dest = destination_volume + '/' + Converted_File_Name_Only
                        print('Destination -> ',Dest)





                        scp.put(video,Dest)
                else:
                    print('Skipping Already Updated -> ',video)
            else:
                print('Skipping Not Current Active Build -> ', video)
    ssh.close()
    scp.close()

        #scp.put(source_volume, recursive=True, remote_path=destination_volume)



def Get_Already_Uploaded_Files():
    print("Get_Already_Uploaded_Files")
    ssh = SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(ssh_host, username=ssh_user, password=ssh_password, look_for_keys=False)
    sftp = ssh.open_sftp()
    List_Of_Already_Uploaded_Videos = []
    for filename in sftp.listdir(destination_volume):
        List_Of_Already_Uploaded_Videos.append(filename)
    return List_Of_Already_Uploaded_Videos
    ssh.close()
    sftp.close()



x = 0
while True:
    while True:
        print('##########Loop -> ',x)
        x += 1
        print("Starting Loop")
        try:
            Upload_Videos()
        except:
            traceback.print_exc()
        print("Finished Loop")
        Sleep(60)