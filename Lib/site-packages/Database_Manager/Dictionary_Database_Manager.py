import os
import json
import traceback
import statistics
import time
import pickle
from paths import Dictionary_Database_Folder
from datetime import datetime
from datetime import timedelta
class Dictionary_Database_Manager_Class():
    def __init__(self, database_location):
            self.database_location_file = database_location
            self.database_folder_location = os.path.dirname(self.database_location_file)
            self.database_name = os.path.basename(self.database_location_file)
            self.database_name_without_db = self.database_name.strip('.json')
            if os.path.isfile(self.database_location_file) == False:
                self.Create_New_Database()
            else:
                pass

    def get_list_of_databases(self):
        os.chdir(Dictionary_Database_Folder)
        List_of_databases = os.listdir()
        aList = []
        for database_file_name in List_of_databases:
            # print('Grabbing Data ',database_file_name)
            # database_file_name = r"\\172.16.43.21\nas\Reports\Dictionary_Databases\FrankPC_Station__8_4_81_170.json"
            # with open(database_file_name) as f:
            #    aList.append(json.load(f))
            with open(database_file_name, 'rb') as f:
                # data = pickle.load(f)
                # print(data)
                aList.append(pickle.load(f))
            time.sleep(1)
        return aList



    def get_and_print_entries(self):
        aList = self.get_list_of_databases()
        self.List_Of_Entries = []
        for database_list in aList:
            for entry_dict in database_list:
                print(entry_dict)
                self.List_Of_Entries.append(entry_dict)
        return self.List_Of_Entries




    def get_average_duration(self,script_name):
        if script_name.endswith('.py'):
            script_name = script_name.strip('.py')
        aList = self.get_list_of_databases()
        self.List_Of_Durations = []

        for database_list in aList:
            for entry_dict in database_list:
                #print(entry_dict)
                if entry_dict['script_name'] == script_name:
                    if entry_dict['pass'] == 'True':
                        start = entry_dict['script_end_time']
                        end = entry_dict['script_start_time']
                        FMT = '%H:%M:%S'
                        tdelta = datetime.strptime(start, FMT) - datetime.strptime(end, FMT)
                        tdelta.total_seconds()
                        #print(type(tdelta))
                        #for i in dir(tdelta):
                        #    print(i)
                        self.List_Of_Durations.append(tdelta.total_seconds())
        return statistics.mean(self.List_Of_Durations)
        #average = timedelta(seconds=sum(map(lambda f: int(f[0]) * 3600 + int(f[1]) * 60 + int(f[2]), map(lambda f: f.split(':'),self.List_Of_Durations))) / len(self.List_Of_Durations)))
        #print(average)









    def enter_results_into_database(self,Info_Dict):
        self.Info_Dictionary = Info_Dict

        with open(self.database_location_file, 'rb') as json_file:
            Lista = pickle.load(json_file)
            Lista.append(self.Info_Dictionary)

        with open(self.database_location_file, 'wb') as json_file:
            pickle.dump(Lista, json_file)

        print('Entered Results Into Database -> ', self.database_location_file)


    def Create_New_Database(self):
        for i in range(100):
            try:
                print("Creating New Database -> ",self.database_location_file)
                lastcmd = os.getcwd()
                Folder = self.database_folder_location
                print(Folder)
                try:
                    os.chdir(Folder)
                except FileNotFoundError:
                    os.mkdir(Folder)
                    os.chdir(Folder)
                Lista = []
                #with open(self.database_location_file, 'w') as outfile:
                #    json.dump(Lista, outfile)
                with open(self.database_location_file, 'wb') as outfile:
                    pickle.dump(Lista, outfile)


                os.chdir(lastcmd)
                break
            except Exception as e:
                print(e)
                traceback.print_exc()
                time.sleep(1)


if __name__ == "__main__":
    from paths import Dictionary_Database_Location
    #database_location = Variable_File_Getter.getVariableFromFile('Database_Location')
    Dictionary_Database_Manager = Dictionary_Database_Manager_Class(Dictionary_Database_Location)
    #mean = Dictionary_Database_Manager.get_average_duration('8_PCthermostatprograms')
    Dictionary_Database_Manager.get_and_print_entries()







