import os
import json
import traceback
import time
import pickle

class Dictionary_Database_Manager_Class():
    def __init__(self, database_location):
            self.database_location_file = database_location
            self.database_folder_location = os.path.dirname(self.database_location_file)
            self.database_name = os.path.basename(self.database_location_file)
            self.database_name_without_db = self.database_name.strip('.json')
            if os.path.isfile(self.database_location_file) == False:
                self.Create_New_Database()
            else:
                pass

    def enter_results_into_database(self,Info_Dict):
        self.Info_Dictionary = Info_Dict

        with open(self.database_location_file, 'rb') as json_file:
            Lista = pickle.load(json_file)
            Lista.append(self.Info_Dictionary)

        with open(self.database_location_file, 'wb') as json_file:
            pickle.dump(Lista, json_file)

        print('Entered Results Into Database -> ', self.database_location_file)


    def Create_New_Database(self):
        for i in range(100):
            try:
                print("Creating New Database -> ",self.database_location_file)
                lastcmd = os.getcwd()
                Folder = self.database_folder_location
                print(Folder)
                try:
                    os.chdir(Folder)
                except FileNotFoundError:
                    os.mkdir(Folder)
                    os.chdir(Folder)
                Lista = []
                #with open(self.database_location_file, 'w') as outfile:
                #    json.dump(Lista, outfile)
                with open(self.database_location_file, 'wb') as outfile:
                    pickle.dump(Lista, outfile)


                os.chdir(lastcmd)
                break
            except Exception as e:
                print(e)
                traceback.print_exc()
                time.sleep(1)


if __name__ == "__main__":
    from paths import Dictionary_Database_Location
    #database_location = Variable_File_Getter.getVariableFromFile('Database_Location')
    Dictionary_Database_Manager = Dictionary_Database_Manager_Class(Dictionary_Database_Location)
    #Dictionary_Database_Manager.enter_test_results_into_database()














'''
class Dictionary_Database_Manager_Class():
    def __init__(self, database_location):
            self.database_location_file = database_location
            self.database_folder_location = os.path.dirname(self.database_location_file)
            self.database_name = os.path.basename(self.database_location_file)
            self.database_name_without_db = self.database_name.strip('.db')
            if os.path.isfile(self.database_location_file) == False:
                self.Create_New_Database()
            else:
                pass

    def enter_results_into_database(self,Info_Dict):
        self.Info_Dictionary = Info_Dict
        with open(self.database_location_file) as json_file:
            Lista = json.load(json_file)
            Lista.append(self.Info_Dictionary)
        with open(self.database_location_file, 'w') as outfile:
            json.dump(Lista, outfile)
        print('Entered Results Into Database -> ', self.database_location_file)


    def Create_New_Database(self):
        for i in range(100):
            try:
                print("Creating New Database -> ",self.database_location_file)
                lastcmd = os.getcwd()
                Folder = self.database_folder_location
                print(Folder)
                try:
                    os.chdir(Folder)
                except FileNotFoundError:
                    os.mkdir(Folder)
                    os.chdir(Folder)
                Lista = []
                with open(self.database_location_file, 'w') as outfile:
                    json.dump(Lista, outfile)
                os.chdir(lastcmd)
                break
            except Exception as e:
                print(e)
                traceback.print_exc()
                time.sleep(1)


if __name__ == "__main__":
    from paths import Dictionary_Database_Location
    #database_location = Variable_File_Getter.getVariableFromFile('Database_Location')
    Dictionary_Database_Manager = Dictionary_Database_Manager_Class(Dictionary_Database_Location)
    #Dictionary_Database_Manager.enter_test_results_into_database()

'''