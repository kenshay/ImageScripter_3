import os
import json
import traceback
import statistics
import time
import pickle
from paths import Dictionary_Database_Folder,Active_Build_without_EXE
from datetime import datetime
from datetime import timedelta
class Dictionary_Database_Manager_Class():
    def __init__(self, database_location):
            self.Active_Build_without_EXE = Active_Build_without_EXE
            self.database_location_file = database_location
            self.database_folder_location = os.path.dirname(self.database_location_file)
            self.database_name = os.path.basename(self.database_location_file)
            self.database_name_without_db = self.database_name.strip('.json')
            self.Update_Caches()
            if os.path.isfile(self.database_location_file) == False:
                self.Create_New_Database()
            else:
                pass

    def Update_Caches(self):
        self.Cached_List_Of_Databases = self.get_list_of_databases()
        self.Cached_List_Of_Entries = []
        for List in self.Cached_List_Of_Databases:
            for entry in List:
                self.Cached_List_Of_Entries.append(entry)
        self.Cached_List_Of_Stations = self.get_all_station_names()

    def get_list_of_databases(self):
        os.chdir(Dictionary_Database_Folder)
        List_of_databases = os.listdir()
        aList = []
        for database_file_name in List_of_databases:
            if self.Active_Build_without_EXE in database_file_name:
                print('Grabbing Data ',database_file_name)
                # database_file_name = r"\\172.16.43.21\nas\Reports\Dictionary_Databases\FrankPC_Station__8_4_81_170.json"
                # with open(database_file_name) as f:
                #    aList.append(json.load(f))
                with open(database_file_name, 'rb') as f:
                    # data = pickle.load(f)
                    # print(data)
                    aList.append(pickle.load(f))
                time.sleep(1)
            else:
                print('Not Grabbing Data ',database_file_name)
        return aList


    def get_all_station_names(self):
        List_of_stations = []
        for entry in self.Cached_List_Of_Entries:
                station_name = entry['station_name']
                station_name = station_name.split(':')[1]
                if station_name not in List_of_stations:
                    List_of_stations.append(station_name)
        return List_of_stations

    def get_all_scripts_from_station(self,station):
        List_of_scripts = []
        for entry in self.Cached_List_Of_Entries:
                station_name = entry['station_name']
                station_name = station_name.split(':')[1]
                if station_name == station:
                    script_name = entry['script_name']
                    script_name = script_name.split(':')[1]
                    if script_name not in List_of_scripts:
                        List_of_scripts.append(script_name)
        return List_of_scripts

    def get_total_scripts_passes_and_fails(self,station,script):
        Pass_Int = 0
        Fail_Int = 0

        for entry in self.Cached_List_Of_Entries:
                station_name = entry['station_name']
                station_name = station_name.split(':')[1]
                if station_name == station:
                    #print(station_name, ' Is ',station)
                    script_name = entry['script_name']
                    script_name = script_name.split(':')[1]
                    if script_name == script:
                        Pass = entry['pass']
                        Pass = Pass.split(':')[1]
                        if Pass == 'True':
                            Pass_Int += 1
                        else:
                            Fail_Int += 1

        return Pass_Int,Fail_Int




    def get_entries(self,*args,back = []):
        aList = self.Cached_List_Of_Databases
        filters = args
        self.Filtered_List_Of_Entries = []
        for database_list in aList:
            for entry_dict in database_list:
                if filters != ():
                    if all(val in entry_dict.values() for val in filters):
                        if back != []:
                            entry_dict = {k: entry_dict[k] for k in back}
                        self.Filtered_List_Of_Entries.append(entry_dict)
                else:
                    if back != []:
                        entry_dict = {k: entry_dict[k] for k in back}
                    self.Filtered_List_Of_Entries.append(entry_dict)
        return self.Filtered_List_Of_Entries




        #for database_list in aList:
        #    for entry_dict in database_list:
        #        #######
        #        #if self.script_name:
        #        #    if entry_dict['script_name'] == self.script_name:
        #        ###########



        #print(type(kwargs))
        #    print(next((item for item in aList if item[key] == value), None))






        #aList = self.get_list_of_databases()
        #for database_list in aList:
        #    for entry_dict in database_list:

        #for key, value in kwargs.items():
        #    print("%s == %s" % (key, value))

        '''
        aList = self.get_list_of_databases()
        self.List_Of_Entries = []
        for database_list in aList:
            for entry_dict in database_list:
                print(entry_dict)
                self.List_Of_Entries.append(entry_dict)
        return self.List_Of_Entries
        '''



    def get_average_duration(self,script_name):
        #print(script_name)
        if script_name.endswith('.py'):
            script_name = script_name.strip('.py')
        aList = self.Cached_List_Of_Databases
        self.List_Of_Durations = []

        for database_list in aList:
            for entry_dict in database_list:
                #print(entry_dict)
                if entry_dict['script_name'] == script_name:
                    if entry_dict['pass'] == 'True':
                        start = entry_dict['script_end_time']
                        end = entry_dict['script_start_time']
                        FMT = '%H:%M:%S'
                        tdelta = datetime.strptime(start, FMT) - datetime.strptime(end, FMT)
                        tdelta.total_seconds()
                        #print(type(tdelta))
                        #for i in dir(tdelta):
                        #    print(i)
                        self.List_Of_Durations.append(tdelta.total_seconds())
        if self.List_Of_Durations != []:
            return statistics.mean(self.List_Of_Durations)
        else:
            return 0
        #average = timedelta(seconds=sum(map(lambda f: int(f[0]) * 3600 + int(f[1]) * 60 + int(f[2]), map(lambda f: f.split(':'),self.List_Of_Durations))) / len(self.List_Of_Durations)))
        #print(average)









    def enter_results_into_database(self,Info_Dict):
        self.Info_Dictionary = Info_Dict

        with open(self.database_location_file, 'rb') as json_file:
            Lista = pickle.load(json_file)
            Lista.append(self.Info_Dictionary)

        with open(self.database_location_file, 'wb') as json_file:
            pickle.dump(Lista, json_file)

        print('Entered Results Into Database -> ', self.database_location_file)


    def Create_New_Database(self):
        for i in range(100):
            try:
                print("Creating New Database -> ",self.database_location_file)
                lastcmd = os.getcwd()
                Folder = self.database_folder_location
                print(Folder)
                try:
                    os.chdir(Folder)
                except FileNotFoundError:
                    os.mkdir(Folder)
                    os.chdir(Folder)
                Lista = []
                #with open(self.database_location_file, 'w') as outfile:
                #    json.dump(Lista, outfile)
                with open(self.database_location_file, 'wb') as outfile:
                    pickle.dump(Lista, outfile)


                os.chdir(lastcmd)
                break
            except Exception as e:
                print(e)
                traceback.print_exc()
                time.sleep(1)


if __name__ == "__main__":
    from paths import Dictionary_Database_Location
    #database_location = Variable_File_Getter.getVariableFromFile('Database_Location')
    Dictionary_Database_Manager = Dictionary_Database_Manager_Class(Dictionary_Database_Location)
    #mean = Dictionary_Database_Manager.get_average_duration('8_PCthermostatprograms')
    #List = Dictionary_Database_Manager.get_entries('pass:True',back=['script_duration'])
    #List = Dictionary_Database_Manager.get_entries('pass:False')
    #List = Dictionary_Database_Manager.get_all_station_names()
    #List = Dictionary_Database_Manager.get_all_scripts_from_station('Smoke_Station')
    List = Dictionary_Database_Manager.get_total_scripts_passes_and_fails('Smoke_Station','4__PCJeff_Climatecheckokstatus')
    for Entry in List:
        print(Entry)

