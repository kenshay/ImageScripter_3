from yattag import Doc
from yattag import indent
import random
import os
from paramiko import SSHClient
import paramiko
import time
import traceback
from scp import SCPClient
from Database_Manager.Dictionary_Database_Manager import Dictionary_Database_Manager_Class
from paths import MAX_CUTOFF,Dictionary_Database_Location,Ignore_Graph_Script_List, All_Scripts_Folder_Location, Active_Build, Graph_Folder_Location, \
    Active_Build_without_EXE

####################################################################
ssh_host = '172.105.150.15'
ssh_user = 'root'
ssh_password = 'M8wh11YhL'
ssh_port = '22'
graph = r"C:\xampp\htdocs\index.php"


log_php_location = r"C:\xampp\htdocs\script_log.php"
Script_Log_Location = r"/var/www/html/script_log.php"


Short_Graph_Location = r"/var/www/html/index.php"




Long_Graph_Location = r"/var/www/html/long_graph.php"

def Sleep(sec):
    for i in range(sec):
        print(i,' ', sec)
        time.sleep(1)



def Upload_Graph_To_Server(path = None):
    print('Uploading To Server')
    try:

        ########################################################
        ssh = SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(ssh_host, username=ssh_user, password=ssh_password, look_for_keys=False)

        with SCPClient(ssh.get_transport()) as scp:
            print('Uploading ', log_php_location, 'To ', Script_Log_Location)
            scp.put(log_php_location, Script_Log_Location)
            print('Finished Uploading ', log_php_location)


            if path == None:
                print('Uploading ', graph, 'To ', Short_Graph_Location)
                scp.put(graph, Short_Graph_Location)
                print('Finished Uploading ', graph)
            else:
                print('Uploading ', graph, 'To ', path)
                scp.put(graph, path)
                print('Finished Uploading ', graph)
        ssh.close()
        scp.close()
    except:
        traceback.print_exc()
        try:
            ssh.close()
        except:
            pass
        try:
            scp.close()
        except:
            pass





def MAINS_SCRIPT(Cut_Off = None):
    Dictionary_Database_Manager = Dictionary_Database_Manager_Class(Dictionary_Database_Location)
    All_get_missing_scripts_from_current_build = Dictionary_Database_Manager.get_missing_scripts_from_current_build()
    Stations_List = Dictionary_Database_Manager.get_all_station_names()
    ##################################################################
    ##################################################################
    doc, tag, text = Doc().tagtext()

    doc.asis('<!DOCTYPE HTML>')
    with tag('html', lang=" en"):
        with tag('head'):
            doc.asis('<!-- basic.html -->')
            doc.asis('<meta http-equiv="refresh" content="999">')


            with tag('title'):
                text('basic.html')
            doc.asis('<meta charset = "UTF-8" />')
            doc.asis('<link rel="stylesheet" href="style.css">')
        with tag('body'):

            with tag('div',id="top_div"):

                with tag('h2', id="last_update_date"):
                    from datetime import datetime
                    now = datetime.now()
                    datest = now.strftime('%I:%M:%S   %Y/%m/%d')
                    text("Updated " + datest)

                if Cut_Off == None:
                    with tag('h2'):
                        with tag('a', id="build",href="http://172.105.150.15"):
                            text("Short Version")
                else:
                    with tag('h2'):
                        with tag('a', id="build",href="http://172.105.150.15/long_graph.php"):
                            text("Long Version")
                with tag('h2', id="build"):
                     astring = 'Build = $'
                     astring = astring.replace('$',str(Active_Build_without_EXE))
                     text(astring)
                with tag('h2', id="build"):
                    with tag('a', id="build", href="http://172.105.150.15/script_log.php"):
                        text("Log")




            with tag('div'):
                for Station_Name in sorted(Stations_List):
                    List_of_scripts_dicts = []
                    Max_Length_List = []
                    scripts_list = Dictionary_Database_Manager.get_all_scripts_from_station_by_folder(Station_Name)

                    for script_name_and_real_script_name in reversed(scripts_list):
                        List_of_both = script_name_and_real_script_name.split('|||')
                        script_name = List_of_both[0]
                        print('#',script_name)
                        real_script_name = List_of_both[1]
                        print('##', real_script_name)
                        if real_script_name not in Ignore_Graph_Script_List:
                                if Cut_Off == None:
                                    Pass_Fail_List_of_entries_for_script = Dictionary_Database_Manager.get_order_of_happened_scripts_passes_and_fails(
                                        Station_Name,real_script_name)

                                else:
                                    Pass_Fail_List_of_entries_for_script = Dictionary_Database_Manager.get_order_of_happened_scripts_passes_and_fails(
                                        Station_Name, real_script_name)[Cut_Off:]


                                Max_Length_List.append(len(Pass_Fail_List_of_entries_for_script))
                                script_dict = {}
                                script_dict['name'] = script_name
                                List = []
                                for entry in reversed(Pass_Fail_List_of_entries_for_script):


                                    Result_Dict = {}
                                    Result_Dict['pass'] = entry['pass'].split(':')[1]
                                    fail_Video_Name = entry['fail_video'].split(':')[1]
                                    fail_Video_Name = os.path.basename(fail_Video_Name)
                                    fail_Video_Name_without_avi = fail_Video_Name.rstrip('.avi')
                                    pass_Video_Name = entry['pass_video'].split(':')[1]
                                    pass_Video_Name = os.path.basename(pass_Video_Name)
                                    pass_Video_Name_without_avi = pass_Video_Name.rstrip('.avi')
                                    Result_Dict['fail_Video_Name_without_avi'] = fail_Video_Name_without_avi
                                    Result_Dict['pass_Video_Name_without_avi'] = pass_Video_Name_without_avi
                                    Result_Dict['index_time'] = entry['index_time']
                                    #############################################
                                    Result_Dict['entry'] = entry


                                    ##############################################
                                    List.append(Result_Dict)
                        script_dict['results'] = List
                        List_of_scripts_dicts.append(script_dict)
                    if Cut_Off == None:
                        Amount_Of_Runs_Total = max(Max_Length_List)
                    else:
                        Amount_Of_Runs_Total = int(str(MAX_CUTOFF).replace('-',''))
                    with tag('table', id="title_table"):
                        with tag('tr'):
                            with tag('td', id="title_table_td"):
                                text(Station_Name)
                    with tag('table', cellspacing="0", cellpadding="0"):
                        ###################################################################################
                        with tag('tr'):

                            for interger in reversed(range(Amount_Of_Runs_Total)):
                                interger += 1
                                with tag('td', id="td_script_number"):
                                    pass
                            for script_dict in List_of_scripts_dicts:
                                name = script_dict['name']
                                Result_Dict_List = script_dict['results']
                                with tag('tr'):
                                    for desc in name.split('/'):
                                        if '^0^' not in desc:
                                            with tag('td', id="td_script_name"):
                                                text(desc)
                                        else:
                                            with tag('td', id="td_script_name"):
                                                doc.asis('&nbsp;')
                                        with tag('td', id="td_script_name"):
                                            for i in range(3):
                                                doc.asis('&nbsp;')
                                    if len(Result_Dict_List) > Amount_Of_Runs_Total:
                                                        for blank in range(Amount_Of_Runs_Total - len(Result_Dict_List)):
                                                            with tag('td', id='tdnotrun'):
                                                                pass
                                                        for Result_Dict in Result_Dict_List:
                                                            entry = Result_Dict['entry']
                                                            pass_or_fail = Result_Dict['pass']
                                                            index_time = Result_Dict['index_time']
                                                            try:
                                                                looked_at = Result_Dict['entry']['looked_at'].split(':')[1]
                                                                if looked_at == 'True':
                                                                    looked_at = True
                                                                else:
                                                                    looked_at = False
                                                            except:
                                                                looked_at = False
                                                            if pass_or_fail == 'True':
                                                                pass_or_fail = 'tdpass'
                                                            else:
                                                                pass_or_fail = 'tdfail'
                                                            if looked_at == True:
                                                                pass_or_fail = 'tdlookedat'

                                                            fail_Video_Name_without_avi = Result_Dict['fail_Video_Name_without_avi']
                                                            if fail_Video_Name_without_avi != 'None':
                                                                #linkwhole = "location.href='http://172.105.150.15/fails/" + fail_Video_Name_without_avi + "/fail.php'"
                                                                simple_link = 'http://172.105.150.15/Entries/' + str(index_time) + '/result.php'
                                                                linkwhole = "location.href='http://172.105.150.15/Entries/" + str(index_time) + "/result.php'"
                                                                #print(linkwhole)
                                                                with tag('td', id=pass_or_fail, onclick=linkwhole):
                                                                    the_text = entry['date'].replace('date:','')
                                                                    text(the_text)
                                                                    doc.asis('<br>')
                                                                    the_text = entry['script_start_time'].replace('script_start_time:','')
                                                                    text(the_text)
                                                                    doc.asis('<br>')
                                                                    the_text = '<a href="$$">Info</a>'
                                                                    the_text = the_text.replace('$$', simple_link)
                                                                    doc.asis(the_text)
                                                            else:
                                                                index_time = Result_Dict['index_time']
                                                                pass_Video_Name_without_avi = Result_Dict['pass_Video_Name_without_avi']
                                                                simple_link = 'http://172.105.150.15/Entries/' + str(index_time) + '/result.php'
                                                                linkwhole = "location.href='http://172.105.150.15/Entries/" + str(index_time) + "/result.php'"

                                                                with tag('td', id=pass_or_fail, onclick=linkwhole):
                                                                    the_text = entry['date'].replace('date:','')
                                                                    text(the_text)
                                                                    doc.asis('<br>')
                                                                    the_text = entry['script_start_time'].replace('script_start_time:','')
                                                                    text(the_text)
                                                                    doc.asis('<br>')
                                                                    the_text = '<a href="$$">Info</a>'
                                                                    the_text = the_text.replace('$$',simple_link)
                                                                    doc.asis(the_text)
                                    else:
                                        for Result_Dict in Result_Dict_List:
                                            entry = Result_Dict['entry']
                                            pass_or_fail = Result_Dict['pass']
                                            index_time = Result_Dict['index_time']
                                            try:
                                                looked_at = Result_Dict['entry']['looked_at'].split(':')[1]
                                                if looked_at == 'True':
                                                    looked_at = True
                                                else:
                                                    looked_at = False
                                            except:
                                                looked_at = False
                                            if pass_or_fail == 'True':
                                                pass_or_fail = 'tdpass'
                                            else:
                                                pass_or_fail = 'tdfail'
                                            if looked_at == True:
                                                pass_or_fail = 'tdlookedat'

                                            fail_Video_Name_without_avi = Result_Dict['fail_Video_Name_without_avi']
                                            if fail_Video_Name_without_avi != 'None':
                                                # linkwhole = "location.href='http://172.105.150.15/fails/" + fail_Video_Name_without_avi + "/fail.php'"
                                                simple_link = 'http://172.105.150.15/Entries/' + str(
                                                    index_time) + '/result.php'
                                                linkwhole = "location.href='http://172.105.150.15/Entries/" + str(
                                                    index_time) + "/result.php'"
                                                # print(linkwhole)
                                                with tag('td', id=pass_or_fail, onclick=linkwhole):
                                                    the_text = entry['date'].replace('date:', '')
                                                    text(the_text)
                                                    doc.asis('<br>')
                                                    the_text = entry['script_start_time'].replace('script_start_time:',
                                                                                                  '')
                                                    text(the_text)
                                                    doc.asis('<br>')
                                                    the_text = '<a href="$$">Info</a>'
                                                    the_text = the_text.replace('$$', simple_link)
                                                    doc.asis(the_text)
                                            else:
                                                index_time = Result_Dict['index_time']
                                                pass_Video_Name_without_avi = Result_Dict['pass_Video_Name_without_avi']
                                                simple_link = 'http://172.105.150.15/Entries/' + str(
                                                    index_time) + '/result.php'
                                                linkwhole = "location.href='http://172.105.150.15/Entries/" + str(
                                                    index_time) + "/result.php'"
                                                with tag('td', id=pass_or_fail, onclick=linkwhole):
                                                    the_text = entry['date'].replace('date:', '')
                                                    text(the_text)
                                                    doc.asis('<br>')
                                                    the_text = entry['script_start_time'].replace('script_start_time:',
                                                                                                  '')
                                                    text(the_text)
                                                    doc.asis('<br>')
                                                    the_text = '<a href="$$">Info</a>'
                                                    the_text = the_text.replace('$$', simple_link)
                                                    doc.asis(the_text)
                                        for blank in range(Amount_Of_Runs_Total - len(Result_Dict_List)):
                                            with tag('td', id='tdnotrun'):
                                                pass
                            with tag('tr'):
                                for i in range(8):
                                    with tag('td', id="td_script_name"):
                                        pass
                                for interger in reversed(range(Amount_Of_Runs_Total)):
                                    interger += 1
                                    with tag('td', id="td_script_number"):
                                        #text(str(interger))
                                        pass
            with tag('div'):
                with tag('h1', id="missing"):
                    doc.asis('<br>')
                    text('MISSING SCRIPTS')
                    doc.asis('<br>')

                for missing in All_get_missing_scripts_from_current_build:
                    with tag('p'):
                        doc.asis('<br>')
                        text(missing)
                        doc.asis('<br>')
    return doc



def Make_LOG_Graph():
    Dictionary_Database_Manager = Dictionary_Database_Manager_Class(Dictionary_Database_Location)
    List_of_entries = Dictionary_Database_Manager.get_list_of_logs()
    doc, tag, text = Doc().tagtext()
    doc.asis('<!DOCTYPE HTML>')
    with tag('html', lang=" en"):
        with tag('head'):
            doc.asis('<!-- basic.html -->')
            doc.asis('<meta http-equiv="refresh" content="999">')
            with tag('title'):
                text('basic.html')
            doc.asis('<meta charset = "UTF-8" />')
            doc.asis('<link rel="stylesheet" href="style.css">')
        with tag('body'):
            with tag('table'):
                with tag('tr'):
                    for title in ['Index','Date','Start','End','Station','Script']:
                        with tag('td'):
                            text(title)



                for entries in List_of_entries:
                    with tag('tr'):
                        for td_num in entries:
                            with tag('td'):
                                text(str(td_num))
    result = indent(doc.getvalue())
    directory = os.path.dirname(os.path.abspath(log_php_location))
    if not os.path.exists(directory):
        os.makedirs(directory)
    with open(log_php_location, 'w+') as f:
        f.write(result)
        print('Log Finished')




def Make_Graph(Cut_Off = None):
    print('Making Graph')
    try:
        Make_LOG_Graph()
        doc = MAINS_SCRIPT(Cut_Off)
        result = indent(doc.getvalue())
        directory = os.path.dirname(os.path.abspath(graph))
        if not os.path.exists(directory):
            os.makedirs(directory)
        with open(graph, 'w+') as f:
            # print(graph)
            f.write(result)
        print('Graph Finished')
    except Exception as e:
        traceback.print_exc()


if __name__ == "__main__":
    while True:
        ###########SHORT GRAPH
        Make_Graph(Cut_Off = MAX_CUTOFF)
        Upload_Graph_To_Server()

        ###########LONG GRAPH
        Make_Graph(Cut_Off = None)
        Upload_Graph_To_Server(Long_Graph_Location)
        Sleep(60)


