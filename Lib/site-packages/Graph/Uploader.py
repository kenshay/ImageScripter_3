from Database_Manager.Dictionary_Database_Manager import Dictionary_Database_Manager_Class
from paths import Dictionary_Database_Location
from scp import SCPClient
from paths import Converted_HTML_File,Converted_Temp_Path,Server_All_Videos_Folder_Location,Imageexelocation,Sandbox_location,Error_Text_Path,Desktop_location,ssh_host,ssh_user,ssh_password,ssh_port,Server_Entries_Folder_Location,isTesting,FAIL_PHP_FILE,PASS_PHP_FILE
from paramiko import SSHClient
import paramiko
import os
import time
import traceback


def Sleep(sec):
    for i in range(sec):
        print(i,' ', sec)
        time.sleep(1)




class Uploader_Class():
  def __init__(self):
      pass

  def put_file_in_folder_on_server(self,source_path,destination_path):
      print('Putting File In Folder On Server -> ',source_path,'-----',destination_path)
      ssh = SSHClient()
      ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
      ssh.connect(ssh_host, username=ssh_user, password=ssh_password, look_for_keys=False)
      with SCPClient(ssh.get_transport()) as scp:
          ssh = SSHClient()
          ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
          ssh.connect(ssh_host, username=ssh_user, password=ssh_password, look_for_keys=False)
          sftp = ssh.open_sftp()
          with SCPClient(ssh.get_transport()) as scp:
              scp.put(source_path,destination_path)
              print('Succesfully Put File In Folder On Server -> ',destination_path)

  def clear_sandbox(self):
      print('Clearing Old Sanbox Files')
      TheLast_Dir = os.getcwd()
      if  not os.path.exists(Sandbox_location):
          os.makedirs(Sandbox_location)
      os.chdir(Sandbox_location)
      List_Of_Old_Files = os.listdir(Sandbox_location)
      for old_file in List_Of_Old_Files:
          if os.path.exists(old_file):
              try:
                os.remove(old_file)
              except PermissionError:
                    traceback.print_exc()
                    Total_Tries = 3
                    PassedTheFix = False
                    for i in range(Total_Tries):
                        try:
                            os.remove(old_file)
                            PassedTheFix = True
                            break
                        except:
                            traceback.print_exc()
                            print('Cant remove file, will try again. ',i,' / ',Total_Tries)
                            Sleep(60)
                    if PassedTheFix == False:
                        raise ValueError('Cant remove file')

      os.chdir(TheLast_Dir)

  def add_files_to_sandbox(self,entry):
      print('Adding Files To Sandbox')
      TheLast_Dir = os.getcwd()
      os.chdir(Sandbox_location)
      for Key in entry:
          Key_with_Txt_End = Key + '.txt'
          with open(Key_with_Txt_End, 'w+') as f:
              key_value = str(entry[Key])
              if ':' in key_value:
                  count = 0
                  for symbol in key_value:
                      if symbol == ':':
                          count = count + 1
                  if count == 1:
                      key_value = key_value.split(':')[1]
                  else:
                      if 'script_start_time:' in key_value:
                          key_value = key_value.split('script_start_time:')[1]
                      elif 'script_end_time:' in key_value:
                          key_value = key_value.split('script_end_time:')[1]
                      else:
                          pass
              f.write(key_value)
      os.chdir(TheLast_Dir)


  def upload_sandbox_files(self,entry_folder):
      print('Uploading Sandbox Files')
      TheLast_Dir = os.getcwd()
      os.chdir(Sandbox_location)
      List_of_sandbox_files = os.listdir(Sandbox_location)
      for source_path in List_of_sandbox_files:
          destination_path = entry_folder + '/' + source_path
          self.put_file_in_folder_on_server(source_path, destination_path)
      os.chdir(TheLast_Dir)
      print('Finished Uploading Sandbox Files')


  def Get_List_Of_Files_On_Server(self,folder_on_server):
      try:
          print("Get_List_Of_Files_On_Server")
          ssh = SSHClient()
          ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
          ssh.connect(ssh_host, username=ssh_user, password=ssh_password, look_for_keys=False)
          sftp = ssh.open_sftp()
          List = []
          for filename in sftp.listdir(folder_on_server):
              List.append(filename)
          ssh.close()
          sftp.close()
          return List

      except:
          traceback.print_exc()
          try:
              ssh.close()
              sftp.close()
          except:
              traceback.print_exc()




  def Get_Already_Uploaded_Files(self):
      try:
          print("Get_Already_Uploaded_Files")
          ssh = SSHClient()
          ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
          ssh.connect(ssh_host, username=ssh_user, password=ssh_password, look_for_keys=False)
          sftp = ssh.open_sftp()
          List_Of_Already_Uploaded_Videos = []
          for filename in sftp.listdir(Server_All_Videos_Folder_Location):
              List_Of_Already_Uploaded_Videos.append(filename)
          ssh.close()
          sftp.close()
          return List_Of_Already_Uploaded_Videos

      except:
          traceback.print_exc()
          try:
              ssh.close()
              sftp.close()
          except:
              traceback.print_exc()














  def convert_video_avi_to_mp4_return_path(self,original_full_Path_avi):
      Did_find_Video = False
      for i in range(100):
          if not os.path.exists(original_full_Path_avi):
              print('Waiting for video to appear in hardriver for converting',original_full_Path_avi)
              Sleep(i)
          else:
              print('Found video')
              Did_find_Video = True
              break
      if Did_find_Video == False:
              string_er = 'Cant find video for Converting -> ' + original_full_Path_avi
              raise ValueError(string_er)



      print('Converting Video -> ',original_full_Path_avi)
      Already_Uploaded_Files = self.Get_List_Of_Files_On_Server(Server_All_Videos_Folder_Location)
      Already_Uploaded_Files = [x.replace('.mp4', '.avi') for x in Already_Uploaded_Files]
      ##########################################################################################
      original_file_name_only_avi = os.path.basename(original_full_Path_avi)
      original_file_name_only_mp4 = original_file_name_only_avi.replace('.avi', '.mp4')
      converted_Mp4_Path = Converted_Temp_Path + '\\' + original_file_name_only_mp4
      try:
          os.remove(converted_Mp4_Path)
      except Exception as e:

           pass
      if original_file_name_only_mp4 in Already_Uploaded_Files:
          print('Video Already On Server -> ',original_full_Path_avi,'----',converted_Mp4_Path)
          return False
      else:
          ############################################################################################
          Last_Dir = os.getcwd()
          print('FFMPEG Location -> ',Imageexelocation)
          os.chdir(Imageexelocation)
          command = 'ffmpeg -i ' + original_full_Path_avi + ' -vf "pad=ceil(iw/2)*2:ceil(ih/2)*2" ' + converted_Mp4_Path + ' -hide_banner'
          print('FFMPEG Command is -> ',command)
          os.system(command)
          os.chdir(Last_Dir)
          print('Finished Converting Video -> ', converted_Mp4_Path)
          if not os.path.exists(converted_Mp4_Path):
              ErrString = converted_Mp4_Path + ' -> Does not Exists'
              raise ValueError(ErrString)
          else:
            return converted_Mp4_Path



  def get_fresh_list_of_entries(self):
      Dictionary_Database_Manager = Dictionary_Database_Manager_Class(Dictionary_Database_Location)
      List = Dictionary_Database_Manager.get_entries()
      return List

  def make_new_folder_on_server(self,path):
      print('Trying to make new folder on server -> ',path)
      ssh = SSHClient()
      ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
      ssh.connect(ssh_host, username=ssh_user, password=ssh_password, look_for_keys=False)
      with SCPClient(ssh.get_transport()) as scp:
          ssh = SSHClient()
          ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
          ssh.connect(ssh_host, username=ssh_user, password=ssh_password, look_for_keys=False)
          sftp = ssh.open_sftp()
          try:
              print(sftp.stat(path))
              print('Not making folder, already exists -> ',path)
          except FileNotFoundError:
                sftp.mkdir(path)
                print('Made new directory -> ', path)

  def Create_folders_for_all_entries_and_put_files_in(self):



      Entries = self.get_fresh_list_of_entries()
      for Entry in Entries:
          ##############################################Get Information ##################
          index_time = str(Entry['index_time'])
          tartget_path = Entry['target_img'].split(':')[1]
          the_error = Entry['error'].split(':')[1]
          ######################################Fail Video
          if not isTesting:
                the_fail_video_full_avi_path = Entry['fail_video'].split(':')[1]
          else:
                the_fail_video_full_avi_path = Desktop_location + "\FrankPC_Station__00_Restart_Hard__8.4.96.0__Pass__x.avi"
          the_fail_video_name_only_avi = os.path.basename(the_fail_video_full_avi_path)
          the_fail_video_name_only_mp4 = the_fail_video_name_only_avi.replace('.avi', '.mp4')
          ########################################
          ######################################Passs Video
          if not isTesting:
                the_pass_video_full_avi_path = Entry['pass_video'].split(':')[1]
          else:
                the_pass_video_full_avi_path = Desktop_location + "\FrankPC_Station__00_Restart_Hard__8.4.96.0__Pass__x.avi"
          the_pass_video_name_only_avi = os.path.basename(the_pass_video_full_avi_path)
          the_pass_video_name_only_mp4 = the_pass_video_name_only_avi.replace('.avi','.mp4')
          ########################################


          ##############Get Passed Or not Bool##################
          Passed = None
          if Entry['pass'] == 'pass:True':
              Passed = True
          elif Entry['fail'] == 'fail:True':
              Passed = False
          else:
              print("Entry['fail'] == ",Entry['fail'])
          #######################################################
          ##############################################CREATE DIR##########
          entry_folder = Server_Entries_Folder_Location + index_time
          self.make_new_folder_on_server(entry_folder)
          ####################################################Add Files######################
          ##################################################################################
          ############Result#############
          ##########################################################
          if Passed == True:
                    ##############################################
                    with open(PASS_PHP_FILE,'r') as f:
                        TEXT = f.read()
                    Path_To_Video = "../../All_Videos/" + the_pass_video_name_only_mp4
                    TEXT = TEXT.replace('&VIDEO&',Path_To_Video)
                    with open(Converted_HTML_File,'w+') as f:
                        f.write(TEXT)
                  ##############################################
                    source_path = Converted_HTML_File
                    destination_path = entry_folder + '/result.php'
                    self.put_file_in_folder_on_server(source_path,destination_path)
          elif Passed == False:
                    ##############################################
                    with open(FAIL_PHP_FILE, 'r') as f:
                        TEXT = f.read()
                    Path_To_Video = "../../All_Videos/" + the_fail_video_name_only_mp4
                    TEXT = TEXT.replace('&VIDEO&', Path_To_Video)
                    with open(Converted_HTML_File, 'w+') as f:
                        f.write(TEXT)
                    #############################################################
                    source_path = FAIL_PHP_FILE
                    destination_path = entry_folder + '/result.php'
                    self.put_file_in_folder_on_server(source_path, destination_path)
          else:
                        raise ValueError('Script Entry is not Pass or Fail. Needs to be one')
          ###########Target###########
          if Passed == False:
              if isTesting == True:
                    tartget_path = Desktop_location + r"\target.png"
              destination_path = entry_folder + '/target.png'
              self.put_file_in_folder_on_server(tartget_path, destination_path)
              #################################################################
          ###########Templet###########
          if Passed == False:
              if isTesting == True:
                    template_path = Desktop_location + r"\temp.png"
              destination_path = entry_folder + '/template.png'
              self.put_file_in_folder_on_server(template_path, destination_path)
              #################################################################
          ###########Error###########
          if Passed == False:
              if os.path.exists(Error_Text_Path):
                  os.remove(Error_Text_Path)
              with open(Error_Text_Path, 'w') as f:
                  f.write(the_error)
              destination_path = entry_folder + '/error.txt'
              self.put_file_in_folder_on_server(Error_Text_Path, destination_path)
              #################################################################
          ##########SANDBOX#########################
          self.clear_sandbox()
          self.add_files_to_sandbox(Entry)
          self.upload_sandbox_files(entry_folder)
          ###################################################VIDEO
          if Passed == False:
              if isTesting == True:
                    fail_video_path = Desktop_location + r"\FrankPC_Station__00_Restart_Hard__8.4.96.0__Pass__x.avi"
                    converted = self.convert_video_avi_to_mp4_return_path(fail_video_path)
              else:
                  fail_video_path = Entry['fail_video'].split(':')[1]
                  converted = self.convert_video_avi_to_mp4_return_path(fail_video_path)

          if Passed == True:
              if isTesting == True:
                    pass_video_path = Desktop_location + r"\FrankPC_Station__00_Restart_Hard__8.4.96.0__Pass__x.avi"
                    converted = self.convert_video_avi_to_mp4_return_path(pass_video_path)
              else:
                  pass_video_path = Entry['pass_video'].split(':')[1]

                  converted = self.convert_video_avi_to_mp4_return_path(pass_video_path)
          converted_name_only = os.path.basename(converted)
          destination_path = Server_All_Videos_Folder_Location + '/' + converted_name_only
          self.put_file_in_folder_on_server(converted, destination_path)





if __name__ == "__main__":
    from time import sleep
    while True:

         Uploader = Uploader_Class()
         Uploader.Create_folders_for_all_entries_and_put_files_in()
         Sleep(60)