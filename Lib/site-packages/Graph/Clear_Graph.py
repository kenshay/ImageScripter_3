from Database_Manager.Dictionary_Database_Manager import Dictionary_Database_Manager_Class
from paths import Dictionary_Database_Location
from scp import SCPClient
from paths import Database_Folder,Active_Build_without_EXE,Dictionary_Database_Folder,Converted_HTML_File,Converted_Temp_Path,Server_All_Videos_Folder_Location,Imageexelocation,Sandbox_location,Error_Text_Path,Desktop_location,ssh_host,ssh_user,ssh_password,ssh_port,Server_Entries_Folder_Location,isTesting,FAIL_PHP_FILE,PASS_PHP_FILE
from paramiko import SSHClient
import paramiko
import os
import time
import traceback

from Graph.Generator import Make_Graph,Upload_Graph_To_Server

def Sleep(sec):
    for i in range(sec):
        print(i,' ', sec)
        time.sleep(1)




class Deleter_Class():
    def __init__(self):
      self.create_ssh_sftp_connection()

    def create_ssh_sftp_connection(self):
      print('Creating Connections')
      self.ssh = SSHClient()
      self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
      self.ssh.connect(ssh_host, username=ssh_user, password=ssh_password, look_for_keys=False)
      print('Created SSH')
      self.scp = SCPClient(self.ssh.get_transport())
      print('Created SCP')
      self.sftp = self.ssh.open_sftp()
      print('Created SFTP')

    def close_connections(self):
      print("Closing Connections")
      self.sftp.close()
      self.ssh.close()
      self.scp.close()




    def delete_files_or_folders_in_directory(self,remote_path):
        print('Deleting Files In -> ',remote_path)
        filesInRemotePath = self.sftp.listdir(path=remote_path)
        for afile in filesInRemotePath:
            dest = remote_path + afile
            print('Deleting -> ',dest)
            try:
                self.sftp.remove(dest)
            except OSError:
                #dest = dest + '/'
                print(dest)
                self.sftp.rmdir(dest)



    def Delete_Dictionary_Databases_For_Current_Build(self):
        last_dir = os.getcwd()
        os.chdir(Dictionary_Database_Folder)
        for dicti in os.listdir(Dictionary_Database_Folder):
            if Active_Build_without_EXE in dicti:
                print("Removing -> ",dicti)
                os.remove(dicti)
        os.chdir(last_dir)


    def Delete_Databases(self):
        last_dir = os.getcwd()
        os.chdir(Database_Folder)
        for dicti in os.listdir(Database_Folder):
                print("Removing -> ",dicti)
                os.remove(dicti)
        os.chdir(last_dir)




if __name__ == "__main__":
    try:
        Deleter = Deleter_Class()


        Deleter.delete_files_or_folders_in_directory(Server_All_Videos_Folder_Location)
        Deleter.Delete_Dictionary_Databases_For_Current_Build()


    except:
        traceback.print_exc()